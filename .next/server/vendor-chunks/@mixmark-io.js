/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mixmark-io";
exports.ids = ["vendor-chunks/@mixmark-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js":
/*!********************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\nconst { parse } = __webpack_require__(/*! ./style_parser */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/style_parser.js\");\r\n\r\nmodule.exports = function (elt) {\r\n  const style = new CSSStyleDeclaration(elt)\r\n  const handler = {\r\n    get: function(target, property) {\r\n      return property in target ? target[property] : target.getPropertyValue(dasherizeProperty(property));\r\n    },\r\n    has: function(target, key) {\r\n      return true;\r\n    },\r\n    set: function(target, property, value) {\r\n      if (property in target) {\r\n        target[property] = value;\r\n      } else {\r\n        target.setProperty(dasherizeProperty(property), value ?? undefined);\r\n      }\r\n\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return new Proxy(style, handler);\r\n};\r\n\r\nfunction dasherizeProperty(property) {\r\n  return property.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n\r\nfunction CSSStyleDeclaration(elt) {\r\n  this._element = elt;\r\n}\r\n\r\nconst IMPORTANT_BANG = '!important';\r\n\r\n// Utility function for parsing style declarations\r\n// Pass in a string like \"margin-left: 5px; border-style: solid\"\r\n// and this function returns an object like\r\n// {\"margin-left\":\"5px\", \"border-style\":\"solid\"}\r\nfunction parseStyles(value) {\r\n  const result = {\r\n    property: {},\r\n    priority: {},\r\n  }\r\n\r\n  if (!value) {\r\n    return result;\r\n  }\r\n\r\n  const styleValues = parse(value);\r\n  if (styleValues.length < 2) {\r\n    return result;\r\n  }\r\n\r\n  for (let i = 0; i < styleValues.length; i += 2) {\r\n    const name = styleValues[i];\r\n    let value = styleValues[i+1];\r\n\r\n    if (value.endsWith(IMPORTANT_BANG)) {\r\n      result.priority[name] = 'important';\r\n      value = value.slice(0, -IMPORTANT_BANG.length).trim();\r\n    }\r\n\r\n    result.property[name] = value;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nvar NO_CHANGE = {}; // Private marker object\r\n\r\nCSSStyleDeclaration.prototype = Object.create(Object.prototype, {\r\n\r\n  // Return the parsed form of the element's style attribute.\r\n  // If the element's style attribute has never been parsed\r\n  // or if it has changed since the last parse, then reparse it\r\n  // Note that the styles don't get parsed until they're actually needed\r\n  _parsed: { get: function() {\r\n    if (!this._parsedStyles || this.cssText !== this._lastParsedText) {\r\n      var text = this.cssText;\r\n      this._parsedStyles = parseStyles(text);\r\n      this._lastParsedText = text;\r\n      delete this._names;\r\n    }\r\n    return this._parsedStyles;\r\n  }},\r\n\r\n  // Call this method any time the parsed representation of the\r\n  // style changes.  It converts the style properties to a string and\r\n  // sets cssText and the element's style attribute\r\n  _serialize: { value: function() {\r\n    var styles = this._parsed;\r\n    var s = \"\";\r\n\r\n    for(var name in styles.property) {\r\n      if (s) s += \" \";\r\n      s += name + \": \" + styles.property[name];\r\n      if (styles.priority[name]) {\r\n        s += \" !\" + styles.priority[name];\r\n      }\r\n      s += \";\";\r\n    }\r\n\r\n    this.cssText = s;      // also sets the style attribute\r\n    this._lastParsedText = s;  // so we don't reparse\r\n    delete this._names;\r\n  }},\r\n\r\n  cssText: {\r\n    get: function() {\r\n      // XXX: this is a CSSStyleDeclaration for an element.\r\n      // A different impl might be necessary for a set of styles\r\n      // associated returned by getComputedStyle(), e.g.\r\n      return this._element.getAttribute(\"style\");\r\n    },\r\n    set: function(value) {\r\n      // XXX: I should parse and serialize the value to\r\n      // normalize it and remove errors. FF and chrome do that.\r\n      this._element.setAttribute(\"style\", value);\r\n    }\r\n  },\r\n\r\n  length: { get: function() {\r\n    if (!this._names)\r\n      this._names = Object.getOwnPropertyNames(this._parsed.property);\r\n    return this._names.length;\r\n  }},\r\n\r\n  item: { value: function(n) {\r\n    if (!this._names)\r\n      this._names = Object.getOwnPropertyNames(this._parsed.property);\r\n    return this._names[n];\r\n  }},\r\n\r\n  getPropertyValue: { value: function(property) {\r\n    property = property.toLowerCase();\r\n    return this._parsed.property[property] || \"\";\r\n  }},\r\n\r\n  getPropertyPriority: { value: function(property) {\r\n    property = property.toLowerCase();\r\n    return this._parsed.priority[property] || \"\";\r\n  }},\r\n\r\n  setProperty: { value: function(property, value, priority) {\r\n    property = property.toLowerCase();\r\n    if (value === null || value === undefined) {\r\n      value = \"\";\r\n    }\r\n    if (priority === null || priority === undefined) {\r\n      priority = \"\";\r\n    }\r\n\r\n    // String coercion\r\n    if (value !== NO_CHANGE) {\r\n      value = \"\" + value;\r\n    }\r\n\r\n    value = value.trim();\r\n    if (value === \"\") {\r\n      this.removeProperty(property);\r\n      return;\r\n    }\r\n\r\n    if (priority !== \"\" && priority !== NO_CHANGE &&\r\n        !/^important$/i.test(priority)) {\r\n      return;\r\n    }\r\n\r\n    var styles = this._parsed;\r\n    if (value === NO_CHANGE) {\r\n      if (!styles.property[property]) {\r\n        return; // Not a valid property name.\r\n      }\r\n      if (priority !== \"\") {\r\n        styles.priority[property] = \"important\";\r\n      } else {\r\n        delete styles.priority[property];\r\n      }\r\n    } else {\r\n      // We don't just accept the property value.  Instead\r\n      // we parse it to ensure that it is something valid.\r\n      // If it contains a semicolon it is invalid\r\n      if (value.indexOf(\";\") !== -1) return;\r\n\r\n      var newprops = parseStyles(property + \":\" + value);\r\n      if (Object.getOwnPropertyNames(newprops.property).length === 0) {\r\n        return; // no valid property found\r\n      }\r\n      if (Object.getOwnPropertyNames(newprops.priority).length !== 0) {\r\n        return; // if the value included '!important' it wasn't valid.\r\n      }\r\n\r\n      // XXX handle shorthand properties\r\n\r\n      for (var p in newprops.property) {\r\n        styles.property[p] = newprops.property[p];\r\n        if (priority === NO_CHANGE) {\r\n          continue;\r\n        } else if (priority !== \"\") {\r\n          styles.priority[p] = \"important\";\r\n        } else if (styles.priority[p]) {\r\n          delete styles.priority[p];\r\n        }\r\n      }\r\n    }\r\n\r\n    // Serialize and update cssText and element.style!\r\n    this._serialize();\r\n  }},\r\n\r\n  setPropertyValue: { value: function(property, value) {\r\n    return this.setProperty(property, value, NO_CHANGE);\r\n  }},\r\n\r\n  setPropertyPriority: { value: function(property, priority) {\r\n    return this.setProperty(property, NO_CHANGE, priority);\r\n  }},\r\n\r\n  removeProperty: { value: function(property) {\r\n    property = property.toLowerCase();\r\n    var styles = this._parsed;\r\n    if (property in styles.property) {\r\n      delete styles.property[property];\r\n      delete styles.priority[property];\r\n\r\n      // Serialize and update cssText and element.style!\r\n      this._serialize();\r\n    }\r\n  }},\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/CharacterData.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* jshint bitwise: false */\r\n\r\nmodule.exports = CharacterData;\r\n\r\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Leaf.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ChildNode.js\");\r\nvar NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NonDocumentTypeChildNode.js\");\r\n\r\nfunction CharacterData() {\r\n  Leaf.call(this);\r\n}\r\n\r\nCharacterData.prototype = Object.create(Leaf.prototype, {\r\n  // DOMString substringData(unsigned long offset,\r\n  //               unsigned long count);\r\n  // The substringData(offset, count) method must run these steps:\r\n  //\r\n  //     If offset is greater than the context object's\r\n  //     length, throw an INDEX_SIZE_ERR exception and\r\n  //     terminate these steps.\r\n  //\r\n  //     If offset+count is greater than the context\r\n  //     object's length, return a DOMString whose value is\r\n  //     the UTF-16 code units from the offsetth UTF-16 code\r\n  //     unit to the end of data.\r\n  //\r\n  //     Return a DOMString whose value is the UTF-16 code\r\n  //     units from the offsetth UTF-16 code unit to the\r\n  //     offset+countth UTF-16 code unit in data.\r\n  substringData: { value: function substringData(offset, count) {\r\n    if (arguments.length < 2) { throw new TypeError(\"Not enough arguments\"); }\r\n    // Convert arguments to WebIDL \"unsigned long\"\r\n    offset = offset >>> 0;\r\n    count = count >>> 0;\r\n    if (offset > this.data.length || offset < 0 || count < 0) {\r\n      utils.IndexSizeError();\r\n    }\r\n    return this.data.substring(offset, offset+count);\r\n  }},\r\n\r\n  // void appendData(DOMString data);\r\n  // The appendData(data) method must append data to the context\r\n  // object's data.\r\n  appendData: { value: function appendData(data) {\r\n    if (arguments.length < 1) { throw new TypeError(\"Not enough arguments\"); }\r\n    this.data += String(data);\r\n  }},\r\n\r\n  // void insertData(unsigned long offset, DOMString data);\r\n  // The insertData(offset, data) method must run these steps:\r\n  //\r\n  //     If offset is greater than the context object's\r\n  //     length, throw an INDEX_SIZE_ERR exception and\r\n  //     terminate these steps.\r\n  //\r\n  //     Insert data into the context object's data after\r\n  //     offset UTF-16 code units.\r\n  //\r\n  insertData: { value: function insertData(offset, data) {\r\n    return this.replaceData(offset, 0, data);\r\n  }},\r\n\r\n\r\n  // void deleteData(unsigned long offset, unsigned long count);\r\n  // The deleteData(offset, count) method must run these steps:\r\n  //\r\n  //     If offset is greater than the context object's\r\n  //     length, throw an INDEX_SIZE_ERR exception and\r\n  //     terminate these steps.\r\n  //\r\n  //     If offset+count is greater than the context\r\n  //     object's length var count be length-offset.\r\n  //\r\n  //     Starting from offset UTF-16 code units remove count\r\n  //     UTF-16 code units from the context object's data.\r\n  deleteData: { value: function deleteData(offset, count) {\r\n    return this.replaceData(offset, count, '');\r\n  }},\r\n\r\n\r\n  // void replaceData(unsigned long offset, unsigned long count,\r\n  //          DOMString data);\r\n  //\r\n  // The replaceData(offset, count, data) method must act as\r\n  // if the deleteData() method is invoked with offset and\r\n  // count as arguments followed by the insertData() method\r\n  // with offset and data as arguments and re-throw any\r\n  // exceptions these methods might have thrown.\r\n  replaceData: { value: function replaceData(offset, count, data) {\r\n    var curtext = this.data, len = curtext.length;\r\n    // Convert arguments to correct WebIDL type\r\n    offset = offset >>> 0;\r\n    count = count >>> 0;\r\n    data = String(data);\r\n\r\n    if (offset > len || offset < 0) utils.IndexSizeError();\r\n\r\n    if (offset+count > len)\r\n      count = len - offset;\r\n\r\n    var prefix = curtext.substring(0, offset),\r\n    suffix = curtext.substring(offset+count);\r\n\r\n    this.data = prefix + data + suffix;\r\n  }},\r\n\r\n  // Utility method that Node.isEqualNode() calls to test Text and\r\n  // Comment nodes for equality.  It is okay to put it here, since\r\n  // Node will have already verified that nodeType is equal\r\n  isEqual: { value: function isEqual(n) {\r\n    return this._data === n._data;\r\n  }},\r\n\r\n  length: { get: function() { return this.data.length; }}\r\n\r\n});\r\n\r\nObject.defineProperties(CharacterData.prototype, ChildNode);\r\nObject.defineProperties(CharacterData.prototype, NonDocumentTypeChildNode);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9DaGFyYWN0ZXJEYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ2E7QUFDYjtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG1FQUFRO0FBQzNCLFlBQVksbUJBQU8sQ0FBQyxxRUFBUztBQUM3QixnQkFBZ0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUNyQywrQkFBK0IsbUJBQU8sQ0FBQywyR0FBNEI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLGdDQUFnQztBQUNoQztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvQ2hhcmFjdGVyRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gQ2hhcmFjdGVyRGF0YTtcclxuXHJcbnZhciBMZWFmID0gcmVxdWlyZSgnLi9MZWFmJyk7XHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxudmFyIENoaWxkTm9kZSA9IHJlcXVpcmUoJy4vQ2hpbGROb2RlJyk7XHJcbnZhciBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUgPSByZXF1aXJlKCcuL05vbkRvY3VtZW50VHlwZUNoaWxkTm9kZScpO1xyXG5cclxuZnVuY3Rpb24gQ2hhcmFjdGVyRGF0YSgpIHtcclxuICBMZWFmLmNhbGwodGhpcyk7XHJcbn1cclxuXHJcbkNoYXJhY3RlckRhdGEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShMZWFmLnByb3RvdHlwZSwge1xyXG4gIC8vIERPTVN0cmluZyBzdWJzdHJpbmdEYXRhKHVuc2lnbmVkIGxvbmcgb2Zmc2V0LFxyXG4gIC8vICAgICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBjb3VudCk7XHJcbiAgLy8gVGhlIHN1YnN0cmluZ0RhdGEob2Zmc2V0LCBjb3VudCkgbWV0aG9kIG11c3QgcnVuIHRoZXNlIHN0ZXBzOlxyXG4gIC8vXHJcbiAgLy8gICAgIElmIG9mZnNldCBpcyBncmVhdGVyIHRoYW4gdGhlIGNvbnRleHQgb2JqZWN0J3NcclxuICAvLyAgICAgbGVuZ3RoLCB0aHJvdyBhbiBJTkRFWF9TSVpFX0VSUiBleGNlcHRpb24gYW5kXHJcbiAgLy8gICAgIHRlcm1pbmF0ZSB0aGVzZSBzdGVwcy5cclxuICAvL1xyXG4gIC8vICAgICBJZiBvZmZzZXQrY291bnQgaXMgZ3JlYXRlciB0aGFuIHRoZSBjb250ZXh0XHJcbiAgLy8gICAgIG9iamVjdCdzIGxlbmd0aCwgcmV0dXJuIGEgRE9NU3RyaW5nIHdob3NlIHZhbHVlIGlzXHJcbiAgLy8gICAgIHRoZSBVVEYtMTYgY29kZSB1bml0cyBmcm9tIHRoZSBvZmZzZXR0aCBVVEYtMTYgY29kZVxyXG4gIC8vICAgICB1bml0IHRvIHRoZSBlbmQgb2YgZGF0YS5cclxuICAvL1xyXG4gIC8vICAgICBSZXR1cm4gYSBET01TdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVURi0xNiBjb2RlXHJcbiAgLy8gICAgIHVuaXRzIGZyb20gdGhlIG9mZnNldHRoIFVURi0xNiBjb2RlIHVuaXQgdG8gdGhlXHJcbiAgLy8gICAgIG9mZnNldCtjb3VudHRoIFVURi0xNiBjb2RlIHVuaXQgaW4gZGF0YS5cclxuICBzdWJzdHJpbmdEYXRhOiB7IHZhbHVlOiBmdW5jdGlvbiBzdWJzdHJpbmdEYXRhKG9mZnNldCwgY291bnQpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm90IGVub3VnaCBhcmd1bWVudHNcIik7IH1cclxuICAgIC8vIENvbnZlcnQgYXJndW1lbnRzIHRvIFdlYklETCBcInVuc2lnbmVkIGxvbmdcIlxyXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xyXG4gICAgY291bnQgPSBjb3VudCA+Pj4gMDtcclxuICAgIGlmIChvZmZzZXQgPiB0aGlzLmRhdGEubGVuZ3RoIHx8IG9mZnNldCA8IDAgfHwgY291bnQgPCAwKSB7XHJcbiAgICAgIHV0aWxzLkluZGV4U2l6ZUVycm9yKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhLnN1YnN0cmluZyhvZmZzZXQsIG9mZnNldCtjb3VudCk7XHJcbiAgfX0sXHJcblxyXG4gIC8vIHZvaWQgYXBwZW5kRGF0YShET01TdHJpbmcgZGF0YSk7XHJcbiAgLy8gVGhlIGFwcGVuZERhdGEoZGF0YSkgbWV0aG9kIG11c3QgYXBwZW5kIGRhdGEgdG8gdGhlIGNvbnRleHRcclxuICAvLyBvYmplY3QncyBkYXRhLlxyXG4gIGFwcGVuZERhdGE6IHsgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZERhdGEoZGF0YSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJOb3QgZW5vdWdoIGFyZ3VtZW50c1wiKTsgfVxyXG4gICAgdGhpcy5kYXRhICs9IFN0cmluZyhkYXRhKTtcclxuICB9fSxcclxuXHJcbiAgLy8gdm9pZCBpbnNlcnREYXRhKHVuc2lnbmVkIGxvbmcgb2Zmc2V0LCBET01TdHJpbmcgZGF0YSk7XHJcbiAgLy8gVGhlIGluc2VydERhdGEob2Zmc2V0LCBkYXRhKSBtZXRob2QgbXVzdCBydW4gdGhlc2Ugc3RlcHM6XHJcbiAgLy9cclxuICAvLyAgICAgSWYgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0aGUgY29udGV4dCBvYmplY3Qnc1xyXG4gIC8vICAgICBsZW5ndGgsIHRocm93IGFuIElOREVYX1NJWkVfRVJSIGV4Y2VwdGlvbiBhbmRcclxuICAvLyAgICAgdGVybWluYXRlIHRoZXNlIHN0ZXBzLlxyXG4gIC8vXHJcbiAgLy8gICAgIEluc2VydCBkYXRhIGludG8gdGhlIGNvbnRleHQgb2JqZWN0J3MgZGF0YSBhZnRlclxyXG4gIC8vICAgICBvZmZzZXQgVVRGLTE2IGNvZGUgdW5pdHMuXHJcbiAgLy9cclxuICBpbnNlcnREYXRhOiB7IHZhbHVlOiBmdW5jdGlvbiBpbnNlcnREYXRhKG9mZnNldCwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LCAwLCBkYXRhKTtcclxuICB9fSxcclxuXHJcblxyXG4gIC8vIHZvaWQgZGVsZXRlRGF0YSh1bnNpZ25lZCBsb25nIG9mZnNldCwgdW5zaWduZWQgbG9uZyBjb3VudCk7XHJcbiAgLy8gVGhlIGRlbGV0ZURhdGEob2Zmc2V0LCBjb3VudCkgbWV0aG9kIG11c3QgcnVuIHRoZXNlIHN0ZXBzOlxyXG4gIC8vXHJcbiAgLy8gICAgIElmIG9mZnNldCBpcyBncmVhdGVyIHRoYW4gdGhlIGNvbnRleHQgb2JqZWN0J3NcclxuICAvLyAgICAgbGVuZ3RoLCB0aHJvdyBhbiBJTkRFWF9TSVpFX0VSUiBleGNlcHRpb24gYW5kXHJcbiAgLy8gICAgIHRlcm1pbmF0ZSB0aGVzZSBzdGVwcy5cclxuICAvL1xyXG4gIC8vICAgICBJZiBvZmZzZXQrY291bnQgaXMgZ3JlYXRlciB0aGFuIHRoZSBjb250ZXh0XHJcbiAgLy8gICAgIG9iamVjdCdzIGxlbmd0aCB2YXIgY291bnQgYmUgbGVuZ3RoLW9mZnNldC5cclxuICAvL1xyXG4gIC8vICAgICBTdGFydGluZyBmcm9tIG9mZnNldCBVVEYtMTYgY29kZSB1bml0cyByZW1vdmUgY291bnRcclxuICAvLyAgICAgVVRGLTE2IGNvZGUgdW5pdHMgZnJvbSB0aGUgY29udGV4dCBvYmplY3QncyBkYXRhLlxyXG4gIGRlbGV0ZURhdGE6IHsgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZURhdGEob2Zmc2V0LCBjb3VudCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZURhdGEob2Zmc2V0LCBjb3VudCwgJycpO1xyXG4gIH19LFxyXG5cclxuXHJcbiAgLy8gdm9pZCByZXBsYWNlRGF0YSh1bnNpZ25lZCBsb25nIG9mZnNldCwgdW5zaWduZWQgbG9uZyBjb3VudCxcclxuICAvLyAgICAgICAgICBET01TdHJpbmcgZGF0YSk7XHJcbiAgLy9cclxuICAvLyBUaGUgcmVwbGFjZURhdGEob2Zmc2V0LCBjb3VudCwgZGF0YSkgbWV0aG9kIG11c3QgYWN0IGFzXHJcbiAgLy8gaWYgdGhlIGRlbGV0ZURhdGEoKSBtZXRob2QgaXMgaW52b2tlZCB3aXRoIG9mZnNldCBhbmRcclxuICAvLyBjb3VudCBhcyBhcmd1bWVudHMgZm9sbG93ZWQgYnkgdGhlIGluc2VydERhdGEoKSBtZXRob2RcclxuICAvLyB3aXRoIG9mZnNldCBhbmQgZGF0YSBhcyBhcmd1bWVudHMgYW5kIHJlLXRocm93IGFueVxyXG4gIC8vIGV4Y2VwdGlvbnMgdGhlc2UgbWV0aG9kcyBtaWdodCBoYXZlIHRocm93bi5cclxuICByZXBsYWNlRGF0YTogeyB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZURhdGEob2Zmc2V0LCBjb3VudCwgZGF0YSkge1xyXG4gICAgdmFyIGN1cnRleHQgPSB0aGlzLmRhdGEsIGxlbiA9IGN1cnRleHQubGVuZ3RoO1xyXG4gICAgLy8gQ29udmVydCBhcmd1bWVudHMgdG8gY29ycmVjdCBXZWJJREwgdHlwZVxyXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwO1xyXG4gICAgY291bnQgPSBjb3VudCA+Pj4gMDtcclxuICAgIGRhdGEgPSBTdHJpbmcoZGF0YSk7XHJcblxyXG4gICAgaWYgKG9mZnNldCA+IGxlbiB8fCBvZmZzZXQgPCAwKSB1dGlscy5JbmRleFNpemVFcnJvcigpO1xyXG5cclxuICAgIGlmIChvZmZzZXQrY291bnQgPiBsZW4pXHJcbiAgICAgIGNvdW50ID0gbGVuIC0gb2Zmc2V0O1xyXG5cclxuICAgIHZhciBwcmVmaXggPSBjdXJ0ZXh0LnN1YnN0cmluZygwLCBvZmZzZXQpLFxyXG4gICAgc3VmZml4ID0gY3VydGV4dC5zdWJzdHJpbmcob2Zmc2V0K2NvdW50KTtcclxuXHJcbiAgICB0aGlzLmRhdGEgPSBwcmVmaXggKyBkYXRhICsgc3VmZml4O1xyXG4gIH19LFxyXG5cclxuICAvLyBVdGlsaXR5IG1ldGhvZCB0aGF0IE5vZGUuaXNFcXVhbE5vZGUoKSBjYWxscyB0byB0ZXN0IFRleHQgYW5kXHJcbiAgLy8gQ29tbWVudCBub2RlcyBmb3IgZXF1YWxpdHkuICBJdCBpcyBva2F5IHRvIHB1dCBpdCBoZXJlLCBzaW5jZVxyXG4gIC8vIE5vZGUgd2lsbCBoYXZlIGFscmVhZHkgdmVyaWZpZWQgdGhhdCBub2RlVHlwZSBpcyBlcXVhbFxyXG4gIGlzRXF1YWw6IHsgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwobikge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGEgPT09IG4uX2RhdGE7XHJcbiAgfX0sXHJcblxyXG4gIGxlbmd0aDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aDsgfX1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsIENoaWxkTm9kZSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCBOb25Eb2N1bWVudFR5cGVDaGlsZE5vZGUpO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/ChildNode.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/ChildNode.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar LinkedList = __webpack_require__(/*! ./LinkedList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/LinkedList.js\");\r\n\r\nvar createDocumentFragmentFromArguments = function(document, args) {\r\n  var docFrag = document.createDocumentFragment();\r\n\r\n  for (var i=0; i<args.length; i++) {\r\n    var argItem = args[i];\r\n    var isNode = argItem instanceof Node;\r\n    docFrag.appendChild(isNode ? argItem :\r\n                        document.createTextNode(String(argItem)));\r\n  }\r\n\r\n  return docFrag;\r\n};\r\n\r\n// The ChildNode interface contains methods that are particular to `Node`\r\n// objects that can have a parent.  It is implemented by `Element`,\r\n// `DocumentType`, and `CharacterData` objects.\r\nvar ChildNode = {\r\n\r\n  // Inserts a set of Node or String objects in the children list of this\r\n  // ChildNode's parent, just after this ChildNode.  String objects are\r\n  // inserted as the equivalent Text nodes.\r\n  after: { value: function after() {\r\n    var argArr = Array.prototype.slice.call(arguments);\r\n    var parentNode = this.parentNode, nextSibling = this.nextSibling;\r\n    if (parentNode === null) { return; }\r\n    // Find \"viable next sibling\"; that is, next one not in argArr\r\n    while (nextSibling && argArr.some(function(v) { return v===nextSibling; }))\r\n      nextSibling = nextSibling.nextSibling;\r\n    // ok, parent and sibling are saved away since this node could itself\r\n    // appear in argArr and we're about to move argArr to a document fragment.\r\n    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\r\n\r\n    parentNode.insertBefore(docFrag, nextSibling);\r\n  }},\r\n\r\n  // Inserts a set of Node or String objects in the children list of this\r\n  // ChildNode's parent, just before this ChildNode.  String objects are\r\n  // inserted as the equivalent Text nodes.\r\n  before: { value: function before() {\r\n    var argArr = Array.prototype.slice.call(arguments);\r\n    var parentNode = this.parentNode, prevSibling = this.previousSibling;\r\n    if (parentNode === null) { return; }\r\n    // Find \"viable prev sibling\"; that is, prev one not in argArr\r\n    while (prevSibling && argArr.some(function(v) { return v===prevSibling; }))\r\n      prevSibling = prevSibling.previousSibling;\r\n    // ok, parent and sibling are saved away since this node could itself\r\n    // appear in argArr and we're about to move argArr to a document fragment.\r\n    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\r\n\r\n    var nextSibling =\r\n        prevSibling ? prevSibling.nextSibling : parentNode.firstChild;\r\n    parentNode.insertBefore(docFrag, nextSibling);\r\n  }},\r\n\r\n  // Remove this node from its parent\r\n  remove: { value: function remove() {\r\n    if (this.parentNode === null) return;\r\n\r\n    // Send mutation events if necessary\r\n    if (this.doc) {\r\n      this.doc._preremoveNodeIterators(this);\r\n      if (this.rooted) {\r\n        this.doc.mutateRemove(this);\r\n      }\r\n    }\r\n\r\n    // Remove this node from its parents array of children\r\n    // and update the structure id for all ancestors\r\n    this._remove();\r\n\r\n    // Forget this node's parent\r\n    this.parentNode = null;\r\n  }},\r\n\r\n  // Remove this node w/o uprooting or sending mutation events\r\n  // (But do update the structure id for all ancestors)\r\n  _remove: { value: function _remove() {\r\n    var parent = this.parentNode;\r\n    if (parent === null) return;\r\n    if (parent._childNodes) {\r\n      parent._childNodes.splice(this.index, 1);\r\n    } else if (parent._firstChild === this) {\r\n      if (this._nextSibling === this) {\r\n        parent._firstChild = null;\r\n      } else {\r\n        parent._firstChild = this._nextSibling;\r\n      }\r\n    }\r\n    LinkedList.remove(this);\r\n    parent.modify();\r\n  }},\r\n\r\n  // Replace this node with the nodes or strings provided as arguments.\r\n  replaceWith: { value: function replaceWith() {\r\n    var argArr = Array.prototype.slice.call(arguments);\r\n    var parentNode = this.parentNode, nextSibling = this.nextSibling;\r\n    if (parentNode === null) { return; }\r\n    // Find \"viable next sibling\"; that is, next one not in argArr\r\n    while (nextSibling && argArr.some(function(v) { return v===nextSibling; }))\r\n      nextSibling = nextSibling.nextSibling;\r\n    // ok, parent and sibling are saved away since this node could itself\r\n    // appear in argArr and we're about to move argArr to a document fragment.\r\n    var docFrag = createDocumentFragmentFromArguments(this.doc, argArr);\r\n    if (this.parentNode === parentNode) {\r\n      parentNode.replaceChild(docFrag, this);\r\n    } else {\r\n      // `this` was inserted into docFrag\r\n      parentNode.insertBefore(docFrag, nextSibling);\r\n    }\r\n  }},\r\n\r\n};\r\n\r\nmodule.exports = ChildNode;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9DaGlsZE5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixtQ0FBbUM7QUFDbkMsb0RBQW9ELHlCQUF5QjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixtQ0FBbUM7QUFDbkMsb0RBQW9ELHlCQUF5QjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLG9EQUFvRCx5QkFBeUI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL0NoaWxkTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcbnZhciBMaW5rZWRMaXN0ID0gcmVxdWlyZSgnLi9MaW5rZWRMaXN0Jyk7XHJcblxyXG52YXIgY3JlYXRlRG9jdW1lbnRGcmFnbWVudEZyb21Bcmd1bWVudHMgPSBmdW5jdGlvbihkb2N1bWVudCwgYXJncykge1xyXG4gIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICBmb3IgKHZhciBpPTA7IGk8YXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGFyZ0l0ZW0gPSBhcmdzW2ldO1xyXG4gICAgdmFyIGlzTm9kZSA9IGFyZ0l0ZW0gaW5zdGFuY2VvZiBOb2RlO1xyXG4gICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBhcmdJdGVtIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGFyZ0l0ZW0pKSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZG9jRnJhZztcclxufTtcclxuXHJcbi8vIFRoZSBDaGlsZE5vZGUgaW50ZXJmYWNlIGNvbnRhaW5zIG1ldGhvZHMgdGhhdCBhcmUgcGFydGljdWxhciB0byBgTm9kZWBcclxuLy8gb2JqZWN0cyB0aGF0IGNhbiBoYXZlIGEgcGFyZW50LiAgSXQgaXMgaW1wbGVtZW50ZWQgYnkgYEVsZW1lbnRgLFxyXG4vLyBgRG9jdW1lbnRUeXBlYCwgYW5kIGBDaGFyYWN0ZXJEYXRhYCBvYmplY3RzLlxyXG52YXIgQ2hpbGROb2RlID0ge1xyXG5cclxuICAvLyBJbnNlcnRzIGEgc2V0IG9mIE5vZGUgb3IgU3RyaW5nIG9iamVjdHMgaW4gdGhlIGNoaWxkcmVuIGxpc3Qgb2YgdGhpc1xyXG4gIC8vIENoaWxkTm9kZSdzIHBhcmVudCwganVzdCBhZnRlciB0aGlzIENoaWxkTm9kZS4gIFN0cmluZyBvYmplY3RzIGFyZVxyXG4gIC8vIGluc2VydGVkIGFzIHRoZSBlcXVpdmFsZW50IFRleHQgbm9kZXMuXHJcbiAgYWZ0ZXI6IHsgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyKCkge1xyXG4gICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMucGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nO1xyXG4gICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHsgcmV0dXJuOyB9XHJcbiAgICAvLyBGaW5kIFwidmlhYmxlIG5leHQgc2libGluZ1wiOyB0aGF0IGlzLCBuZXh0IG9uZSBub3QgaW4gYXJnQXJyXHJcbiAgICB3aGlsZSAobmV4dFNpYmxpbmcgJiYgYXJnQXJyLnNvbWUoZnVuY3Rpb24odikgeyByZXR1cm4gdj09PW5leHRTaWJsaW5nOyB9KSlcclxuICAgICAgbmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5uZXh0U2libGluZztcclxuICAgIC8vIG9rLCBwYXJlbnQgYW5kIHNpYmxpbmcgYXJlIHNhdmVkIGF3YXkgc2luY2UgdGhpcyBub2RlIGNvdWxkIGl0c2VsZlxyXG4gICAgLy8gYXBwZWFyIGluIGFyZ0FyciBhbmQgd2UncmUgYWJvdXQgdG8gbW92ZSBhcmdBcnIgdG8gYSBkb2N1bWVudCBmcmFnbWVudC5cclxuICAgIHZhciBkb2NGcmFnID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudEZyb21Bcmd1bWVudHModGhpcy5kb2MsIGFyZ0Fycik7XHJcblxyXG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZG9jRnJhZywgbmV4dFNpYmxpbmcpO1xyXG4gIH19LFxyXG5cclxuICAvLyBJbnNlcnRzIGEgc2V0IG9mIE5vZGUgb3IgU3RyaW5nIG9iamVjdHMgaW4gdGhlIGNoaWxkcmVuIGxpc3Qgb2YgdGhpc1xyXG4gIC8vIENoaWxkTm9kZSdzIHBhcmVudCwganVzdCBiZWZvcmUgdGhpcyBDaGlsZE5vZGUuICBTdHJpbmcgb2JqZWN0cyBhcmVcclxuICAvLyBpbnNlcnRlZCBhcyB0aGUgZXF1aXZhbGVudCBUZXh0IG5vZGVzLlxyXG4gIGJlZm9yZTogeyB2YWx1ZTogZnVuY3Rpb24gYmVmb3JlKCkge1xyXG4gICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XHJcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMucGFyZW50Tm9kZSwgcHJldlNpYmxpbmcgPSB0aGlzLnByZXZpb3VzU2libGluZztcclxuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7IHJldHVybjsgfVxyXG4gICAgLy8gRmluZCBcInZpYWJsZSBwcmV2IHNpYmxpbmdcIjsgdGhhdCBpcywgcHJldiBvbmUgbm90IGluIGFyZ0FyclxyXG4gICAgd2hpbGUgKHByZXZTaWJsaW5nICYmIGFyZ0Fyci5zb21lKGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHY9PT1wcmV2U2libGluZzsgfSkpXHJcbiAgICAgIHByZXZTaWJsaW5nID0gcHJldlNpYmxpbmcucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgLy8gb2ssIHBhcmVudCBhbmQgc2libGluZyBhcmUgc2F2ZWQgYXdheSBzaW5jZSB0aGlzIG5vZGUgY291bGQgaXRzZWxmXHJcbiAgICAvLyBhcHBlYXIgaW4gYXJnQXJyIGFuZCB3ZSdyZSBhYm91dCB0byBtb3ZlIGFyZ0FyciB0byBhIGRvY3VtZW50IGZyYWdtZW50LlxyXG4gICAgdmFyIGRvY0ZyYWcgPSBjcmVhdGVEb2N1bWVudEZyYWdtZW50RnJvbUFyZ3VtZW50cyh0aGlzLmRvYywgYXJnQXJyKTtcclxuXHJcbiAgICB2YXIgbmV4dFNpYmxpbmcgPVxyXG4gICAgICAgIHByZXZTaWJsaW5nID8gcHJldlNpYmxpbmcubmV4dFNpYmxpbmcgOiBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2NGcmFnLCBuZXh0U2libGluZyk7XHJcbiAgfX0sXHJcblxyXG4gIC8vIFJlbW92ZSB0aGlzIG5vZGUgZnJvbSBpdHMgcGFyZW50XHJcbiAgcmVtb3ZlOiB7IHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcbiAgICBpZiAodGhpcy5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgLy8gU2VuZCBtdXRhdGlvbiBldmVudHMgaWYgbmVjZXNzYXJ5XHJcbiAgICBpZiAodGhpcy5kb2MpIHtcclxuICAgICAgdGhpcy5kb2MuX3ByZXJlbW92ZU5vZGVJdGVyYXRvcnModGhpcyk7XHJcbiAgICAgIGlmICh0aGlzLnJvb3RlZCkge1xyXG4gICAgICAgIHRoaXMuZG9jLm11dGF0ZVJlbW92ZSh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0aGlzIG5vZGUgZnJvbSBpdHMgcGFyZW50cyBhcnJheSBvZiBjaGlsZHJlblxyXG4gICAgLy8gYW5kIHVwZGF0ZSB0aGUgc3RydWN0dXJlIGlkIGZvciBhbGwgYW5jZXN0b3JzXHJcbiAgICB0aGlzLl9yZW1vdmUoKTtcclxuXHJcbiAgICAvLyBGb3JnZXQgdGhpcyBub2RlJ3MgcGFyZW50XHJcbiAgICB0aGlzLnBhcmVudE5vZGUgPSBudWxsO1xyXG4gIH19LFxyXG5cclxuICAvLyBSZW1vdmUgdGhpcyBub2RlIHcvbyB1cHJvb3Rpbmcgb3Igc2VuZGluZyBtdXRhdGlvbiBldmVudHNcclxuICAvLyAoQnV0IGRvIHVwZGF0ZSB0aGUgc3RydWN0dXJlIGlkIGZvciBhbGwgYW5jZXN0b3JzKVxyXG4gIF9yZW1vdmU6IHsgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmUoKSB7XHJcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xyXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgaWYgKHBhcmVudC5fY2hpbGROb2Rlcykge1xyXG4gICAgICBwYXJlbnQuX2NoaWxkTm9kZXMuc3BsaWNlKHRoaXMuaW5kZXgsIDEpO1xyXG4gICAgfSBlbHNlIGlmIChwYXJlbnQuX2ZpcnN0Q2hpbGQgPT09IHRoaXMpIHtcclxuICAgICAgaWYgKHRoaXMuX25leHRTaWJsaW5nID09PSB0aGlzKSB7XHJcbiAgICAgICAgcGFyZW50Ll9maXJzdENoaWxkID0gbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJlbnQuX2ZpcnN0Q2hpbGQgPSB0aGlzLl9uZXh0U2libGluZztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgTGlua2VkTGlzdC5yZW1vdmUodGhpcyk7XHJcbiAgICBwYXJlbnQubW9kaWZ5KCk7XHJcbiAgfX0sXHJcblxyXG4gIC8vIFJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIG5vZGVzIG9yIHN0cmluZ3MgcHJvdmlkZWQgYXMgYXJndW1lbnRzLlxyXG4gIHJlcGxhY2VXaXRoOiB7IHZhbHVlOiBmdW5jdGlvbiByZXBsYWNlV2l0aCgpIHtcclxuICAgIHZhciBhcmdBcnIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLnBhcmVudE5vZGUsIG5leHRTaWJsaW5nID0gdGhpcy5uZXh0U2libGluZztcclxuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7IHJldHVybjsgfVxyXG4gICAgLy8gRmluZCBcInZpYWJsZSBuZXh0IHNpYmxpbmdcIjsgdGhhdCBpcywgbmV4dCBvbmUgbm90IGluIGFyZ0FyclxyXG4gICAgd2hpbGUgKG5leHRTaWJsaW5nICYmIGFyZ0Fyci5zb21lKGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHY9PT1uZXh0U2libGluZzsgfSkpXHJcbiAgICAgIG5leHRTaWJsaW5nID0gbmV4dFNpYmxpbmcubmV4dFNpYmxpbmc7XHJcbiAgICAvLyBvaywgcGFyZW50IGFuZCBzaWJsaW5nIGFyZSBzYXZlZCBhd2F5IHNpbmNlIHRoaXMgbm9kZSBjb3VsZCBpdHNlbGZcclxuICAgIC8vIGFwcGVhciBpbiBhcmdBcnIgYW5kIHdlJ3JlIGFib3V0IHRvIG1vdmUgYXJnQXJyIHRvIGEgZG9jdW1lbnQgZnJhZ21lbnQuXHJcbiAgICB2YXIgZG9jRnJhZyA9IGNyZWF0ZURvY3VtZW50RnJhZ21lbnRGcm9tQXJndW1lbnRzKHRoaXMuZG9jLCBhcmdBcnIpO1xyXG4gICAgaWYgKHRoaXMucGFyZW50Tm9kZSA9PT0gcGFyZW50Tm9kZSkge1xyXG4gICAgICBwYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkb2NGcmFnLCB0aGlzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGB0aGlzYCB3YXMgaW5zZXJ0ZWQgaW50byBkb2NGcmFnXHJcbiAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRvY0ZyYWcsIG5leHRTaWJsaW5nKTtcclxuICAgIH1cclxuICB9fSxcclxuXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IENoaWxkTm9kZTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/ChildNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Comment.js":
/*!********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Comment.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Comment;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js\");\r\n\r\nfunction Comment(doc, data) {\r\n  CharacterData.call(this);\r\n  this.nodeType = Node.COMMENT_NODE;\r\n  this.ownerDocument = doc;\r\n  this._data = data;\r\n}\r\n\r\nvar nodeValue = {\r\n  get: function() { return this._data; },\r\n  set: function(v) {\r\n    if (v === null || v === undefined) { v = ''; } else { v = String(v); }\r\n    this._data = v;\r\n    if (this.rooted)\r\n      this.ownerDocument.mutateValue(this);\r\n  }\r\n};\r\n\r\nComment.prototype = Object.create(CharacterData.prototype, {\r\n  nodeName: { value: '#comment' },\r\n  nodeValue: nodeValue,\r\n  textContent: nodeValue,\r\n  innerText: nodeValue,\r\n  data: {\r\n    get: nodeValue.get,\r\n    set: function(v) {\r\n      nodeValue.set.call(this, v===null ? '' : String(v));\r\n    },\r\n  },\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n    return new Comment(this.ownerDocument, this._data);\r\n  }},\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Db21tZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBLHlDQUF5QyxVQUFVLE9BQU87QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLElBQUk7QUFDSixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvQ29tbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBDb21tZW50O1xyXG5cclxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcclxudmFyIENoYXJhY3RlckRhdGEgPSByZXF1aXJlKCcuL0NoYXJhY3RlckRhdGEnKTtcclxuXHJcbmZ1bmN0aW9uIENvbW1lbnQoZG9jLCBkYXRhKSB7XHJcbiAgQ2hhcmFjdGVyRGF0YS5jYWxsKHRoaXMpO1xyXG4gIHRoaXMubm9kZVR5cGUgPSBOb2RlLkNPTU1FTlRfTk9ERTtcclxuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBkb2M7XHJcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbn1cclxuXHJcbnZhciBub2RlVmFsdWUgPSB7XHJcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2RhdGE7IH0sXHJcbiAgc2V0OiBmdW5jdGlvbih2KSB7XHJcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHsgdiA9ICcnOyB9IGVsc2UgeyB2ID0gU3RyaW5nKHYpOyB9XHJcbiAgICB0aGlzLl9kYXRhID0gdjtcclxuICAgIGlmICh0aGlzLnJvb3RlZClcclxuICAgICAgdGhpcy5vd25lckRvY3VtZW50Lm11dGF0ZVZhbHVlKHRoaXMpO1xyXG4gIH1cclxufTtcclxuXHJcbkNvbW1lbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwge1xyXG4gIG5vZGVOYW1lOiB7IHZhbHVlOiAnI2NvbW1lbnQnIH0sXHJcbiAgbm9kZVZhbHVlOiBub2RlVmFsdWUsXHJcbiAgdGV4dENvbnRlbnQ6IG5vZGVWYWx1ZSxcclxuICBpbm5lclRleHQ6IG5vZGVWYWx1ZSxcclxuICBkYXRhOiB7XHJcbiAgICBnZXQ6IG5vZGVWYWx1ZS5nZXQsXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcclxuICAgICAgbm9kZVZhbHVlLnNldC5jYWxsKHRoaXMsIHY9PT1udWxsID8gJycgOiBTdHJpbmcodikpO1xyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICAvLyBVdGlsaXR5IG1ldGhvZHNcclxuICBjbG9uZTogeyB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7XHJcbiAgICByZXR1cm4gbmV3IENvbW1lbnQodGhpcy5vd25lckRvY3VtZW50LCB0aGlzLl9kYXRhKTtcclxuICB9fSxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Comment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/ContainerNode.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/ContainerNode.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = ContainerNode;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\");\r\n\r\n// This class defines common functionality for node subtypes that\r\n// can have children\r\n\r\nfunction ContainerNode() {\r\n  Node.call(this);\r\n  this._firstChild = this._childNodes = null;\r\n}\r\n\r\n// Primary representation is a circular linked list of siblings\r\nContainerNode.prototype = Object.create(Node.prototype, {\r\n\r\n  hasChildNodes: { value: function() {\r\n    if (this._childNodes) {\r\n      return this._childNodes.length > 0;\r\n    }\r\n    return this._firstChild !== null;\r\n  }},\r\n\r\n  childNodes: { get: function() {\r\n    this._ensureChildNodes();\r\n    return this._childNodes;\r\n  }},\r\n\r\n  firstChild: { get: function() {\r\n    if (this._childNodes) {\r\n      return this._childNodes.length === 0 ? null : this._childNodes[0];\r\n    }\r\n    return this._firstChild;\r\n  }},\r\n\r\n  lastChild: { get: function() {\r\n    var kids = this._childNodes, first;\r\n    if (kids) {\r\n      return kids.length === 0 ? null: kids[kids.length-1];\r\n    }\r\n    first = this._firstChild;\r\n    if (first === null) { return null; }\r\n    return first._previousSibling; // circular linked list\r\n  }},\r\n\r\n  _ensureChildNodes: { value: function() {\r\n    if (this._childNodes) { return; }\r\n    var first = this._firstChild,\r\n        kid = first,\r\n        childNodes = this._childNodes = new NodeList();\r\n    if (first) do {\r\n      childNodes.push(kid);\r\n      kid = kid._nextSibling;\r\n    } while (kid !== first); // circular linked list\r\n    this._firstChild = null; // free memory\r\n  }},\r\n\r\n  // Remove all of this node's children.  This is a minor\r\n  // optimization that only calls modify() once.\r\n  removeChildren: { value: function removeChildren() {\r\n    var root = this.rooted ? this.ownerDocument : null,\r\n        next = this.firstChild,\r\n        kid;\r\n    while (next !== null) {\r\n      kid = next;\r\n      next = kid.nextSibling;\r\n\r\n      if (root) root.mutateRemove(kid);\r\n      kid.parentNode = null;\r\n    }\r\n    if (this._childNodes) {\r\n      this._childNodes.length = 0;\r\n    } else {\r\n      this._firstChild = null;\r\n    }\r\n    this.modify(); // Update last modified type once only\r\n  }},\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Db250YWluZXJOb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixlQUFlLG1CQUFPLENBQUMsMkVBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixtQ0FBbUM7QUFDbkMsSUFBSTtBQUNKO0FBQ0EsdUJBQXVCO0FBQ3ZCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHVCQUF1QjtBQUM3Qiw2QkFBNkI7QUFDN0IsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixJQUFJO0FBQ0o7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvQ29udGFpbmVyTm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBDb250YWluZXJOb2RlO1xyXG5cclxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcclxudmFyIE5vZGVMaXN0ID0gcmVxdWlyZSgnLi9Ob2RlTGlzdCcpO1xyXG5cclxuLy8gVGhpcyBjbGFzcyBkZWZpbmVzIGNvbW1vbiBmdW5jdGlvbmFsaXR5IGZvciBub2RlIHN1YnR5cGVzIHRoYXRcclxuLy8gY2FuIGhhdmUgY2hpbGRyZW5cclxuXHJcbmZ1bmN0aW9uIENvbnRhaW5lck5vZGUoKSB7XHJcbiAgTm9kZS5jYWxsKHRoaXMpO1xyXG4gIHRoaXMuX2ZpcnN0Q2hpbGQgPSB0aGlzLl9jaGlsZE5vZGVzID0gbnVsbDtcclxufVxyXG5cclxuLy8gUHJpbWFyeSByZXByZXNlbnRhdGlvbiBpcyBhIGNpcmN1bGFyIGxpbmtlZCBsaXN0IG9mIHNpYmxpbmdzXHJcbkNvbnRhaW5lck5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOb2RlLnByb3RvdHlwZSwge1xyXG5cclxuICBoYXNDaGlsZE5vZGVzOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLl9jaGlsZE5vZGVzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fZmlyc3RDaGlsZCAhPT0gbnVsbDtcclxuICB9fSxcclxuXHJcbiAgY2hpbGROb2RlczogeyBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5fZW5zdXJlQ2hpbGROb2RlcygpO1xyXG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXM7XHJcbiAgfX0sXHJcblxyXG4gIGZpcnN0Q2hpbGQ6IHsgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLl9jaGlsZE5vZGVzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiB0aGlzLl9jaGlsZE5vZGVzWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2ZpcnN0Q2hpbGQ7XHJcbiAgfX0sXHJcblxyXG4gIGxhc3RDaGlsZDogeyBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGtpZHMgPSB0aGlzLl9jaGlsZE5vZGVzLCBmaXJzdDtcclxuICAgIGlmIChraWRzKSB7XHJcbiAgICAgIHJldHVybiBraWRzLmxlbmd0aCA9PT0gMCA/IG51bGw6IGtpZHNba2lkcy5sZW5ndGgtMV07XHJcbiAgICB9XHJcbiAgICBmaXJzdCA9IHRoaXMuX2ZpcnN0Q2hpbGQ7XHJcbiAgICBpZiAoZmlyc3QgPT09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cclxuICAgIHJldHVybiBmaXJzdC5fcHJldmlvdXNTaWJsaW5nOyAvLyBjaXJjdWxhciBsaW5rZWQgbGlzdFxyXG4gIH19LFxyXG5cclxuICBfZW5zdXJlQ2hpbGROb2RlczogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodGhpcy5fY2hpbGROb2RlcykgeyByZXR1cm47IH1cclxuICAgIHZhciBmaXJzdCA9IHRoaXMuX2ZpcnN0Q2hpbGQsXHJcbiAgICAgICAga2lkID0gZmlyc3QsXHJcbiAgICAgICAgY2hpbGROb2RlcyA9IHRoaXMuX2NoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcclxuICAgIGlmIChmaXJzdCkgZG8ge1xyXG4gICAgICBjaGlsZE5vZGVzLnB1c2goa2lkKTtcclxuICAgICAga2lkID0ga2lkLl9uZXh0U2libGluZztcclxuICAgIH0gd2hpbGUgKGtpZCAhPT0gZmlyc3QpOyAvLyBjaXJjdWxhciBsaW5rZWQgbGlzdFxyXG4gICAgdGhpcy5fZmlyc3RDaGlsZCA9IG51bGw7IC8vIGZyZWUgbWVtb3J5XHJcbiAgfX0sXHJcblxyXG4gIC8vIFJlbW92ZSBhbGwgb2YgdGhpcyBub2RlJ3MgY2hpbGRyZW4uICBUaGlzIGlzIGEgbWlub3JcclxuICAvLyBvcHRpbWl6YXRpb24gdGhhdCBvbmx5IGNhbGxzIG1vZGlmeSgpIG9uY2UuXHJcbiAgcmVtb3ZlQ2hpbGRyZW46IHsgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKCkge1xyXG4gICAgdmFyIHJvb3QgPSB0aGlzLnJvb3RlZCA/IHRoaXMub3duZXJEb2N1bWVudCA6IG51bGwsXHJcbiAgICAgICAgbmV4dCA9IHRoaXMuZmlyc3RDaGlsZCxcclxuICAgICAgICBraWQ7XHJcbiAgICB3aGlsZSAobmV4dCAhPT0gbnVsbCkge1xyXG4gICAgICBraWQgPSBuZXh0O1xyXG4gICAgICBuZXh0ID0ga2lkLm5leHRTaWJsaW5nO1xyXG5cclxuICAgICAgaWYgKHJvb3QpIHJvb3QubXV0YXRlUmVtb3ZlKGtpZCk7XHJcbiAgICAgIGtpZC5wYXJlbnROb2RlID0gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLl9jaGlsZE5vZGVzKSB7XHJcbiAgICAgIHRoaXMuX2NoaWxkTm9kZXMubGVuZ3RoID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2ZpcnN0Q2hpbGQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tb2RpZnkoKTsgLy8gVXBkYXRlIGxhc3QgbW9kaWZpZWQgdHlwZSBvbmNlIG9ubHlcclxuICB9fSxcclxuXHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/ContainerNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/CustomEvent.js":
/*!************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/CustomEvent.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = CustomEvent;\r\n\r\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\");\r\n\r\nfunction CustomEvent(type, dictionary) {\r\n  // Just use the superclass constructor to initialize\r\n  Event.call(this, type, dictionary);\r\n}\r\nCustomEvent.prototype = Object.create(Event.prototype, {\r\n  constructor: { value: CustomEvent }\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9DdXN0b21FdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxZQUFZLG1CQUFPLENBQUMscUVBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9DdXN0b21FdmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBDdXN0b21FdmVudDtcclxuXHJcbnZhciBFdmVudCA9IHJlcXVpcmUoJy4vRXZlbnQnKTtcclxuXHJcbmZ1bmN0aW9uIEN1c3RvbUV2ZW50KHR5cGUsIGRpY3Rpb25hcnkpIHtcclxuICAvLyBKdXN0IHVzZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvciB0byBpbml0aWFsaXplXHJcbiAgRXZlbnQuY2FsbCh0aGlzLCB0eXBlLCBkaWN0aW9uYXJ5KTtcclxufVxyXG5DdXN0b21FdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50LnByb3RvdHlwZSwge1xyXG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBDdXN0b21FdmVudCB9XHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/CustomEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/DOMException.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/DOMException.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = DOMException;\r\n\r\nvar INDEX_SIZE_ERR = 1;\r\nvar HIERARCHY_REQUEST_ERR = 3;\r\nvar WRONG_DOCUMENT_ERR = 4;\r\nvar INVALID_CHARACTER_ERR = 5;\r\nvar NO_MODIFICATION_ALLOWED_ERR = 7;\r\nvar NOT_FOUND_ERR = 8;\r\nvar NOT_SUPPORTED_ERR = 9;\r\nvar INVALID_STATE_ERR = 11;\r\nvar SYNTAX_ERR = 12;\r\nvar INVALID_MODIFICATION_ERR = 13;\r\nvar NAMESPACE_ERR = 14;\r\nvar INVALID_ACCESS_ERR = 15;\r\nvar TYPE_MISMATCH_ERR = 17;\r\nvar SECURITY_ERR = 18;\r\nvar NETWORK_ERR = 19;\r\nvar ABORT_ERR = 20;\r\nvar URL_MISMATCH_ERR = 21;\r\nvar QUOTA_EXCEEDED_ERR = 22;\r\nvar TIMEOUT_ERR = 23;\r\nvar INVALID_NODE_TYPE_ERR = 24;\r\nvar DATA_CLONE_ERR = 25;\r\n\r\n// Code to name\r\nvar names = [\r\n  null,  // No error with code 0\r\n  'INDEX_SIZE_ERR',\r\n  null, // historical\r\n  'HIERARCHY_REQUEST_ERR',\r\n  'WRONG_DOCUMENT_ERR',\r\n  'INVALID_CHARACTER_ERR',\r\n  null, // historical\r\n  'NO_MODIFICATION_ALLOWED_ERR',\r\n  'NOT_FOUND_ERR',\r\n  'NOT_SUPPORTED_ERR',\r\n  'INUSE_ATTRIBUTE_ERR', // historical\r\n  'INVALID_STATE_ERR',\r\n  'SYNTAX_ERR',\r\n  'INVALID_MODIFICATION_ERR',\r\n  'NAMESPACE_ERR',\r\n  'INVALID_ACCESS_ERR',\r\n  null, // historical\r\n  'TYPE_MISMATCH_ERR',\r\n  'SECURITY_ERR',\r\n  'NETWORK_ERR',\r\n  'ABORT_ERR',\r\n  'URL_MISMATCH_ERR',\r\n  'QUOTA_EXCEEDED_ERR',\r\n  'TIMEOUT_ERR',\r\n  'INVALID_NODE_TYPE_ERR',\r\n  'DATA_CLONE_ERR',\r\n];\r\n\r\n// Code to message\r\n// These strings are from the 13 May 2011 Editor's Draft of DOM Core.\r\n// http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html\r\n// Copyright © 2011 W3C® (MIT, ERCIM, Keio), All Rights Reserved.\r\n// Used under the terms of the W3C Document License:\r\n// http://www.w3.org/Consortium/Legal/2002/copyright-documents-20021231\r\nvar messages = [\r\n  null,  // No error with code 0\r\n  'INDEX_SIZE_ERR (1): the index is not in the allowed range',\r\n  null,\r\n  'HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model',\r\n  'WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required',\r\n  'INVALID_CHARACTER_ERR (5): the string contains invalid characters',\r\n  null,\r\n  'NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified',\r\n  'NOT_FOUND_ERR (8): the object can not be found here',\r\n  'NOT_SUPPORTED_ERR (9): this operation is not supported',\r\n  'INUSE_ATTRIBUTE_ERR (10): setAttributeNode called on owned Attribute',\r\n  'INVALID_STATE_ERR (11): the object is in an invalid state',\r\n  'SYNTAX_ERR (12): the string did not match the expected pattern',\r\n  'INVALID_MODIFICATION_ERR (13): the object can not be modified in this way',\r\n  'NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML',\r\n  'INVALID_ACCESS_ERR (15): the object does not support the operation or argument',\r\n  null,\r\n  'TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type',\r\n  'SECURITY_ERR (18): the operation is insecure',\r\n  'NETWORK_ERR (19): a network error occurred',\r\n  'ABORT_ERR (20): the user aborted an operation',\r\n  'URL_MISMATCH_ERR (21): the given URL does not match another URL',\r\n  'QUOTA_EXCEEDED_ERR (22): the quota has been exceeded',\r\n  'TIMEOUT_ERR (23): a timeout occurred',\r\n  'INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation',\r\n  'DATA_CLONE_ERR (25): the object can not be cloned.'\r\n];\r\n\r\n// Name to code\r\nvar constants = {\r\n  INDEX_SIZE_ERR: INDEX_SIZE_ERR,\r\n  DOMSTRING_SIZE_ERR: 2, // historical\r\n  HIERARCHY_REQUEST_ERR: HIERARCHY_REQUEST_ERR,\r\n  WRONG_DOCUMENT_ERR: WRONG_DOCUMENT_ERR,\r\n  INVALID_CHARACTER_ERR: INVALID_CHARACTER_ERR,\r\n  NO_DATA_ALLOWED_ERR: 6, // historical\r\n  NO_MODIFICATION_ALLOWED_ERR: NO_MODIFICATION_ALLOWED_ERR,\r\n  NOT_FOUND_ERR: NOT_FOUND_ERR,\r\n  NOT_SUPPORTED_ERR: NOT_SUPPORTED_ERR,\r\n  INUSE_ATTRIBUTE_ERR: 10, // historical\r\n  INVALID_STATE_ERR: INVALID_STATE_ERR,\r\n  SYNTAX_ERR: SYNTAX_ERR,\r\n  INVALID_MODIFICATION_ERR: INVALID_MODIFICATION_ERR,\r\n  NAMESPACE_ERR: NAMESPACE_ERR,\r\n  INVALID_ACCESS_ERR: INVALID_ACCESS_ERR,\r\n  VALIDATION_ERR: 16, // historical\r\n  TYPE_MISMATCH_ERR: TYPE_MISMATCH_ERR,\r\n  SECURITY_ERR: SECURITY_ERR,\r\n  NETWORK_ERR: NETWORK_ERR,\r\n  ABORT_ERR: ABORT_ERR,\r\n  URL_MISMATCH_ERR: URL_MISMATCH_ERR,\r\n  QUOTA_EXCEEDED_ERR: QUOTA_EXCEEDED_ERR,\r\n  TIMEOUT_ERR: TIMEOUT_ERR,\r\n  INVALID_NODE_TYPE_ERR: INVALID_NODE_TYPE_ERR,\r\n  DATA_CLONE_ERR: DATA_CLONE_ERR\r\n};\r\n\r\nfunction DOMException(code) {\r\n  Error.call(this);\r\n  Error.captureStackTrace(this, this.constructor);\r\n  this.code = code;\r\n  this.message = messages[code];\r\n  this.name = names[code];\r\n}\r\nDOMException.prototype.__proto__ = Error.prototype;\r\n\r\n// Initialize the constants on DOMException and DOMException.prototype\r\nfor(var c in constants) {\r\n  var v = { value: constants[c] };\r\n  Object.defineProperty(DOMException, c, v);\r\n  Object.defineProperty(DOMException.prototype, c, v);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/DOMException.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/DOMImplementation.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = DOMImplementation;\r\n\r\nvar Document = __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Document.js\");\r\nvar DocumentType = __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentType.js\");\r\nvar HTMLParser = __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/HTMLParser.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/xmlnames.js\");\r\n\r\n// Each document must have its own instance of the domimplementation object\r\nfunction DOMImplementation(contextObject) {\r\n  this.contextObject = contextObject;\r\n}\r\n\r\n\r\n// Feature/version pairs that DOMImplementation.hasFeature() returns\r\n// true for.  It returns false for anything else.\r\nvar supportedFeatures = {\r\n  'xml': { '': true, '1.0': true, '2.0': true },   // DOM Core\r\n  'core': { '': true, '2.0': true },               // DOM Core\r\n  'html': { '': true, '1.0': true, '2.0': true} ,  // HTML\r\n  'xhtml': { '': true, '1.0': true, '2.0': true} , // HTML\r\n};\r\n\r\nDOMImplementation.prototype = {\r\n  hasFeature: function hasFeature(feature, version) {\r\n    var f = supportedFeatures[(feature || '').toLowerCase()];\r\n    return (f && f[version || '']) || false;\r\n  },\r\n\r\n  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {\r\n    if (!xml.isValidQName(qualifiedName)) utils.InvalidCharacterError();\r\n\r\n    return new DocumentType(this.contextObject, qualifiedName, publicId, systemId);\r\n  },\r\n\r\n  createDocument: function createDocument(namespace, qualifiedName, doctype) {\r\n    //\r\n    // Note that the current DOMCore spec makes it impossible to\r\n    // create an HTML document with this function, even if the\r\n    // namespace and doctype are propertly set.  See this thread:\r\n    // http://lists.w3.org/Archives/Public/www-dom/2011AprJun/0132.html\r\n    //\r\n    var d = new Document(false, null);\r\n    var e;\r\n\r\n    if (qualifiedName)\r\n      e = d.createElementNS(namespace, qualifiedName);\r\n    else\r\n      e = null;\r\n\r\n    if (doctype) {\r\n      d.appendChild(doctype);\r\n    }\r\n\r\n    if (e) d.appendChild(e);\r\n    if (namespace === utils.NAMESPACE.HTML) {\r\n      d._contentType = 'application/xhtml+xml';\r\n    } else if (namespace === utils.NAMESPACE.SVG) {\r\n      d._contentType = 'image/svg+xml';\r\n    } else {\r\n      d._contentType = 'application/xml';\r\n    }\r\n\r\n    return d;\r\n  },\r\n\r\n  createHTMLDocument: function createHTMLDocument(titleText) {\r\n    var d = new Document(true, null);\r\n    d.appendChild(new DocumentType(d, 'html'));\r\n    var html = d.createElement('html');\r\n    d.appendChild(html);\r\n    var head = d.createElement('head');\r\n    html.appendChild(head);\r\n    if (titleText !== undefined) {\r\n      var title = d.createElement('title');\r\n      head.appendChild(title);\r\n      title.appendChild(d.createTextNode(titleText));\r\n    }\r\n    html.appendChild(d.createElement('body'));\r\n    d.modclock = 1; // Start tracking modifications\r\n    return d;\r\n  },\r\n\r\n  mozSetOutputMutationHandler: function(doc, handler) {\r\n    doc.mutationHandler = handler;\r\n  },\r\n\r\n  mozGetInputMutationHandler: function(doc) {\r\n    utils.nyi();\r\n  },\r\n\r\n  mozHTMLParser: HTMLParser,\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9ET01JbXBsZW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsMkVBQVk7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsbUZBQWdCO0FBQzNDLGlCQUFpQixtQkFBTyxDQUFDLCtFQUFjO0FBQ3ZDLFlBQVksbUJBQU8sQ0FBQyxxRUFBUztBQUM3QixVQUFVLG1CQUFPLENBQUMsMkVBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9DQUFvQztBQUMvQyxZQUFZLHVCQUF1QjtBQUNuQyxZQUFZLG9DQUFvQztBQUNoRCxhQUFhLG9DQUFvQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9ET01JbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBET01JbXBsZW1lbnRhdGlvbjtcclxuXHJcbnZhciBEb2N1bWVudCA9IHJlcXVpcmUoJy4vRG9jdW1lbnQnKTtcclxudmFyIERvY3VtZW50VHlwZSA9IHJlcXVpcmUoJy4vRG9jdW1lbnRUeXBlJyk7XHJcbnZhciBIVE1MUGFyc2VyID0gcmVxdWlyZSgnLi9IVE1MUGFyc2VyJyk7XHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxudmFyIHhtbCA9IHJlcXVpcmUoJy4veG1sbmFtZXMnKTtcclxuXHJcbi8vIEVhY2ggZG9jdW1lbnQgbXVzdCBoYXZlIGl0cyBvd24gaW5zdGFuY2Ugb2YgdGhlIGRvbWltcGxlbWVudGF0aW9uIG9iamVjdFxyXG5mdW5jdGlvbiBET01JbXBsZW1lbnRhdGlvbihjb250ZXh0T2JqZWN0KSB7XHJcbiAgdGhpcy5jb250ZXh0T2JqZWN0ID0gY29udGV4dE9iamVjdDtcclxufVxyXG5cclxuXHJcbi8vIEZlYXR1cmUvdmVyc2lvbiBwYWlycyB0aGF0IERPTUltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoKSByZXR1cm5zXHJcbi8vIHRydWUgZm9yLiAgSXQgcmV0dXJucyBmYWxzZSBmb3IgYW55dGhpbmcgZWxzZS5cclxudmFyIHN1cHBvcnRlZEZlYXR1cmVzID0ge1xyXG4gICd4bWwnOiB7ICcnOiB0cnVlLCAnMS4wJzogdHJ1ZSwgJzIuMCc6IHRydWUgfSwgICAvLyBET00gQ29yZVxyXG4gICdjb3JlJzogeyAnJzogdHJ1ZSwgJzIuMCc6IHRydWUgfSwgICAgICAgICAgICAgICAvLyBET00gQ29yZVxyXG4gICdodG1sJzogeyAnJzogdHJ1ZSwgJzEuMCc6IHRydWUsICcyLjAnOiB0cnVlfSAsICAvLyBIVE1MXHJcbiAgJ3hodG1sJzogeyAnJzogdHJ1ZSwgJzEuMCc6IHRydWUsICcyLjAnOiB0cnVlfSAsIC8vIEhUTUxcclxufTtcclxuXHJcbkRPTUltcGxlbWVudGF0aW9uLnByb3RvdHlwZSA9IHtcclxuICBoYXNGZWF0dXJlOiBmdW5jdGlvbiBoYXNGZWF0dXJlKGZlYXR1cmUsIHZlcnNpb24pIHtcclxuICAgIHZhciBmID0gc3VwcG9ydGVkRmVhdHVyZXNbKGZlYXR1cmUgfHwgJycpLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgcmV0dXJuIChmICYmIGZbdmVyc2lvbiB8fCAnJ10pIHx8IGZhbHNlO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZURvY3VtZW50VHlwZTogZnVuY3Rpb24gY3JlYXRlRG9jdW1lbnRUeXBlKHF1YWxpZmllZE5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xyXG4gICAgaWYgKCF4bWwuaXNWYWxpZFFOYW1lKHF1YWxpZmllZE5hbWUpKSB1dGlscy5JbnZhbGlkQ2hhcmFjdGVyRXJyb3IoKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IERvY3VtZW50VHlwZSh0aGlzLmNvbnRleHRPYmplY3QsIHF1YWxpZmllZE5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCk7XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlRG9jdW1lbnQ6IGZ1bmN0aW9uIGNyZWF0ZURvY3VtZW50KG5hbWVzcGFjZSwgcXVhbGlmaWVkTmFtZSwgZG9jdHlwZSkge1xyXG4gICAgLy9cclxuICAgIC8vIE5vdGUgdGhhdCB0aGUgY3VycmVudCBET01Db3JlIHNwZWMgbWFrZXMgaXQgaW1wb3NzaWJsZSB0b1xyXG4gICAgLy8gY3JlYXRlIGFuIEhUTUwgZG9jdW1lbnQgd2l0aCB0aGlzIGZ1bmN0aW9uLCBldmVuIGlmIHRoZVxyXG4gICAgLy8gbmFtZXNwYWNlIGFuZCBkb2N0eXBlIGFyZSBwcm9wZXJ0bHkgc2V0LiAgU2VlIHRoaXMgdGhyZWFkOlxyXG4gICAgLy8gaHR0cDovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LWRvbS8yMDExQXBySnVuLzAxMzIuaHRtbFxyXG4gICAgLy9cclxuICAgIHZhciBkID0gbmV3IERvY3VtZW50KGZhbHNlLCBudWxsKTtcclxuICAgIHZhciBlO1xyXG5cclxuICAgIGlmIChxdWFsaWZpZWROYW1lKVxyXG4gICAgICBlID0gZC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCBxdWFsaWZpZWROYW1lKTtcclxuICAgIGVsc2VcclxuICAgICAgZSA9IG51bGw7XHJcblxyXG4gICAgaWYgKGRvY3R5cGUpIHtcclxuICAgICAgZC5hcHBlbmRDaGlsZChkb2N0eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZSkgZC5hcHBlbmRDaGlsZChlKTtcclxuICAgIGlmIChuYW1lc3BhY2UgPT09IHV0aWxzLk5BTUVTUEFDRS5IVE1MKSB7XHJcbiAgICAgIGQuX2NvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3hodG1sK3htbCc7XHJcbiAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gdXRpbHMuTkFNRVNQQUNFLlNWRykge1xyXG4gICAgICBkLl9jb250ZW50VHlwZSA9ICdpbWFnZS9zdmcreG1sJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGQuX2NvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL3htbCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGQ7XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlSFRNTERvY3VtZW50OiBmdW5jdGlvbiBjcmVhdGVIVE1MRG9jdW1lbnQodGl0bGVUZXh0KSB7XHJcbiAgICB2YXIgZCA9IG5ldyBEb2N1bWVudCh0cnVlLCBudWxsKTtcclxuICAgIGQuYXBwZW5kQ2hpbGQobmV3IERvY3VtZW50VHlwZShkLCAnaHRtbCcpKTtcclxuICAgIHZhciBodG1sID0gZC5jcmVhdGVFbGVtZW50KCdodG1sJyk7XHJcbiAgICBkLmFwcGVuZENoaWxkKGh0bWwpO1xyXG4gICAgdmFyIGhlYWQgPSBkLmNyZWF0ZUVsZW1lbnQoJ2hlYWQnKTtcclxuICAgIGh0bWwuYXBwZW5kQ2hpbGQoaGVhZCk7XHJcbiAgICBpZiAodGl0bGVUZXh0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdmFyIHRpdGxlID0gZC5jcmVhdGVFbGVtZW50KCd0aXRsZScpO1xyXG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuICAgICAgdGl0bGUuYXBwZW5kQ2hpbGQoZC5jcmVhdGVUZXh0Tm9kZSh0aXRsZVRleHQpKTtcclxuICAgIH1cclxuICAgIGh0bWwuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KCdib2R5JykpO1xyXG4gICAgZC5tb2RjbG9jayA9IDE7IC8vIFN0YXJ0IHRyYWNraW5nIG1vZGlmaWNhdGlvbnNcclxuICAgIHJldHVybiBkO1xyXG4gIH0sXHJcblxyXG4gIG1velNldE91dHB1dE11dGF0aW9uSGFuZGxlcjogZnVuY3Rpb24oZG9jLCBoYW5kbGVyKSB7XHJcbiAgICBkb2MubXV0YXRpb25IYW5kbGVyID0gaGFuZGxlcjtcclxuICB9LFxyXG5cclxuICBtb3pHZXRJbnB1dE11dGF0aW9uSGFuZGxlcjogZnVuY3Rpb24oZG9jKSB7XHJcbiAgICB1dGlscy5ueWkoKTtcclxuICB9LFxyXG5cclxuICBtb3pIVE1MUGFyc2VyOiBIVE1MUGFyc2VyLFxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/DOMTokenList.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/DOMTokenList.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n// DOMTokenList implementation based on https://github.com/Raynos/DOM-shim\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nmodule.exports = DOMTokenList;\r\n\r\nfunction DOMTokenList(getter, setter) {\r\n  this._getString = getter;\r\n  this._setString = setter;\r\n  this._length = 0;\r\n  this._lastStringValue = '';\r\n  this._update();\r\n}\r\n\r\nObject.defineProperties(DOMTokenList.prototype, {\r\n  length: { get: function() { return this._length; } },\r\n  item: { value: function(index) {\r\n    var list = getList(this);\r\n    if (index < 0 || index >= list.length) {\r\n      return null;\r\n    }\r\n    return list[index];\r\n  }},\r\n\r\n  contains: { value: function(token) {\r\n    token = String(token); // no error checking for contains()\r\n    var list = getList(this);\r\n    return list.indexOf(token) > -1;\r\n  }},\r\n\r\n  add: { value: function() {\r\n    var list = getList(this);\r\n    for (var i = 0, len = arguments.length; i < len; i++) {\r\n      var token = handleErrors(arguments[i]);\r\n      if (list.indexOf(token) < 0) {\r\n        list.push(token);\r\n      }\r\n    }\r\n    // Note: as per spec, if handleErrors() throws any errors, we never\r\n    // make it here and none of the changes take effect.\r\n    // Also per spec: we run the \"update steps\" even if no change was\r\n    // made (ie, if the token already existed)\r\n    this._update(list);\r\n  }},\r\n\r\n  remove: { value: function() {\r\n    var list = getList(this);\r\n    for (var i = 0, len = arguments.length; i < len; i++) {\r\n      var token = handleErrors(arguments[i]);\r\n      var index = list.indexOf(token);\r\n      if (index > -1) {\r\n        list.splice(index, 1);\r\n      }\r\n    }\r\n    // Note: as per spec, if handleErrors() throws any errors, we never\r\n    // make it here and none of the changes take effect.\r\n    // Also per spec: we run the \"update steps\" even if no change was\r\n    // made (ie, if the token wasn't previously present)\r\n    this._update(list);\r\n  }},\r\n\r\n  toggle: { value: function toggle(token, force) {\r\n    token = handleErrors(token);\r\n    if (this.contains(token)) {\r\n      if (force === undefined || force === false) {\r\n        this.remove(token);\r\n        return false;\r\n      }\r\n      return true;\r\n    } else {\r\n      if (force === undefined || force === true) {\r\n        this.add(token);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }},\r\n\r\n  replace: { value: function replace(token, newToken) {\r\n    // weird corner case of spec: if `token` contains whitespace, but\r\n    // `newToken` is the empty string, we must throw SyntaxError not\r\n    // InvalidCharacterError (sigh)\r\n    if (String(newToken)==='') { utils.SyntaxError(); }\r\n    token = handleErrors(token);\r\n    newToken = handleErrors(newToken);\r\n    var list = getList(this);\r\n    var idx = list.indexOf(token);\r\n    if (idx < 0) {\r\n      // Note that, per spec, we do not run the update steps on this path.\r\n      return false;\r\n    }\r\n    var idx2 = list.indexOf(newToken);\r\n    if (idx2 < 0) {\r\n      list[idx] = newToken;\r\n    } else {\r\n      // \"replace the first instance of either `token` or `newToken` with\r\n      // `newToken` and remove all other instances\"\r\n      if (idx < idx2) {\r\n        list[idx] = newToken;\r\n        list.splice(idx2, 1);\r\n      } else {\r\n        // idx2 is already `newToken`\r\n        list.splice(idx, 1);\r\n      }\r\n    }\r\n    this._update(list);\r\n    return true;\r\n  }},\r\n\r\n  toString: { value: function() {\r\n    return this._getString();\r\n  }},\r\n\r\n  value: {\r\n    get: function() {\r\n      return this._getString();\r\n    },\r\n    set: function(v) {\r\n      this._setString(v);\r\n      this._update();\r\n    }\r\n  },\r\n\r\n  // Called when the setter is called from outside this interface.\r\n  _update: { value: function(list) {\r\n    if (list) {\r\n      fixIndex(this, list);\r\n      this._setString(list.join(\" \").trim());\r\n    } else {\r\n      fixIndex(this, getList(this));\r\n    }\r\n    this._lastStringValue = this._getString();\r\n  } },\r\n});\r\n\r\nfunction fixIndex(clist, list) {\r\n  var oldLength = clist._length;\r\n  var i;\r\n  clist._length = list.length;\r\n  for (i = 0; i < list.length; i++) {\r\n    clist[i] = list[i];\r\n  }\r\n  // Clear/free old entries.\r\n  for (; i < oldLength; i++) {\r\n    clist[i] = undefined;\r\n  }\r\n}\r\n\r\nfunction handleErrors(token) {\r\n  token = String(token);\r\n  if (token === \"\") {\r\n    utils.SyntaxError();\r\n  }\r\n  if (/[ \\t\\r\\n\\f]/.test(token)) {\r\n    utils.InvalidCharacterError();\r\n  }\r\n  return token;\r\n}\r\n\r\nfunction toArray(clist) {\r\n  var length = clist._length;\r\n  var arr = Array(length);\r\n  for (var i = 0; i < length; i++) {\r\n    arr[i] = clist[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction getList(clist) {\r\n  var strProp = clist._getString();\r\n  if (strProp === clist._lastStringValue) {\r\n    return toArray(clist);\r\n  }\r\n  var str = strProp.replace(/(^[ \\t\\r\\n\\f]+)|([ \\t\\r\\n\\f]+$)/g, '');\r\n  if (str === \"\") {\r\n    return [];\r\n  } else {\r\n    var seen = Object.create(null);\r\n    return str.split(/[ \\t\\r\\n\\f]+/g).filter(function(n) {\r\n      var key = '$' + n;\r\n      if (seen[key]) { return false; }\r\n      seen[key] = true;\r\n      return true;\r\n    });\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/DOMTokenList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Document.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Document.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Document;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\");\r\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ContainerNode.js\");\r\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\");\r\nvar Text = __webpack_require__(/*! ./Text */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Text.js\");\r\nvar Comment = __webpack_require__(/*! ./Comment */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Comment.js\");\r\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\");\r\nvar DocumentFragment = __webpack_require__(/*! ./DocumentFragment */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentFragment.js\");\r\nvar ProcessingInstruction = __webpack_require__(/*! ./ProcessingInstruction */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ProcessingInstruction.js\");\r\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js\");\r\nvar TreeWalker = __webpack_require__(/*! ./TreeWalker */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/TreeWalker.js\");\r\nvar NodeIterator = __webpack_require__(/*! ./NodeIterator */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeIterator.js\");\r\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js\");\r\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/URL.js\");\r\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/select.js\");\r\nvar events = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/events.js\");\r\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/xmlnames.js\");\r\nvar html = __webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/htmlelts.js\");\r\nvar svg = __webpack_require__(/*! ./svg */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/svg.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar MUTATE = __webpack_require__(/*! ./MutationConstants */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/MutationConstants.js\");\r\nvar NAMESPACE = utils.NAMESPACE;\r\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/config.js\").isApiWritable);\r\n\r\nfunction Document(isHTML, address) {\r\n  ContainerNode.call(this);\r\n  this.nodeType = Node.DOCUMENT_NODE;\r\n  this.isHTML = isHTML;\r\n  this._address = address || 'about:blank';\r\n  this.readyState = 'loading';\r\n  this.implementation = new DOMImplementation(this);\r\n\r\n  // DOMCore says that documents are always associated with themselves\r\n  this.ownerDocument = null; // ... but W3C tests expect null\r\n  this._contentType = isHTML ? 'text/html' : 'application/xml';\r\n\r\n  // These will be initialized by our custom versions of\r\n  // appendChild and insertBefore that override the inherited\r\n  // Node methods.\r\n  // XXX: override those methods!\r\n  this.doctype = null;\r\n  this.documentElement = null;\r\n\r\n  // \"Associated inert template document\"\r\n  this._templateDocCache = null;\r\n  // List of active NodeIterators, see NodeIterator#_preremove()\r\n  this._nodeIterators = null;\r\n\r\n  // Documents are always rooted, by definition\r\n  this._nid = 1;\r\n  this._nextnid = 2; // For numbering children of the document\r\n  this._nodes = [null, this];  // nid to node map\r\n\r\n  // This maintains the mapping from element ids to element nodes.\r\n  // We may need to update this mapping every time a node is rooted\r\n  // or uprooted, and any time an attribute is added, removed or changed\r\n  // on a rooted element.\r\n  this.byId = Object.create(null);\r\n\r\n  // This property holds a monotonically increasing value akin to\r\n  // a timestamp used to record the last modification time of nodes\r\n  // and their subtrees. See the lastModTime attribute and modify()\r\n  // method of the Node class. And see FilteredElementList for an example\r\n  // of the use of lastModTime\r\n  this.modclock = 0;\r\n}\r\n\r\n// Map from lowercase event category names (used as arguments to\r\n// createEvent()) to the property name in the impl object of the\r\n// event constructor.\r\nvar supportedEvents = {\r\n  event: 'Event',\r\n  customevent: 'CustomEvent',\r\n  uievent: 'UIEvent',\r\n  mouseevent: 'MouseEvent'\r\n};\r\n\r\n// Certain arguments to document.createEvent() must be treated specially\r\nvar replacementEvent = {\r\n  events: 'event',\r\n  htmlevents: 'event',\r\n  mouseevents: 'mouseevent',\r\n  mutationevents: 'mutationevent',\r\n  uievents: 'uievent'\r\n};\r\n\r\nvar mirrorAttr = function(f, name, defaultValue) {\r\n  return {\r\n    get: function() {\r\n      var o = f.call(this);\r\n      if (o) { return o[name]; }\r\n      return defaultValue;\r\n    },\r\n    set: function(value) {\r\n      var o = f.call(this);\r\n      if (o) { o[name] = value; }\r\n    },\r\n  };\r\n};\r\n\r\n/** @spec https://dom.spec.whatwg.org/#validate-and-extract */\r\nfunction validateAndExtract(namespace, qualifiedName) {\r\n  var prefix, localName, pos;\r\n  if (namespace==='') { namespace = null; }\r\n  // See https://github.com/whatwg/dom/issues/671\r\n  // and https://github.com/whatwg/dom/issues/319\r\n  if (!xml.isValidQName(qualifiedName)) {\r\n    utils.InvalidCharacterError();\r\n  }\r\n  prefix = null;\r\n  localName = qualifiedName;\r\n\r\n  pos = qualifiedName.indexOf(':');\r\n  if (pos >= 0) {\r\n    prefix = qualifiedName.substring(0, pos);\r\n    localName = qualifiedName.substring(pos+1);\r\n  }\r\n  if (prefix !== null && namespace === null) {\r\n    utils.NamespaceError();\r\n  }\r\n  if (prefix === 'xml' && namespace !== NAMESPACE.XML) {\r\n    utils.NamespaceError();\r\n  }\r\n  if ((prefix === 'xmlns' || qualifiedName === 'xmlns') &&\r\n      namespace !== NAMESPACE.XMLNS) {\r\n    utils.NamespaceError();\r\n  }\r\n  if (namespace === NAMESPACE.XMLNS && !(prefix==='xmlns' || qualifiedName==='xmlns')) {\r\n    utils.NamespaceError();\r\n  }\r\n  return { namespace: namespace, prefix: prefix, localName: localName };\r\n}\r\n\r\nDocument.prototype = Object.create(ContainerNode.prototype, {\r\n  // This method allows dom.js to communicate with a renderer\r\n  // that displays the document in some way\r\n  // XXX: I should probably move this to the window object\r\n  _setMutationHandler: { value: function(handler) {\r\n    this.mutationHandler = handler;\r\n  }},\r\n\r\n  // This method allows dom.js to receive event notifications\r\n  // from the renderer.\r\n  // XXX: I should probably move this to the window object\r\n  _dispatchRendererEvent: { value: function(targetNid, type, details) {\r\n    var target = this._nodes[targetNid];\r\n    if (!target) return;\r\n    target._dispatchEvent(new Event(type, details), true);\r\n  }},\r\n\r\n  nodeName: { value: '#document'},\r\n  nodeValue: {\r\n    get: function() {\r\n      return null;\r\n    },\r\n    set: function() {}\r\n  },\r\n\r\n  // XXX: DOMCore may remove documentURI, so it is NYI for now\r\n  documentURI: { get: function() { return this._address; }, set: utils.nyi },\r\n  compatMode: { get: function() {\r\n    // The _quirks property is set by the HTML parser\r\n    return this._quirks ? 'BackCompat' : 'CSS1Compat';\r\n  }},\r\n\r\n  createTextNode: { value: function(data) {\r\n    return new Text(this, String(data));\r\n  }},\r\n  createComment: { value: function(data) {\r\n    return new Comment(this, data);\r\n  }},\r\n  createDocumentFragment: { value: function() {\r\n    return new DocumentFragment(this);\r\n  }},\r\n  createProcessingInstruction: { value: function(target, data) {\r\n    if (!xml.isValidName(target) || data.indexOf('?>') !== -1)\r\n      utils.InvalidCharacterError();\r\n    return new ProcessingInstruction(this, target, data);\r\n  }},\r\n\r\n  createAttribute: { value: function(localName) {\r\n    localName = String(localName);\r\n    if (!xml.isValidName(localName)) utils.InvalidCharacterError();\r\n    if (this.isHTML) {\r\n      localName = utils.toASCIILowerCase(localName);\r\n    }\r\n    return new Element._Attr(null, localName, null, null, '');\r\n  }},\r\n  createAttributeNS: { value: function(namespace, qualifiedName) {\r\n    // Convert parameter types according to WebIDL\r\n    namespace =\r\n      (namespace === null || namespace === undefined || namespace === '') ? null :\r\n      String(namespace);\r\n    qualifiedName = String(qualifiedName);\r\n    var ve = validateAndExtract(namespace, qualifiedName);\r\n    return new Element._Attr(null, ve.localName, ve.prefix, ve.namespace, '');\r\n  }},\r\n\r\n  createElement: { value: function(localName) {\r\n    localName = String(localName);\r\n    if (!xml.isValidName(localName)) utils.InvalidCharacterError();\r\n    // Per spec, namespace should be HTML namespace if \"context object is\r\n    // an HTML document or context object's content type is\r\n    // \"application/xhtml+xml\", and null otherwise.\r\n    if (this.isHTML) {\r\n      if (/[A-Z]/.test(localName))\r\n        localName = utils.toASCIILowerCase(localName);\r\n      return html.createElement(this, localName, null);\r\n    } else if (this.contentType === 'application/xhtml+xml') {\r\n      return html.createElement(this, localName, null);\r\n    } else {\r\n      return new Element(this, localName, null, null);\r\n    }\r\n  }, writable: isApiWritable },\r\n\r\n  createElementNS: { value: function(namespace, qualifiedName) {\r\n    // Convert parameter types according to WebIDL\r\n    namespace =\r\n      (namespace === null || namespace === undefined || namespace === '') ? null :\r\n      String(namespace);\r\n    qualifiedName = String(qualifiedName);\r\n    var ve = validateAndExtract(namespace, qualifiedName);\r\n    return this._createElementNS(ve.localName, ve.namespace, ve.prefix);\r\n  }, writable: isApiWritable },\r\n\r\n  // This is used directly by HTML parser, which allows it to create\r\n  // elements with localNames containing ':' and non-default namespaces\r\n  _createElementNS: { value: function(localName, namespace, prefix) {\r\n    if (namespace === NAMESPACE.HTML) {\r\n      return html.createElement(this, localName, prefix);\r\n    }\r\n    else if (namespace === NAMESPACE.SVG) {\r\n      return svg.createElement(this, localName, prefix);\r\n    }\r\n\r\n    return new Element(this, localName, namespace, prefix);\r\n  }},\r\n\r\n  createEvent: { value: function createEvent(interfaceName) {\r\n    interfaceName = interfaceName.toLowerCase();\r\n    var name = replacementEvent[interfaceName] || interfaceName;\r\n    var constructor = events[supportedEvents[name]];\r\n\r\n    if (constructor) {\r\n      var e = new constructor();\r\n      e._initialized = false;\r\n      return e;\r\n    }\r\n    else {\r\n      utils.NotSupportedError();\r\n    }\r\n  }},\r\n\r\n  // See: http://www.w3.org/TR/dom/#dom-document-createtreewalker\r\n  createTreeWalker: {value: function (root, whatToShow, filter) {\r\n    if (!root) { throw new TypeError(\"root argument is required\"); }\r\n    if (!(root instanceof Node)) { throw new TypeError(\"root not a node\"); }\r\n    whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : (+whatToShow);\r\n    filter = filter === undefined ? null : filter;\r\n\r\n    return new TreeWalker(root, whatToShow, filter);\r\n  }},\r\n\r\n  // See: http://www.w3.org/TR/dom/#dom-document-createnodeiterator\r\n  createNodeIterator: {value: function (root, whatToShow, filter) {\r\n    if (!root) { throw new TypeError(\"root argument is required\"); }\r\n    if (!(root instanceof Node)) { throw new TypeError(\"root not a node\"); }\r\n    whatToShow = whatToShow === undefined ? NodeFilter.SHOW_ALL : (+whatToShow);\r\n    filter = filter === undefined ? null : filter;\r\n\r\n    return new NodeIterator(root, whatToShow, filter);\r\n  }},\r\n\r\n  _attachNodeIterator: { value: function(ni) {\r\n    // XXX ideally this should be a weak reference from Document to NodeIterator\r\n    if (!this._nodeIterators) { this._nodeIterators = []; }\r\n    this._nodeIterators.push(ni);\r\n  }},\r\n\r\n  _detachNodeIterator: { value: function(ni) {\r\n    // ni should always be in list of node iterators\r\n    var idx = this._nodeIterators.indexOf(ni);\r\n    this._nodeIterators.splice(idx, 1);\r\n  }},\r\n\r\n  _preremoveNodeIterators: { value: function(toBeRemoved) {\r\n    if (this._nodeIterators) {\r\n      this._nodeIterators.forEach(function(ni) { ni._preremove(toBeRemoved); });\r\n    }\r\n  }},\r\n\r\n  // Maintain the documentElement and\r\n  // doctype properties of the document.  Each of the following\r\n  // methods chains to the Node implementation of the method\r\n  // to do the actual inserting, removal or replacement.\r\n\r\n  _updateDocTypeElement: { value: function _updateDocTypeElement() {\r\n    this.doctype = this.documentElement = null;\r\n    for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n      if (kid.nodeType === Node.DOCUMENT_TYPE_NODE)\r\n        this.doctype = kid;\r\n      else if (kid.nodeType === Node.ELEMENT_NODE)\r\n        this.documentElement = kid;\r\n    }\r\n  }},\r\n\r\n  insertBefore: { value: function insertBefore(child, refChild) {\r\n    Node.prototype.insertBefore.call(this, child, refChild);\r\n    this._updateDocTypeElement();\r\n    return child;\r\n  }},\r\n\r\n  replaceChild: { value: function replaceChild(node, child) {\r\n    Node.prototype.replaceChild.call(this, node, child);\r\n    this._updateDocTypeElement();\r\n    return child;\r\n  }},\r\n\r\n  removeChild: { value: function removeChild(child) {\r\n    Node.prototype.removeChild.call(this, child);\r\n    this._updateDocTypeElement();\r\n    return child;\r\n  }},\r\n\r\n  getElementById: { value: function(id) {\r\n    var n = this.byId[id];\r\n    if (!n) return null;\r\n    if (n instanceof MultiId) { // there was more than one element with this id\r\n      return n.getFirst();\r\n    }\r\n    return n;\r\n  }},\r\n\r\n  _hasMultipleElementsWithId: { value: function(id) {\r\n    // Used internally by querySelectorAll optimization\r\n    return (this.byId[id] instanceof MultiId);\r\n  }},\r\n\r\n  // Just copy this method from the Element prototype\r\n  getElementsByName: { value: Element.prototype.getElementsByName },\r\n  getElementsByTagName: { value: Element.prototype.getElementsByTagName },\r\n  getElementsByTagNameNS: { value: Element.prototype.getElementsByTagNameNS },\r\n  getElementsByClassName: { value: Element.prototype.getElementsByClassName },\r\n\r\n  adoptNode: { value: function adoptNode(node) {\r\n    if (node.nodeType === Node.DOCUMENT_NODE) utils.NotSupportedError();\r\n    if (node.nodeType === Node.ATTRIBUTE_NODE) { return node; }\r\n\r\n    if (node.parentNode) node.parentNode.removeChild(node);\r\n\r\n    if (node.ownerDocument !== this)\r\n      recursivelySetOwner(node, this);\r\n\r\n    return node;\r\n  }},\r\n\r\n  importNode: { value: function importNode(node, deep) {\r\n    return this.adoptNode(node.cloneNode(deep));\r\n  }, writable: isApiWritable },\r\n\r\n  // The following attributes and methods are from the HTML spec\r\n  origin: { get: function origin() { return null; } },\r\n  characterSet: { get: function characterSet() { return \"UTF-8\"; } },\r\n  contentType: { get: function contentType() { return this._contentType; } },\r\n  URL: { get: function URL() { return this._address; } },\r\n  domain: { get: utils.nyi, set: utils.nyi },\r\n  referrer: { get: utils.nyi },\r\n  cookie: { get: utils.nyi, set: utils.nyi },\r\n  lastModified: { get: utils.nyi },\r\n  location: {\r\n\tget: function() {\r\n\t  return this.defaultView ? this.defaultView.location : null; // gh #75\r\n\t},\r\n\tset: utils.nyi\r\n  },\r\n  _titleElement: {\r\n    get: function() {\r\n      // The title element of a document is the first title element in the\r\n      // document in tree order, if there is one, or null otherwise.\r\n      return this.getElementsByTagName('title').item(0) || null;\r\n    }\r\n  },\r\n  title: {\r\n    get: function() {\r\n      var elt = this._titleElement;\r\n      // The child text content of the title element, or '' if null.\r\n      var value = elt ? elt.textContent : '';\r\n      // Strip and collapse whitespace in value\r\n      return value.replace(/[ \\t\\n\\r\\f]+/g, ' ').replace(/(^ )|( $)/g, '');\r\n    },\r\n    set: function(value) {\r\n      var elt = this._titleElement;\r\n      var head = this.head;\r\n      if (!elt && !head) { return; /* according to spec */ }\r\n      if (!elt) {\r\n        elt = this.createElement('title');\r\n        head.appendChild(elt);\r\n      }\r\n      elt.textContent = value;\r\n    }\r\n  },\r\n  dir: mirrorAttr(function() {\r\n    var htmlElement = this.documentElement;\r\n    if (htmlElement && htmlElement.tagName === 'HTML') { return htmlElement; }\r\n  }, 'dir', ''),\r\n  fgColor: mirrorAttr(function() { return this.body; }, 'text', ''),\r\n  linkColor: mirrorAttr(function() { return this.body; }, 'link', ''),\r\n  vlinkColor: mirrorAttr(function() { return this.body; }, 'vLink', ''),\r\n  alinkColor: mirrorAttr(function() { return this.body; }, 'aLink', ''),\r\n  bgColor: mirrorAttr(function() { return this.body; }, 'bgColor', ''),\r\n\r\n  // Historical aliases of Document#characterSet\r\n  charset: { get: function() { return this.characterSet; } },\r\n  inputEncoding: { get: function() { return this.characterSet; } },\r\n\r\n  scrollingElement: {\r\n    get: function() {\r\n      return this._quirks ? this.body : this.documentElement;\r\n    }\r\n  },\r\n\r\n  // Return the first <body> child of the document element.\r\n  // XXX For now, setting this attribute is not implemented.\r\n  body: {\r\n    get: function() {\r\n      return namedHTMLChild(this.documentElement, 'body');\r\n    },\r\n    set: utils.nyi\r\n  },\r\n  // Return the first <head> child of the document element.\r\n  head: { get: function() {\r\n    return namedHTMLChild(this.documentElement, 'head');\r\n  }},\r\n  images: { get: utils.nyi },\r\n  embeds: { get: utils.nyi },\r\n  plugins: { get: utils.nyi },\r\n  links: { get: utils.nyi },\r\n  forms: { get: utils.nyi },\r\n  scripts: { get: utils.nyi },\r\n  applets: { get: function() { return []; } },\r\n  activeElement: { get: function() { return null; } },\r\n  innerHTML: {\r\n    get: function() { return this.serialize(); },\r\n    set: utils.nyi\r\n  },\r\n  outerHTML: {\r\n    get: function() { return this.serialize(); },\r\n    set: utils.nyi\r\n  },\r\n\r\n  write: { value: function(args) {\r\n    if (!this.isHTML) utils.InvalidStateError();\r\n\r\n    // XXX: still have to implement the ignore part\r\n    if (!this._parser /* && this._ignore_destructive_writes > 0 */ )\r\n      return;\r\n\r\n    if (!this._parser) {\r\n      // XXX call document.open, etc.\r\n    }\r\n\r\n    var s = arguments.join('');\r\n\r\n    // If the Document object's reload override flag is set, then\r\n    // append the string consisting of the concatenation of all the\r\n    // arguments to the method to the Document's reload override\r\n    // buffer.\r\n    // XXX: don't know what this is about.  Still have to do it\r\n\r\n    // If there is no pending parsing-blocking script, have the\r\n    // tokenizer process the characters that were inserted, one at a\r\n    // time, processing resulting tokens as they are emitted, and\r\n    // stopping when the tokenizer reaches the insertion point or when\r\n    // the processing of the tokenizer is aborted by the tree\r\n    // construction stage (this can happen if a script end tag token is\r\n    // emitted by the tokenizer).\r\n\r\n    // XXX: still have to do the above. Sounds as if we don't\r\n    // always call parse() here.  If we're blocked, then we just\r\n    // insert the text into the stream but don't parse it reentrantly...\r\n\r\n    // Invoke the parser reentrantly\r\n    this._parser.parse(s);\r\n  }},\r\n\r\n  writeln: { value: function writeln(args) {\r\n    this.write(Array.prototype.join.call(arguments, '') + '\\n');\r\n  }},\r\n\r\n  open: { value: function() {\r\n    this.documentElement = null;\r\n  }},\r\n\r\n  close: { value: function() {\r\n    this.readyState = 'interactive';\r\n    this._dispatchEvent(new Event('readystatechange'), true);\r\n    this._dispatchEvent(new Event('DOMContentLoaded'), true);\r\n    this.readyState = 'complete';\r\n    this._dispatchEvent(new Event('readystatechange'), true);\r\n    if (this.defaultView) {\r\n      this.defaultView._dispatchEvent(new Event('load'), true);\r\n    }\r\n  }},\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n    var d = new Document(this.isHTML, this._address);\r\n    d._quirks = this._quirks;\r\n    d._contentType = this._contentType;\r\n    return d;\r\n  }},\r\n\r\n  // We need to adopt the nodes if we do a deep clone\r\n  cloneNode: { value: function cloneNode(deep) {\r\n    var clone = Node.prototype.cloneNode.call(this, false);\r\n    if (deep) {\r\n      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n        clone._appendChild(clone.importNode(kid, true));\r\n      }\r\n    }\r\n    clone._updateDocTypeElement();\r\n    return clone;\r\n  }},\r\n\r\n  isEqual: { value: function isEqual(n) {\r\n    // Any two documents are shallowly equal.\r\n    // Node.isEqualNode will also test the children\r\n    return true;\r\n  }},\r\n\r\n  // Implementation-specific function.  Called when a text, comment,\r\n  // or pi value changes.\r\n  mutateValue: { value: function(node) {\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.VALUE,\r\n        target: node,\r\n        data: node.data\r\n      });\r\n    }\r\n  }},\r\n\r\n  // Invoked when an attribute's value changes. Attr holds the new\r\n  // value.  oldval is the old value.  Attribute mutations can also\r\n  // involve changes to the prefix (and therefore the qualified name)\r\n  mutateAttr: { value: function(attr, oldval) {\r\n    // Manage id->element mapping for getElementsById()\r\n    // XXX: this special case id handling should not go here,\r\n    // but in the attribute declaration for the id attribute\r\n    /*\r\n    if (attr.localName === 'id' && attr.namespaceURI === null) {\r\n      if (oldval) delId(oldval, attr.ownerElement);\r\n      addId(attr.value, attr.ownerElement);\r\n    }\r\n    */\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.ATTR,\r\n        target: attr.ownerElement,\r\n        attr: attr\r\n      });\r\n    }\r\n  }},\r\n\r\n  // Used by removeAttribute and removeAttributeNS for attributes.\r\n  mutateRemoveAttr: { value: function(attr) {\r\n/*\r\n* This is now handled in Attributes.js\r\n    // Manage id to element mapping\r\n    if (attr.localName === 'id' && attr.namespaceURI === null) {\r\n      this.delId(attr.value, attr.ownerElement);\r\n    }\r\n*/\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.REMOVE_ATTR,\r\n        target: attr.ownerElement,\r\n        attr: attr\r\n      });\r\n    }\r\n  }},\r\n\r\n  // Called by Node.removeChild, etc. to remove a rooted element from\r\n  // the tree. Only needs to generate a single mutation event when a\r\n  // node is removed, but must recursively mark all descendants as not\r\n  // rooted.\r\n  mutateRemove: { value: function(node) {\r\n    // Send a single mutation event\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.REMOVE,\r\n        target: node.parentNode,\r\n        node: node\r\n      });\r\n    }\r\n\r\n    // Mark this and all descendants as not rooted\r\n    recursivelyUproot(node);\r\n  }},\r\n\r\n  // Called when a new element becomes rooted.  It must recursively\r\n  // generate mutation events for each of the children, and mark them all\r\n  // as rooted.\r\n  mutateInsert: { value: function(node) {\r\n    // Mark node and its descendants as rooted\r\n    recursivelyRoot(node);\r\n\r\n    // Send a single mutation event\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.INSERT,\r\n        target: node.parentNode,\r\n        node: node\r\n      });\r\n    }\r\n  }},\r\n\r\n  // Called when a rooted element is moved within the document\r\n  mutateMove: { value: function(node) {\r\n    if (this.mutationHandler) {\r\n      this.mutationHandler({\r\n        type: MUTATE.MOVE,\r\n        target: node\r\n      });\r\n    }\r\n  }},\r\n\r\n\r\n  // Add a mapping from  id to n for n.ownerDocument\r\n  addId: { value: function addId(id, n) {\r\n    var val = this.byId[id];\r\n    if (!val) {\r\n      this.byId[id] = n;\r\n    }\r\n    else {\r\n      // TODO: Add a way to opt-out console warnings\r\n      //console.warn('Duplicate element id ' + id);\r\n      if (!(val instanceof MultiId)) {\r\n        val = new MultiId(val);\r\n        this.byId[id] = val;\r\n      }\r\n      val.add(n);\r\n    }\r\n  }},\r\n\r\n  // Delete the mapping from id to n for n.ownerDocument\r\n  delId: { value: function delId(id, n) {\r\n    var val = this.byId[id];\r\n    utils.assert(val);\r\n\r\n    if (val instanceof MultiId) {\r\n      val.del(n);\r\n      if (val.length === 1) { // convert back to a single node\r\n        this.byId[id] = val.downgrade();\r\n      }\r\n    }\r\n    else {\r\n      this.byId[id] = undefined;\r\n    }\r\n  }},\r\n\r\n  _resolve: { value: function(href) {\r\n    //XXX: Cache the URL\r\n    return new URL(this._documentBaseURL).resolve(href);\r\n  }},\r\n\r\n  _documentBaseURL: { get: function() {\r\n    // XXX: This is not implemented correctly yet\r\n    var url = this._address;\r\n    if (url === 'about:blank') url = '/';\r\n\r\n    var base = this.querySelector('base[href]');\r\n    if (base) {\r\n      return new URL(url).resolve(base.getAttribute('href'));\r\n    }\r\n    return url;\r\n\r\n    // The document base URL of a Document object is the\r\n    // absolute URL obtained by running these substeps:\r\n\r\n    //     Let fallback base url be the document's address.\r\n\r\n    //     If fallback base url is about:blank, and the\r\n    //     Document's browsing context has a creator browsing\r\n    //     context, then let fallback base url be the document\r\n    //     base URL of the creator Document instead.\r\n\r\n    //     If the Document is an iframe srcdoc document, then\r\n    //     let fallback base url be the document base URL of\r\n    //     the Document's browsing context's browsing context\r\n    //     container's Document instead.\r\n\r\n    //     If there is no base element that has an href\r\n    //     attribute, then the document base URL is fallback\r\n    //     base url; abort these steps. Otherwise, let url be\r\n    //     the value of the href attribute of the first such\r\n    //     element.\r\n\r\n    //     Resolve url relative to fallback base url (thus,\r\n    //     the base href attribute isn't affected by xml:base\r\n    //     attributes).\r\n\r\n    //     The document base URL is the result of the previous\r\n    //     step if it was successful; otherwise it is fallback\r\n    //     base url.\r\n  }},\r\n\r\n  _templateDoc: { get: function() {\r\n    if (!this._templateDocCache) {\r\n      // \"associated inert template document\"\r\n      var newDoc = new Document(this.isHTML, this._address);\r\n      this._templateDocCache = newDoc._templateDocCache = newDoc;\r\n    }\r\n    return this._templateDocCache;\r\n  }},\r\n\r\n  querySelector: { value: function(selector) {\r\n    return select(selector, this)[0];\r\n  }},\r\n\r\n  querySelectorAll: { value: function(selector) {\r\n    var nodes = select(selector, this);\r\n    return nodes.item ? nodes : new NodeList(nodes);\r\n  }}\r\n\r\n});\r\n\r\n\r\nvar eventHandlerTypes = [\r\n  'abort', 'canplay', 'canplaythrough', 'change', 'click', 'contextmenu',\r\n  'cuechange', 'dblclick', 'drag', 'dragend', 'dragenter', 'dragleave',\r\n  'dragover', 'dragstart', 'drop', 'durationchange', 'emptied', 'ended',\r\n  'input', 'invalid', 'keydown', 'keypress', 'keyup', 'loadeddata',\r\n  'loadedmetadata', 'loadstart', 'mousedown', 'mousemove', 'mouseout',\r\n  'mouseover', 'mouseup', 'mousewheel', 'pause', 'play', 'playing',\r\n  'progress', 'ratechange', 'readystatechange', 'reset', 'seeked',\r\n  'seeking', 'select', 'show', 'stalled', 'submit', 'suspend',\r\n  'timeupdate', 'volumechange', 'waiting',\r\n\r\n  'blur', 'error', 'focus', 'load', 'scroll'\r\n];\r\n\r\n// Add event handler idl attribute getters and setters to Document\r\neventHandlerTypes.forEach(function(type) {\r\n  // Define the event handler registration IDL attribute for this type\r\n  Object.defineProperty(Document.prototype, 'on' + type, {\r\n    get: function() {\r\n      return this._getEventHandler(type);\r\n    },\r\n    set: function(v) {\r\n      this._setEventHandler(type, v);\r\n    }\r\n  });\r\n});\r\n\r\nfunction namedHTMLChild(parent, name) {\r\n  if (parent && parent.isHTML) {\r\n    for (var kid = parent.firstChild; kid !== null; kid = kid.nextSibling) {\r\n      if (kid.nodeType === Node.ELEMENT_NODE &&\r\n        kid.localName === name &&\r\n        kid.namespaceURI === NAMESPACE.HTML) {\r\n        return kid;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction root(n) {\r\n  n._nid = n.ownerDocument._nextnid++;\r\n  n.ownerDocument._nodes[n._nid] = n;\r\n  // Manage id to element mapping\r\n  if (n.nodeType === Node.ELEMENT_NODE) {\r\n    var id = n.getAttribute('id');\r\n    if (id) n.ownerDocument.addId(id, n);\r\n\r\n    // Script elements need to know when they're inserted\r\n    // into the document\r\n    if (n._roothook) n._roothook();\r\n  }\r\n}\r\n\r\nfunction uproot(n) {\r\n  // Manage id to element mapping\r\n  if (n.nodeType === Node.ELEMENT_NODE) {\r\n    var id = n.getAttribute('id');\r\n    if (id) n.ownerDocument.delId(id, n);\r\n  }\r\n  n.ownerDocument._nodes[n._nid] = undefined;\r\n  n._nid = undefined;\r\n}\r\n\r\nfunction recursivelyRoot(node) {\r\n  root(node);\r\n  // XXX:\r\n  // accessing childNodes on a leaf node creates a new array the\r\n  // first time, so be careful to write this loop so that it\r\n  // doesn't do that. node is polymorphic, so maybe this is hard to\r\n  // optimize?  Try switching on nodeType?\r\n/*\r\n  if (node.hasChildNodes()) {\r\n    var kids = node.childNodes;\r\n    for(var i = 0, n = kids.length;  i < n; i++)\r\n      recursivelyRoot(kids[i]);\r\n  }\r\n*/\r\n  if (node.nodeType === Node.ELEMENT_NODE) {\r\n    for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling)\r\n      recursivelyRoot(kid);\r\n  }\r\n}\r\n\r\nfunction recursivelyUproot(node) {\r\n  uproot(node);\r\n  for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling)\r\n      recursivelyUproot(kid);\r\n}\r\n\r\nfunction recursivelySetOwner(node, owner) {\r\n  node.ownerDocument = owner;\r\n  node._lastModTime = undefined; // mod times are document-based\r\n  if (Object.prototype.hasOwnProperty.call(node, '_tagName')) {\r\n    node._tagName = undefined; // Element subclasses might need to change case\r\n  }\r\n  for (var kid = node.firstChild; kid !== null; kid = kid.nextSibling)\r\n    recursivelySetOwner(kid, owner);\r\n}\r\n\r\n// A class for storing multiple nodes with the same ID\r\nfunction MultiId(node) {\r\n  this.nodes = Object.create(null);\r\n  this.nodes[node._nid] = node;\r\n  this.length = 1;\r\n  this.firstNode = undefined;\r\n}\r\n\r\n// Add a node to the list, with O(1) time\r\nMultiId.prototype.add = function(node) {\r\n  if (!this.nodes[node._nid]) {\r\n    this.nodes[node._nid] = node;\r\n    this.length++;\r\n    this.firstNode = undefined;\r\n  }\r\n};\r\n\r\n// Remove a node from the list, with O(1) time\r\nMultiId.prototype.del = function(node) {\r\n  if (this.nodes[node._nid]) {\r\n    delete this.nodes[node._nid];\r\n    this.length--;\r\n    this.firstNode = undefined;\r\n  }\r\n};\r\n\r\n// Get the first node from the list, in the document order\r\n// Takes O(N) time in the size of the list, with a cache that is invalidated\r\n// when the list is modified.\r\nMultiId.prototype.getFirst = function() {\r\n  /* jshint bitwise: false */\r\n  if (!this.firstNode) {\r\n    var nid;\r\n    for (nid in this.nodes) {\r\n      if (this.firstNode === undefined ||\r\n        this.firstNode.compareDocumentPosition(this.nodes[nid]) & Node.DOCUMENT_POSITION_PRECEDING) {\r\n        this.firstNode = this.nodes[nid];\r\n      }\r\n    }\r\n  }\r\n  return this.firstNode;\r\n};\r\n\r\n// If there is only one node left, return it. Otherwise return \"this\".\r\nMultiId.prototype.downgrade = function() {\r\n  if (this.length === 1) {\r\n    var nid;\r\n    for (nid in this.nodes) {\r\n      return this.nodes[nid];\r\n    }\r\n  }\r\n  return this;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentFragment.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/DocumentFragment.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports =  DocumentFragment;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\");\r\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ContainerNode.js\");\r\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\");\r\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/select.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nfunction DocumentFragment(doc) {\r\n  ContainerNode.call(this);\r\n  this.nodeType = Node.DOCUMENT_FRAGMENT_NODE;\r\n  this.ownerDocument = doc;\r\n}\r\n\r\nDocumentFragment.prototype = Object.create(ContainerNode.prototype, {\r\n  nodeName: { value: '#document-fragment' },\r\n  nodeValue: {\r\n    get: function() {\r\n      return null;\r\n    },\r\n    set: function() {}\r\n  },\r\n  // Copy the text content getter/setter from Element\r\n  textContent: Object.getOwnPropertyDescriptor(Element.prototype, 'textContent'),\r\n\r\n  // Copy the text content getter/setter from Element\r\n  innerText: Object.getOwnPropertyDescriptor(Element.prototype, 'innerText'),\r\n\r\n  querySelector: { value: function(selector) {\r\n    // implement in terms of querySelectorAll\r\n    var nodes = this.querySelectorAll(selector);\r\n    return nodes.length ? nodes[0] : null;\r\n  }},\r\n  querySelectorAll: { value: function(selector) {\r\n    // create a context\r\n    var context = Object.create(this);\r\n    // add some methods to the context for zest implementation, without\r\n    // adding them to the public DocumentFragment API\r\n    context.isHTML = true; // in HTML namespace (case-insensitive match)\r\n    context.getElementsByTagName = Element.prototype.getElementsByTagName;\r\n    context.nextElement =\r\n      Object.getOwnPropertyDescriptor(Element.prototype, 'firstElementChild').\r\n      get;\r\n    // invoke zest\r\n    var nodes = select(selector, context);\r\n    return nodes.item ? nodes : new NodeList(nodes);\r\n  }},\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n      return new DocumentFragment(this.ownerDocument);\r\n  }},\r\n  isEqual: { value: function isEqual(n) {\r\n      // Any two document fragments are shallowly equal.\r\n      // Node.isEqualNode() will test their children for equality\r\n      return true;\r\n  }},\r\n\r\n  // Non-standard, but useful (github issue #73)\r\n  innerHTML: {\r\n    get: function() { return this.serialize(); },\r\n    set: utils.nyi\r\n  },\r\n  outerHTML: {\r\n    get: function() { return this.serialize(); },\r\n    set: utils.nyi\r\n  },\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Eb2N1bWVudEZyYWdtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixlQUFlLG1CQUFPLENBQUMsMkVBQVk7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMscUZBQWlCO0FBQzdDLGNBQWMsbUJBQU8sQ0FBQyx5RUFBVztBQUNqQyxhQUFhLG1CQUFPLENBQUMsdUVBQVU7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLElBQUk7QUFDSixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQkFBMEI7QUFDaEQ7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQkFBc0IsMEJBQTBCO0FBQ2hEO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL0RvY3VtZW50RnJhZ21lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gIERvY3VtZW50RnJhZ21lbnQ7XHJcblxyXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xyXG52YXIgTm9kZUxpc3QgPSByZXF1aXJlKCcuL05vZGVMaXN0Jyk7XHJcbnZhciBDb250YWluZXJOb2RlID0gcmVxdWlyZSgnLi9Db250YWluZXJOb2RlJyk7XHJcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi9FbGVtZW50Jyk7XHJcbnZhciBzZWxlY3QgPSByZXF1aXJlKCcuL3NlbGVjdCcpO1xyXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XHJcblxyXG5mdW5jdGlvbiBEb2N1bWVudEZyYWdtZW50KGRvYykge1xyXG4gIENvbnRhaW5lck5vZGUuY2FsbCh0aGlzKTtcclxuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xyXG4gIHRoaXMub3duZXJEb2N1bWVudCA9IGRvYztcclxufVxyXG5cclxuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbnRhaW5lck5vZGUucHJvdG90eXBlLCB7XHJcbiAgbm9kZU5hbWU6IHsgdmFsdWU6ICcjZG9jdW1lbnQtZnJhZ21lbnQnIH0sXHJcbiAgbm9kZVZhbHVlOiB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKCkge31cclxuICB9LFxyXG4gIC8vIENvcHkgdGhlIHRleHQgY29udGVudCBnZXR0ZXIvc2V0dGVyIGZyb20gRWxlbWVudFxyXG4gIHRleHRDb250ZW50OiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAndGV4dENvbnRlbnQnKSxcclxuXHJcbiAgLy8gQ29weSB0aGUgdGV4dCBjb250ZW50IGdldHRlci9zZXR0ZXIgZnJvbSBFbGVtZW50XHJcbiAgaW5uZXJUZXh0OiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnQucHJvdG90eXBlLCAnaW5uZXJUZXh0JyksXHJcblxyXG4gIHF1ZXJ5U2VsZWN0b3I6IHsgdmFsdWU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcbiAgICAvLyBpbXBsZW1lbnQgaW4gdGVybXMgb2YgcXVlcnlTZWxlY3RvckFsbFxyXG4gICAgdmFyIG5vZGVzID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgIHJldHVybiBub2Rlcy5sZW5ndGggPyBub2Rlc1swXSA6IG51bGw7XHJcbiAgfX0sXHJcbiAgcXVlcnlTZWxlY3RvckFsbDogeyB2YWx1ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuICAgIC8vIGNyZWF0ZSBhIGNvbnRleHRcclxuICAgIHZhciBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcclxuICAgIC8vIGFkZCBzb21lIG1ldGhvZHMgdG8gdGhlIGNvbnRleHQgZm9yIHplc3QgaW1wbGVtZW50YXRpb24sIHdpdGhvdXRcclxuICAgIC8vIGFkZGluZyB0aGVtIHRvIHRoZSBwdWJsaWMgRG9jdW1lbnRGcmFnbWVudCBBUElcclxuICAgIGNvbnRleHQuaXNIVE1MID0gdHJ1ZTsgLy8gaW4gSFRNTCBuYW1lc3BhY2UgKGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2gpXHJcbiAgICBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU7XHJcbiAgICBjb250ZXh0Lm5leHRFbGVtZW50ID1cclxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFbGVtZW50LnByb3RvdHlwZSwgJ2ZpcnN0RWxlbWVudENoaWxkJykuXHJcbiAgICAgIGdldDtcclxuICAgIC8vIGludm9rZSB6ZXN0XHJcbiAgICB2YXIgbm9kZXMgPSBzZWxlY3Qoc2VsZWN0b3IsIGNvbnRleHQpO1xyXG4gICAgcmV0dXJuIG5vZGVzLml0ZW0gPyBub2RlcyA6IG5ldyBOb2RlTGlzdChub2Rlcyk7XHJcbiAgfX0sXHJcblxyXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xyXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEZyYWdtZW50KHRoaXMub3duZXJEb2N1bWVudCk7XHJcbiAgfX0sXHJcbiAgaXNFcXVhbDogeyB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbChuKSB7XHJcbiAgICAgIC8vIEFueSB0d28gZG9jdW1lbnQgZnJhZ21lbnRzIGFyZSBzaGFsbG93bHkgZXF1YWwuXHJcbiAgICAgIC8vIE5vZGUuaXNFcXVhbE5vZGUoKSB3aWxsIHRlc3QgdGhlaXIgY2hpbGRyZW4gZm9yIGVxdWFsaXR5XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gIH19LFxyXG5cclxuICAvLyBOb24tc3RhbmRhcmQsIGJ1dCB1c2VmdWwgKGdpdGh1YiBpc3N1ZSAjNzMpXHJcbiAgaW5uZXJIVE1MOiB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zZXJpYWxpemUoKTsgfSxcclxuICAgIHNldDogdXRpbHMubnlpXHJcbiAgfSxcclxuICBvdXRlckhUTUw6IHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnNlcmlhbGl6ZSgpOyB9LFxyXG4gICAgc2V0OiB1dGlscy5ueWlcclxuICB9LFxyXG5cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentType.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/DocumentType.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = DocumentType;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar Leaf = __webpack_require__(/*! ./Leaf */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Leaf.js\");\r\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ChildNode.js\");\r\n\r\nfunction DocumentType(ownerDocument, name, publicId, systemId) {\r\n  Leaf.call(this);\r\n  this.nodeType = Node.DOCUMENT_TYPE_NODE;\r\n  this.ownerDocument = ownerDocument || null;\r\n  this.name = name;\r\n  this.publicId = publicId || \"\";\r\n  this.systemId = systemId || \"\";\r\n}\r\n\r\nDocumentType.prototype = Object.create(Leaf.prototype, {\r\n  nodeName: { get: function() { return this.name; }},\r\n  nodeValue: {\r\n    get: function() { return null; },\r\n    set: function() {}\r\n  },\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n    return new DocumentType(this.ownerDocument, this.name, this.publicId, this.systemId);\r\n  }},\r\n\r\n  isEqual: { value: function isEqual(n) {\r\n    return this.name === n.name &&\r\n      this.publicId === n.publicId &&\r\n      this.systemId === n.systemId;\r\n  }}\r\n});\r\n\r\nObject.defineProperties(DocumentType.prototype, ChildNode);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Eb2N1bWVudFR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG1FQUFRO0FBQzNCLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixnQkFBZ0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrQkFBa0Isb0JBQW9CO0FBQ3BEO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLElBQUk7QUFDSjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvRG9jdW1lbnRUeXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50VHlwZTtcclxuXHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcbnZhciBMZWFmID0gcmVxdWlyZSgnLi9MZWFmJyk7XHJcbnZhciBDaGlsZE5vZGUgPSByZXF1aXJlKCcuL0NoaWxkTm9kZScpO1xyXG5cclxuZnVuY3Rpb24gRG9jdW1lbnRUeXBlKG93bmVyRG9jdW1lbnQsIG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xyXG4gIExlYWYuY2FsbCh0aGlzKTtcclxuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5ET0NVTUVOVF9UWVBFX05PREU7XHJcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudCB8fCBudWxsO1xyXG4gIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgdGhpcy5wdWJsaWNJZCA9IHB1YmxpY0lkIHx8IFwiXCI7XHJcbiAgdGhpcy5zeXN0ZW1JZCA9IHN5c3RlbUlkIHx8IFwiXCI7XHJcbn1cclxuXHJcbkRvY3VtZW50VHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExlYWYucHJvdG90eXBlLCB7XHJcbiAgbm9kZU5hbWU6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubmFtZTsgfX0sXHJcbiAgbm9kZVZhbHVlOiB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgIHNldDogZnVuY3Rpb24oKSB7fVxyXG4gIH0sXHJcblxyXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xyXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcclxuICAgIHJldHVybiBuZXcgRG9jdW1lbnRUeXBlKHRoaXMub3duZXJEb2N1bWVudCwgdGhpcy5uYW1lLCB0aGlzLnB1YmxpY0lkLCB0aGlzLnN5c3RlbUlkKTtcclxuICB9fSxcclxuXHJcbiAgaXNFcXVhbDogeyB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbChuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uYW1lID09PSBuLm5hbWUgJiZcclxuICAgICAgdGhpcy5wdWJsaWNJZCA9PT0gbi5wdWJsaWNJZCAmJlxyXG4gICAgICB0aGlzLnN5c3RlbUlkID09PSBuLnN5c3RlbUlkO1xyXG4gIH19XHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRG9jdW1lbnRUeXBlLnByb3RvdHlwZSwgQ2hpbGROb2RlKTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentType.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js":
/*!********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Element.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Element;\r\n\r\nvar xml = __webpack_require__(/*! ./xmlnames */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/xmlnames.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar NAMESPACE = utils.NAMESPACE;\r\nvar attributes = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/attributes.js\");\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\");\r\nvar NodeUtils = __webpack_require__(/*! ./NodeUtils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeUtils.js\");\r\nvar FilteredElementList = __webpack_require__(/*! ./FilteredElementList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/FilteredElementList.js\");\r\nvar DOMException = __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMException.js\");\r\nvar DOMTokenList = __webpack_require__(/*! ./DOMTokenList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMTokenList.js\");\r\nvar select = __webpack_require__(/*! ./select */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/select.js\");\r\nvar ContainerNode = __webpack_require__(/*! ./ContainerNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ContainerNode.js\");\r\nvar ChildNode = __webpack_require__(/*! ./ChildNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ChildNode.js\");\r\nvar NonDocumentTypeChildNode = __webpack_require__(/*! ./NonDocumentTypeChildNode */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NonDocumentTypeChildNode.js\");\r\nvar NamedNodeMap = __webpack_require__(/*! ./NamedNodeMap */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NamedNodeMap.js\");\r\n\r\nvar uppercaseCache = Object.create(null);\r\n\r\nfunction Element(doc, localName, namespaceURI, prefix) {\r\n  ContainerNode.call(this);\r\n  this.nodeType = Node.ELEMENT_NODE;\r\n  this.ownerDocument = doc;\r\n  this.localName = localName;\r\n  this.namespaceURI = namespaceURI;\r\n  this.prefix = prefix;\r\n  this._tagName = undefined;\r\n\r\n  // These properties maintain the set of attributes\r\n  this._attrsByQName = Object.create(null); // The qname->Attr map\r\n  this._attrsByLName = Object.create(null); // The ns|lname->Attr map\r\n  this._attrKeys = [];     // attr index -> ns|lname\r\n}\r\n\r\nfunction recursiveGetText(node, a) {\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    a.push(node._data);\r\n  }\r\n  else {\r\n    for(var i = 0, n = node.childNodes.length;  i < n; i++)\r\n      recursiveGetText(node.childNodes[i], a);\r\n  }\r\n}\r\n\r\nElement.prototype = Object.create(ContainerNode.prototype, {\r\n  isHTML: { get: function isHTML() {\r\n    return this.namespaceURI === NAMESPACE.HTML && this.ownerDocument.isHTML;\r\n  }},\r\n  tagName: { get: function tagName() {\r\n    if (this._tagName === undefined) {\r\n      var tn;\r\n      if (this.prefix === null) {\r\n        tn = this.localName;\r\n      } else {\r\n        tn = this.prefix + ':' + this.localName;\r\n      }\r\n      if (this.isHTML) {\r\n        var up = uppercaseCache[tn];\r\n        if (!up) {\r\n          // Converting to uppercase can be slow, so cache the conversion.\r\n          uppercaseCache[tn] = up = utils.toASCIIUpperCase(tn);\r\n        }\r\n        tn = up;\r\n      }\r\n      this._tagName = tn;\r\n    }\r\n    return this._tagName;\r\n  }},\r\n  nodeName: { get: function() { return this.tagName; }},\r\n  nodeValue: {\r\n    get: function() {\r\n      return null;\r\n    },\r\n    set: function() {}\r\n  },\r\n  textContent: {\r\n    get: function() {\r\n      var strings = [];\r\n      recursiveGetText(this, strings);\r\n      return strings.join('');\r\n    },\r\n    set: function(newtext) {\r\n      this.removeChildren();\r\n      if (newtext !== null && newtext !== undefined && newtext !== '') {\r\n        this._appendChild(this.ownerDocument.createTextNode(newtext));\r\n      }\r\n    }\r\n  },\r\n  innerText: {\r\n    get: function() {\r\n      var strings = [];\r\n      recursiveGetText(this, strings);\r\n      // Strip and collapse whitespace\r\n      // This doesn't 100% match the browser behavior,\r\n      // but should cover most of the cases. This is also similar to\r\n      // how Angular's renderer used to work: the `textContent` and `innerText`\r\n      // were almost equivalent from the renderer perspective.\r\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#differences_from_innertext\r\n      return strings.join('').replace(/[ \\t\\n\\f\\r]+/g, ' ').trim();\r\n    },\r\n    set: function(newtext) {\r\n      this.removeChildren();\r\n      if (newtext !== null && newtext !== undefined && newtext !== '') {\r\n        this._appendChild(this.ownerDocument.createTextNode(newtext));\r\n      }\r\n    }\r\n  },\r\n  innerHTML: {\r\n    get: function() {\r\n      return this.serialize();\r\n    },\r\n    set: utils.nyi\r\n  },\r\n  outerHTML: {\r\n    get: function() {\r\n      // \"the attribute must return the result of running the HTML fragment\r\n      // serialization algorithm on a fictional node whose only child is\r\n      // the context object\"\r\n      //\r\n      // The serialization logic is intentionally implemented in a separate\r\n      // `NodeUtils` helper instead of the more obvious choice of a private\r\n      // `_serializeOne()` method on the `Node.prototype` in order to avoid\r\n      // the megamorphic `this._serializeOne` property access, which reduces\r\n      // performance unnecessarily. If you need specialized behavior for a\r\n      // certain subclass, you'll need to implement that in `NodeUtils`.\r\n      // See https://github.com/fgnass/domino/pull/142 for more information.\r\n      return NodeUtils.serializeOne(this, { nodeType: 0 });\r\n    },\r\n    set: function(v) {\r\n      var document = this.ownerDocument;\r\n      var parent = this.parentNode;\r\n      if (parent === null) { return; }\r\n      if (parent.nodeType === Node.DOCUMENT_NODE) {\r\n        utils.NoModificationAllowedError();\r\n      }\r\n      if (parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n        parent = parent.ownerDocument.createElement(\"body\");\r\n      }\r\n      var parser = document.implementation.mozHTMLParser(\r\n        document._address,\r\n        parent\r\n      );\r\n      parser.parse(v===null?'':String(v), true);\r\n      this.replaceWith(parser._asDocumentFragment());\r\n    },\r\n  },\r\n\r\n  _insertAdjacent: { value: function _insertAdjacent(position, node) {\r\n    var first = false;\r\n    switch(position) {\r\n    case 'beforebegin':\r\n      first = true;\r\n      /* falls through */\r\n    case 'afterend':\r\n      var parent = this.parentNode;\r\n      if (parent === null) { return null; }\r\n      return parent.insertBefore(node, first ? this : this.nextSibling);\r\n    case 'afterbegin':\r\n      first = true;\r\n      /* falls through */\r\n    case 'beforeend':\r\n      return this.insertBefore(node, first ? this.firstChild : null);\r\n    default:\r\n      return utils.SyntaxError();\r\n    }\r\n  }},\r\n\r\n  insertAdjacentElement: { value: function insertAdjacentElement(position, element) {\r\n    if (element.nodeType !== Node.ELEMENT_NODE) {\r\n      throw new TypeError('not an element');\r\n    }\r\n    position = utils.toASCIILowerCase(String(position));\r\n    return this._insertAdjacent(position, element);\r\n  }},\r\n\r\n  insertAdjacentText: { value: function insertAdjacentText(position, data) {\r\n    var textNode = this.ownerDocument.createTextNode(data);\r\n    position = utils.toASCIILowerCase(String(position));\r\n    this._insertAdjacent(position, textNode);\r\n    // \"This method returns nothing because it existed before we had a chance\r\n    // to design it.\"\r\n  }},\r\n\r\n  insertAdjacentHTML: { value: function insertAdjacentHTML(position, text) {\r\n    position = utils.toASCIILowerCase(String(position));\r\n    text = String(text);\r\n    var context;\r\n    switch(position) {\r\n    case 'beforebegin':\r\n    case 'afterend':\r\n      context = this.parentNode;\r\n      if (context === null || context.nodeType === Node.DOCUMENT_NODE) {\r\n        utils.NoModificationAllowedError();\r\n      }\r\n      break;\r\n    case 'afterbegin':\r\n    case 'beforeend':\r\n      context = this;\r\n      break;\r\n    default:\r\n      utils.SyntaxError();\r\n    }\r\n    if ( (!(context instanceof Element)) || (\r\n      context.ownerDocument.isHTML &&\r\n      context.localName === 'html' &&\r\n      context.namespaceURI === NAMESPACE.HTML\r\n    ) ) {\r\n      context = context.ownerDocument.createElementNS(NAMESPACE.HTML, 'body');\r\n    }\r\n    var parser = this.ownerDocument.implementation.mozHTMLParser(\r\n      this.ownerDocument._address, context\r\n    );\r\n    parser.parse(text, true);\r\n    this._insertAdjacent(position, parser._asDocumentFragment());\r\n  }},\r\n\r\n  children: { get: function() {\r\n    if (!this._children) {\r\n      this._children = new ChildrenCollection(this);\r\n    }\r\n    return this._children;\r\n  }},\r\n\r\n  attributes: { get: function() {\r\n    if (!this._attributes) {\r\n      this._attributes = new AttributesArray(this);\r\n    }\r\n    return this._attributes;\r\n  }},\r\n\r\n\r\n  firstElementChild: { get: function() {\r\n    for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n      if (kid.nodeType === Node.ELEMENT_NODE) return kid;\r\n    }\r\n    return null;\r\n  }},\r\n\r\n  lastElementChild: { get: function() {\r\n    for (var kid = this.lastChild; kid !== null; kid = kid.previousSibling) {\r\n      if (kid.nodeType === Node.ELEMENT_NODE) return kid;\r\n    }\r\n    return null;\r\n  }},\r\n\r\n  childElementCount: { get: function() {\r\n    return this.children.length;\r\n  }},\r\n\r\n\r\n  // Return the next element, in source order, after this one or\r\n  // null if there are no more.  If root element is specified,\r\n  // then don't traverse beyond its subtree.\r\n  //\r\n  // This is not a DOM method, but is convenient for\r\n  // lazy traversals of the tree.\r\n  nextElement: { value: function(root) {\r\n    if (!root) root = this.ownerDocument.documentElement;\r\n    var next = this.firstElementChild;\r\n    if (!next) {\r\n      // don't use sibling if we're at root\r\n      if (this===root) return null;\r\n      next = this.nextElementSibling;\r\n    }\r\n    if (next) return next;\r\n\r\n    // If we can't go down or across, then we have to go up\r\n    // and across to the parent sibling or another ancestor's\r\n    // sibling.  Be careful, though: if we reach the root\r\n    // element, or if we reach the documentElement, then\r\n    // the traversal ends.\r\n    for(var parent = this.parentElement;\r\n      parent && parent !== root;\r\n      parent = parent.parentElement) {\r\n\r\n      next = parent.nextElementSibling;\r\n      if (next) return next;\r\n    }\r\n\r\n    return null;\r\n  }},\r\n\r\n  // XXX:\r\n  // Tests are currently failing for this function.\r\n  // Awaiting resolution of:\r\n  // http://lists.w3.org/Archives/Public/www-dom/2011JulSep/0016.html\r\n  getElementsByTagName: { value: function getElementsByTagName(lname) {\r\n    var filter;\r\n    if (!lname) return new NodeList();\r\n    if (lname === '*')\r\n      filter = function() { return true; };\r\n    else if (this.isHTML)\r\n      filter = htmlLocalNameElementFilter(lname);\r\n    else\r\n      filter = localNameElementFilter(lname);\r\n\r\n    return new FilteredElementList(this, filter);\r\n  }},\r\n\r\n  getElementsByTagNameNS: { value: function getElementsByTagNameNS(ns, lname){\r\n    var filter;\r\n    if (ns === '*' && lname === '*')\r\n      filter = function() { return true; };\r\n    else if (ns === '*')\r\n      filter = localNameElementFilter(lname);\r\n    else if (lname === '*')\r\n      filter = namespaceElementFilter(ns);\r\n    else\r\n      filter = namespaceLocalNameElementFilter(ns, lname);\r\n\r\n    return new FilteredElementList(this, filter);\r\n  }},\r\n\r\n  getElementsByClassName: { value: function getElementsByClassName(names){\r\n    names = String(names).trim();\r\n    if (names === '') {\r\n      var result = new NodeList(); // Empty node list\r\n      return result;\r\n    }\r\n    names = names.split(/[ \\t\\r\\n\\f]+/);  // Split on ASCII whitespace\r\n    return new FilteredElementList(this, classNamesElementFilter(names));\r\n  }},\r\n\r\n  getElementsByName: { value: function getElementsByName(name) {\r\n    return new FilteredElementList(this, elementNameFilter(String(name)));\r\n  }},\r\n\r\n  // Utility methods used by the public API methods above\r\n  clone: { value: function clone() {\r\n    var e;\r\n\r\n    // XXX:\r\n    // Modify this to use the constructor directly or\r\n    // avoid error checking in some other way. In case we try\r\n    // to clone an invalid node that the parser inserted.\r\n    //\r\n    if (this.namespaceURI !== NAMESPACE.HTML || this.prefix || !this.ownerDocument.isHTML) {\r\n      e = this.ownerDocument.createElementNS(\r\n        this.namespaceURI, (this.prefix !== null) ?\r\n          (this.prefix + ':' + this.localName) : this.localName\r\n      );\r\n    } else {\r\n      e = this.ownerDocument.createElement(this.localName);\r\n    }\r\n\r\n    for(var i = 0, n = this._attrKeys.length; i < n; i++) {\r\n      var lname = this._attrKeys[i];\r\n      var a = this._attrsByLName[lname];\r\n      var b = a.cloneNode();\r\n      b._setOwnerElement(e);\r\n      e._attrsByLName[lname] = b;\r\n      e._addQName(b);\r\n    }\r\n    e._attrKeys = this._attrKeys.concat();\r\n\r\n    return e;\r\n  }},\r\n\r\n  isEqual: { value: function isEqual(that) {\r\n    if (this.localName !== that.localName ||\r\n      this.namespaceURI !== that.namespaceURI ||\r\n      this.prefix !== that.prefix ||\r\n      this._numattrs !== that._numattrs)\r\n      return false;\r\n\r\n    // Compare the sets of attributes, ignoring order\r\n    // and ignoring attribute prefixes.\r\n    for(var i = 0, n = this._numattrs; i < n; i++) {\r\n      var a = this._attr(i);\r\n      if (!that.hasAttributeNS(a.namespaceURI, a.localName))\r\n        return false;\r\n      if (that.getAttributeNS(a.namespaceURI,a.localName) !== a.value)\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }},\r\n\r\n  // This is the 'locate a namespace prefix' algorithm from the\r\n  // DOM specification.  It is used by Node.lookupPrefix()\r\n  // (Be sure to compare DOM3 and DOM4 versions of spec.)\r\n  _lookupNamespacePrefix: { value: function _lookupNamespacePrefix(ns, originalElement) {\r\n    if (\r\n      this.namespaceURI &&\r\n      this.namespaceURI === ns &&\r\n      this.prefix !== null &&\r\n      originalElement.lookupNamespaceURI(this.prefix) === ns\r\n    ) {\r\n      return this.prefix;\r\n    }\r\n\r\n    for(var i = 0, n = this._numattrs; i < n; i++) {\r\n      var a = this._attr(i);\r\n      if (\r\n        a.prefix === 'xmlns' &&\r\n        a.value === ns &&\r\n        originalElement.lookupNamespaceURI(a.localName) === ns\r\n      ) {\r\n        return a.localName;\r\n      }\r\n    }\r\n\r\n    var parent = this.parentElement;\r\n    return parent ? parent._lookupNamespacePrefix(ns, originalElement) : null;\r\n  }},\r\n\r\n  // This is the 'locate a namespace' algorithm for Element nodes\r\n  // from the DOM Core spec.  It is used by Node#lookupNamespaceURI()\r\n  lookupNamespaceURI: { value: function lookupNamespaceURI(prefix) {\r\n    if (prefix === '' || prefix === undefined) { prefix = null; }\r\n    if (this.namespaceURI !== null && this.prefix === prefix)\r\n      return this.namespaceURI;\r\n\r\n    for(var i = 0, n = this._numattrs; i < n; i++) {\r\n      var a = this._attr(i);\r\n      if (a.namespaceURI === NAMESPACE.XMLNS) {\r\n        if (\r\n          (a.prefix === 'xmlns' && a.localName === prefix) ||\r\n          (prefix === null && a.prefix === null && a.localName === 'xmlns')\r\n        ) {\r\n          return a.value || null;\r\n        }\r\n      }\r\n    }\r\n\r\n    var parent = this.parentElement;\r\n    return parent ? parent.lookupNamespaceURI(prefix) : null;\r\n  }},\r\n\r\n  //\r\n  // Attribute handling methods and utilities\r\n  //\r\n\r\n  /*\r\n   * Attributes in the DOM are tricky:\r\n   *\r\n   * - there are the 8 basic get/set/has/removeAttribute{NS} methods\r\n   *\r\n   * - but many HTML attributes are also 'reflected' through IDL\r\n   *   attributes which means that they can be queried and set through\r\n   *   regular properties of the element.  There is just one attribute\r\n   *   value, but two ways to get and set it.\r\n   *\r\n   * - Different HTML element types have different sets of reflected\r\n     attributes.\r\n   *\r\n   * - attributes can also be queried and set through the .attributes\r\n   *   property of an element.  This property behaves like an array of\r\n   *   Attr objects.  The value property of each Attr is writeable, so\r\n   *   this is a third way to read and write attributes.\r\n   *\r\n   * - for efficiency, we really want to store attributes in some kind\r\n   *   of name->attr map.  But the attributes[] array is an array, not a\r\n   *   map, which is kind of unnatural.\r\n   *\r\n   * - When using namespaces and prefixes, and mixing the NS methods\r\n   *   with the non-NS methods, it is apparently actually possible for\r\n   *   an attributes[] array to have more than one attribute with the\r\n   *   same qualified name.  And certain methods must operate on only\r\n   *   the first attribute with such a name.  So for these methods, an\r\n   *   inefficient array-like data structure would be easier to\r\n   *   implement.\r\n   *\r\n   * - The attributes[] array is live, not a snapshot, so changes to the\r\n   *   attributes must be immediately visible through existing arrays.\r\n   *\r\n   * - When attributes are queried and set through IDL properties\r\n   *   (instead of the get/setAttributes() method or the attributes[]\r\n   *   array) they may be subject to type conversions, URL\r\n   *   normalization, etc., so some extra processing is required in that\r\n   *   case.\r\n   *\r\n   * - But access through IDL properties is probably the most common\r\n   *   case, so we'd like that to be as fast as possible.\r\n   *\r\n   * - We can't just store attribute values in their parsed idl form,\r\n   *   because setAttribute() has to return whatever string is passed to\r\n   *   getAttribute even if it is not a legal, parseable value. So\r\n   *   attribute values must be stored in unparsed string form.\r\n   *\r\n   * - We need to be able to send change notifications or mutation\r\n   *   events of some sort to the renderer whenever an attribute value\r\n   *   changes, regardless of the way in which it changes.\r\n   *\r\n   * - Some attributes, such as id and class affect other parts of the\r\n   *   DOM API, like getElementById and getElementsByClassName and so\r\n   *   for efficiency, we need to specially track changes to these\r\n   *   special attributes.\r\n   *\r\n   * - Some attributes like class have different names (className) when\r\n   *   reflected.\r\n   *\r\n   * - Attributes whose names begin with the string 'data-' are treated\r\n     specially.\r\n   *\r\n   * - Reflected attributes that have a boolean type in IDL have special\r\n   *   behavior: setting them to false (in IDL) is the same as removing\r\n   *   them with removeAttribute()\r\n   *\r\n   * - numeric attributes (like HTMLElement.tabIndex) can have default\r\n   *   values that must be returned by the idl getter even if the\r\n   *   content attribute does not exist. (The default tabIndex value\r\n   *   actually varies based on the type of the element, so that is a\r\n   *   tricky one).\r\n   *\r\n   * See\r\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/urls.html#reflect\r\n   * for rules on how attributes are reflected.\r\n   *\r\n   */\r\n\r\n  getAttribute: { value: function getAttribute(qname) {\r\n    var attr = this.getAttributeNode(qname);\r\n    return attr ? attr.value : null;\r\n  }},\r\n\r\n  getAttributeNS: { value: function getAttributeNS(ns, lname) {\r\n    var attr = this.getAttributeNodeNS(ns, lname);\r\n    return attr ? attr.value : null;\r\n  }},\r\n\r\n  getAttributeNode: { value: function getAttributeNode(qname) {\r\n    qname = String(qname);\r\n    if (/[A-Z]/.test(qname) && this.isHTML)\r\n      qname = utils.toASCIILowerCase(qname);\r\n    var attr = this._attrsByQName[qname];\r\n    if (!attr) return null;\r\n\r\n    if (Array.isArray(attr))  // If there is more than one\r\n      attr = attr[0];         // use the first\r\n\r\n    return attr;\r\n  }},\r\n\r\n  getAttributeNodeNS: { value: function getAttributeNodeNS(ns, lname) {\r\n    ns = (ns === undefined || ns === null) ? '' : String(ns);\r\n    lname = String(lname);\r\n    var attr = this._attrsByLName[ns + '|' + lname];\r\n    return attr ? attr : null;\r\n  }},\r\n\r\n  hasAttribute: { value: function hasAttribute(qname) {\r\n    qname = String(qname);\r\n    if (/[A-Z]/.test(qname) && this.isHTML)\r\n      qname = utils.toASCIILowerCase(qname);\r\n    return this._attrsByQName[qname] !== undefined;\r\n  }},\r\n\r\n  hasAttributeNS: { value: function hasAttributeNS(ns, lname) {\r\n    ns = (ns === undefined || ns === null) ? '' : String(ns);\r\n    lname = String(lname);\r\n    var key = ns + '|' + lname;\r\n    return this._attrsByLName[key] !== undefined;\r\n  }},\r\n\r\n  hasAttributes: { value: function hasAttributes() {\r\n    return this._numattrs > 0;\r\n  }},\r\n\r\n  toggleAttribute: { value: function toggleAttribute(qname, force) {\r\n    qname = String(qname);\r\n    if (!xml.isValidName(qname)) utils.InvalidCharacterError();\r\n    if (/[A-Z]/.test(qname) && this.isHTML)\r\n      qname = utils.toASCIILowerCase(qname);\r\n    var a = this._attrsByQName[qname];\r\n    if (a === undefined) {\r\n      if (force === undefined || force === true) {\r\n        this._setAttribute(qname, '');\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      if (force === undefined || force === false) {\r\n        this.removeAttribute(qname);\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n  }},\r\n\r\n  // Set the attribute without error checking. The parser uses this.\r\n  _setAttribute: { value: function _setAttribute(qname, value) {\r\n    // XXX: the spec says that this next search should be done\r\n    // on the local name, but I think that is an error.\r\n    // email pending on www-dom about it.\r\n    var attr = this._attrsByQName[qname];\r\n    var isnew;\r\n    if (!attr) {\r\n      attr = this._newattr(qname);\r\n      isnew = true;\r\n    }\r\n    else {\r\n      if (Array.isArray(attr)) attr = attr[0];\r\n    }\r\n\r\n    // Now set the attribute value on the new or existing Attr object.\r\n    // The Attr.value setter method handles mutation events, etc.\r\n    attr.value = value;\r\n    if (this._attributes) this._attributes[qname] = attr;\r\n    if (isnew && this._newattrhook) this._newattrhook(qname, value);\r\n  }},\r\n\r\n  // Check for errors, and then set the attribute\r\n  setAttribute: { value: function setAttribute(qname, value) {\r\n    qname = String(qname);\r\n    if (!xml.isValidName(qname)) utils.InvalidCharacterError();\r\n    if (/[A-Z]/.test(qname) && this.isHTML)\r\n      qname = utils.toASCIILowerCase(qname);\r\n    this._setAttribute(qname, String(value));\r\n  }},\r\n\r\n\r\n  // The version with no error checking used by the parser\r\n  _setAttributeNS: { value: function _setAttributeNS(ns, qname, value) {\r\n    var pos = qname.indexOf(':'), prefix, lname;\r\n    if (pos < 0) {\r\n      prefix = null;\r\n      lname = qname;\r\n    }\r\n    else {\r\n      prefix = qname.substring(0, pos);\r\n      lname = qname.substring(pos+1);\r\n    }\r\n\r\n    if (ns === '' || ns === undefined) ns = null;\r\n    var key = (ns === null ? '' : ns) + '|' + lname;\r\n\r\n    var attr = this._attrsByLName[key];\r\n    var isnew;\r\n    if (!attr) {\r\n      attr = new Attr(this, lname, prefix, ns);\r\n      isnew = true;\r\n      this._attrsByLName[key] = attr;\r\n      if (this._attributes) {\r\n        this._attributes[this._attrKeys.length] = attr;\r\n      }\r\n      this._attrKeys.push(key);\r\n\r\n      // We also have to make the attr searchable by qname.\r\n      // But we have to be careful because there may already\r\n      // be an attr with this qname.\r\n      this._addQName(attr);\r\n    }\r\n    else if (false /* changed in DOM 4 */) {}\r\n    attr.value = value; // Automatically sends mutation event\r\n    if (isnew && this._newattrhook) this._newattrhook(qname, value);\r\n  }},\r\n\r\n  // Do error checking then call _setAttributeNS\r\n  setAttributeNS: { value: function setAttributeNS(ns, qname, value) {\r\n    // Convert parameter types according to WebIDL\r\n    ns = (ns === null || ns === undefined || ns === '') ? null : String(ns);\r\n    qname = String(qname);\r\n    if (!xml.isValidQName(qname)) utils.InvalidCharacterError();\r\n\r\n    var pos = qname.indexOf(':');\r\n    var prefix = (pos < 0) ? null : qname.substring(0, pos);\r\n\r\n    if ((prefix !== null && ns === null) ||\r\n      (prefix === 'xml' && ns !== NAMESPACE.XML) ||\r\n      ((qname === 'xmlns' || prefix === 'xmlns') &&\r\n       (ns !== NAMESPACE.XMLNS)) ||\r\n      (ns === NAMESPACE.XMLNS &&\r\n       !(qname === 'xmlns' || prefix === 'xmlns')))\r\n      utils.NamespaceError();\r\n\r\n    this._setAttributeNS(ns, qname, String(value));\r\n  }},\r\n\r\n  setAttributeNode: { value: function setAttributeNode(attr) {\r\n    if (attr.ownerElement !== null && attr.ownerElement !== this) {\r\n      throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\r\n    }\r\n    var result = null;\r\n    var oldAttrs = this._attrsByQName[attr.name];\r\n    if (oldAttrs) {\r\n      if (!Array.isArray(oldAttrs)) { oldAttrs = [ oldAttrs ]; }\r\n      if (oldAttrs.some(function(a) { return a===attr; })) {\r\n        return attr;\r\n      } else if (attr.ownerElement !== null) {\r\n        throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\r\n      }\r\n      oldAttrs.forEach(function(a) { this.removeAttributeNode(a); }, this);\r\n      result = oldAttrs[0];\r\n    }\r\n    this.setAttributeNodeNS(attr);\r\n    return result;\r\n  }},\r\n\r\n  setAttributeNodeNS: { value: function setAttributeNodeNS(attr) {\r\n    if (attr.ownerElement !== null) {\r\n      throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);\r\n    }\r\n    var ns = attr.namespaceURI;\r\n    var key = (ns === null ? '' : ns) + '|' + attr.localName;\r\n    var oldAttr = this._attrsByLName[key];\r\n    if (oldAttr) { this.removeAttributeNode(oldAttr); }\r\n    attr._setOwnerElement(this);\r\n    this._attrsByLName[key] = attr;\r\n    if (this._attributes) {\r\n      this._attributes[this._attrKeys.length] = attr;\r\n    }\r\n    this._attrKeys.push(key);\r\n    this._addQName(attr);\r\n    if (this._newattrhook) this._newattrhook(attr.name, attr.value);\r\n    return oldAttr || null;\r\n  }},\r\n\r\n  removeAttribute: { value: function removeAttribute(qname) {\r\n    qname = String(qname);\r\n    if (/[A-Z]/.test(qname) && this.isHTML)\r\n      qname = utils.toASCIILowerCase(qname);\r\n\r\n    var attr = this._attrsByQName[qname];\r\n    if (!attr) return;\r\n\r\n    // If there is more than one match for this qname\r\n    // so don't delete the qname mapping, just remove the first\r\n    // element from it.\r\n    if (Array.isArray(attr)) {\r\n      if (attr.length > 2) {\r\n        attr = attr.shift();  // remove it from the array\r\n      }\r\n      else {\r\n        this._attrsByQName[qname] = attr[1];\r\n        attr = attr[0];\r\n      }\r\n    }\r\n    else {\r\n      // only a single match, so remove the qname mapping\r\n      this._attrsByQName[qname] = undefined;\r\n    }\r\n\r\n    var ns = attr.namespaceURI;\r\n    // Now attr is the removed attribute.  Figure out its\r\n    // ns+lname key and remove it from the other mapping as well.\r\n    var key = (ns === null ? '' : ns) + '|' + attr.localName;\r\n    this._attrsByLName[key] = undefined;\r\n\r\n    var i = this._attrKeys.indexOf(key);\r\n    if (this._attributes) {\r\n      Array.prototype.splice.call(this._attributes, i, 1);\r\n      this._attributes[qname] = undefined;\r\n    }\r\n    this._attrKeys.splice(i, 1);\r\n\r\n    // Onchange handler for the attribute\r\n    var onchange = attr.onchange;\r\n    attr._setOwnerElement(null);\r\n    if (onchange) {\r\n      onchange.call(attr, this, attr.localName, attr.value, null);\r\n    }\r\n    // Mutation event\r\n    if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);\r\n  }},\r\n\r\n  removeAttributeNS: { value: function removeAttributeNS(ns, lname) {\r\n    ns = (ns === undefined || ns === null) ? '' : String(ns);\r\n    lname = String(lname);\r\n    var key = ns + '|' + lname;\r\n    var attr = this._attrsByLName[key];\r\n    if (!attr) return;\r\n\r\n    this._attrsByLName[key] = undefined;\r\n\r\n    var i = this._attrKeys.indexOf(key);\r\n    if (this._attributes) {\r\n      Array.prototype.splice.call(this._attributes, i, 1);\r\n    }\r\n    this._attrKeys.splice(i, 1);\r\n\r\n    // Now find the same Attr object in the qname mapping and remove it\r\n    // But be careful because there may be more than one match.\r\n    this._removeQName(attr);\r\n\r\n    // Onchange handler for the attribute\r\n    var onchange = attr.onchange;\r\n    attr._setOwnerElement(null);\r\n    if (onchange) {\r\n      onchange.call(attr, this, attr.localName, attr.value, null);\r\n    }\r\n    // Mutation event\r\n    if (this.rooted) this.ownerDocument.mutateRemoveAttr(attr);\r\n  }},\r\n\r\n  removeAttributeNode: { value: function removeAttributeNode(attr) {\r\n    var ns = attr.namespaceURI;\r\n    var key = (ns === null ? '' : ns) + '|' + attr.localName;\r\n    if (this._attrsByLName[key] !== attr) {\r\n      utils.NotFoundError();\r\n    }\r\n    this.removeAttributeNS(ns, attr.localName);\r\n    return attr;\r\n  }},\r\n\r\n  getAttributeNames: { value: function getAttributeNames() {\r\n    var elt = this;\r\n    return this._attrKeys.map(function(key) {\r\n      return elt._attrsByLName[key].name;\r\n    });\r\n  }},\r\n\r\n  // This 'raw' version of getAttribute is used by the getter functions\r\n  // of reflected attributes. It skips some error checking and\r\n  // namespace steps\r\n  _getattr: { value: function _getattr(qname) {\r\n    // Assume that qname is already lowercased, so don't do it here.\r\n    // Also don't check whether attr is an array: a qname with no\r\n    // prefix will never have two matching Attr objects (because\r\n    // setAttributeNS doesn't allow a non-null namespace with a\r\n    // null prefix.\r\n    var attr = this._attrsByQName[qname];\r\n    return attr ? attr.value : null;\r\n  }},\r\n\r\n  // The raw version of setAttribute for reflected idl attributes.\r\n  _setattr: { value: function _setattr(qname, value) {\r\n    var attr = this._attrsByQName[qname];\r\n    var isnew;\r\n    if (!attr) {\r\n      attr = this._newattr(qname);\r\n      isnew = true;\r\n    }\r\n    attr.value = String(value);\r\n    if (this._attributes) this._attributes[qname] = attr;\r\n    if (isnew && this._newattrhook) this._newattrhook(qname, value);\r\n  }},\r\n\r\n  // Create a new Attr object, insert it, and return it.\r\n  // Used by setAttribute() and by set()\r\n  _newattr: { value: function _newattr(qname) {\r\n    var attr = new Attr(this, qname, null, null);\r\n    var key = '|' + qname;\r\n    this._attrsByQName[qname] = attr;\r\n    this._attrsByLName[key] = attr;\r\n    if (this._attributes) {\r\n      this._attributes[this._attrKeys.length] = attr;\r\n    }\r\n    this._attrKeys.push(key);\r\n    return attr;\r\n  }},\r\n\r\n  // Add a qname->Attr mapping to the _attrsByQName object, taking into\r\n  // account that there may be more than one attr object with the\r\n  // same qname\r\n  _addQName: { value: function(attr) {\r\n    var qname = attr.name;\r\n    var existing = this._attrsByQName[qname];\r\n    if (!existing) {\r\n      this._attrsByQName[qname] = attr;\r\n    }\r\n    else if (Array.isArray(existing)) {\r\n      existing.push(attr);\r\n    }\r\n    else {\r\n      this._attrsByQName[qname] = [existing, attr];\r\n    }\r\n    if (this._attributes) this._attributes[qname] = attr;\r\n  }},\r\n\r\n  // Remove a qname->Attr mapping to the _attrsByQName object, taking into\r\n  // account that there may be more than one attr object with the\r\n  // same qname\r\n  _removeQName: { value: function(attr) {\r\n    var qname = attr.name;\r\n    var target = this._attrsByQName[qname];\r\n\r\n    if (Array.isArray(target)) {\r\n      var idx = target.indexOf(attr);\r\n      utils.assert(idx !== -1); // It must be here somewhere\r\n      if (target.length === 2) {\r\n        this._attrsByQName[qname] = target[1-idx];\r\n        if (this._attributes) {\r\n          this._attributes[qname] = this._attrsByQName[qname];\r\n        }\r\n      } else {\r\n        target.splice(idx, 1);\r\n        if (this._attributes && this._attributes[qname] === attr) {\r\n          this._attributes[qname] = target[0];\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      utils.assert(target === attr);  // If only one, it must match\r\n      this._attrsByQName[qname] = undefined;\r\n      if (this._attributes) {\r\n        this._attributes[qname] = undefined;\r\n      }\r\n    }\r\n  }},\r\n\r\n  // Return the number of attributes\r\n  _numattrs: { get: function() { return this._attrKeys.length; }},\r\n  // Return the nth Attr object\r\n  _attr: { value: function(n) {\r\n    return this._attrsByLName[this._attrKeys[n]];\r\n  }},\r\n\r\n  // Define getters and setters for an 'id' property that reflects\r\n  // the content attribute 'id'.\r\n  id: attributes.property({name: 'id'}),\r\n\r\n  // Define getters and setters for a 'className' property that reflects\r\n  // the content attribute 'class'.\r\n  className: attributes.property({name: 'class'}),\r\n\r\n  classList: { get: function() {\r\n    var self = this;\r\n    if (this._classList) {\r\n      return this._classList;\r\n    }\r\n    var dtlist = new DOMTokenList(\r\n      function() {\r\n        return self.className || \"\";\r\n      },\r\n      function(v) {\r\n        self.className = v;\r\n      }\r\n    );\r\n    this._classList = dtlist;\r\n    return dtlist;\r\n  }, set: function(v) { this.className = v; }},\r\n\r\n  matches: { value: function(selector) {\r\n    return select.matches(this, selector);\r\n  }},\r\n\r\n  closest: { value: function(selector) {\r\n    var el = this;\r\n\tdo {\r\n\t  if (el.matches && el.matches(selector)) { return el; }\r\n\t  el = el.parentElement || el.parentNode;\r\n\t} while (el !== null && el.nodeType === Node.ELEMENT_NODE);\r\n\treturn null;\r\n  }},\r\n\r\n  querySelector: { value: function(selector) {\r\n    return select(selector, this)[0];\r\n  }},\r\n\r\n  querySelectorAll: { value: function(selector) {\r\n    var nodes = select(selector, this);\r\n    return nodes.item ? nodes : new NodeList(nodes);\r\n  }}\r\n\r\n});\r\n\r\nObject.defineProperties(Element.prototype, ChildNode);\r\nObject.defineProperties(Element.prototype, NonDocumentTypeChildNode);\r\n\r\n// Register special handling for the id attribute\r\nattributes.registerChangeHandler(Element, 'id',\r\n function(element, lname, oldval, newval) {\r\n   if (element.rooted) {\r\n     if (oldval) {\r\n       element.ownerDocument.delId(oldval, element);\r\n     }\r\n     if (newval) {\r\n       element.ownerDocument.addId(newval, element);\r\n     }\r\n   }\r\n }\r\n);\r\nattributes.registerChangeHandler(Element, 'class',\r\n function(element, lname, oldval, newval) {\r\n   if (element._classList) { element._classList._update(); }\r\n }\r\n);\r\n\r\n// The Attr class represents a single attribute.  The values in\r\n// _attrsByQName and _attrsByLName are instances of this class.\r\nfunction Attr(elt, lname, prefix, namespace, value) {\r\n  // localName and namespace are constant for any attr object.\r\n  // But value may change.  And so can prefix, and so, therefore can name.\r\n  this.localName = lname;\r\n  this.prefix = (prefix===null || prefix==='') ? null : ('' + prefix);\r\n  this.namespaceURI = (namespace===null || namespace==='') ? null : ('' + namespace);\r\n  this.data = value;\r\n  // Set ownerElement last to ensure it is hooked up to onchange handler\r\n  this._setOwnerElement(elt);\r\n}\r\n\r\n// In DOM 3 Attr was supposed to extend Node; in DOM 4 that was abandoned.\r\nAttr.prototype = Object.create(Object.prototype, {\r\n  ownerElement: {\r\n    get: function() { return this._ownerElement; },\r\n  },\r\n  _setOwnerElement: { value: function _setOwnerElement(elt) {\r\n    this._ownerElement = elt;\r\n    if (this.prefix === null && this.namespaceURI === null && elt) {\r\n      this.onchange = elt._attributeChangeHandlers[this.localName];\r\n    } else {\r\n      this.onchange = null;\r\n    }\r\n  }},\r\n\r\n  name: { get: function() {\r\n    return this.prefix ? this.prefix + ':' + this.localName : this.localName;\r\n  }},\r\n\r\n  specified: { get: function() {\r\n    // Deprecated\r\n    return true;\r\n  }},\r\n\r\n  value: {\r\n    get: function() {\r\n      return this.data;\r\n    },\r\n    set: function(value) {\r\n      var oldval = this.data;\r\n      value = (value === undefined) ? '' : value + '';\r\n      if (value === oldval) return;\r\n\r\n      this.data = value;\r\n\r\n      // Run the onchange hook for the attribute\r\n      // if there is one.\r\n      if (this.ownerElement) {\r\n        if (this.onchange)\r\n          this.onchange(this.ownerElement,this.localName, oldval, value);\r\n\r\n        // Generate a mutation event if the element is rooted\r\n        if (this.ownerElement.rooted)\r\n          this.ownerElement.ownerDocument.mutateAttr(this, oldval);\r\n      }\r\n    },\r\n  },\r\n\r\n  cloneNode: { value: function cloneNode(deep) {\r\n    // Both this method and Document#createAttribute*() create unowned Attrs\r\n    return new Attr(\r\n      null, this.localName, this.prefix, this.namespaceURI, this.data\r\n    );\r\n  }},\r\n\r\n  // Legacy aliases (see gh#70 and https://dom.spec.whatwg.org/#interface-attr)\r\n  nodeType: { get: function() { return Node.ATTRIBUTE_NODE; } },\r\n  nodeName: { get: function() { return this.name; } },\r\n  nodeValue: {\r\n    get: function() { return this.value; },\r\n    set: function(v) { this.value = v; },\r\n  },\r\n  textContent: {\r\n    get: function() { return this.value; },\r\n    set: function(v) {\r\n      if (v === null || v === undefined) { v = ''; }\r\n      this.value = v;\r\n    },\r\n  },\r\n  innerText: {\r\n    get: function() { return this.value; },\r\n    set: function(v) {\r\n      if (v === null || v === undefined) { v = ''; }\r\n      this.value = v;\r\n    },\r\n  },\r\n});\r\n// Sneakily export this class for use by Document.createAttribute()\r\nElement._Attr = Attr;\r\n\r\n// The attributes property of an Element will be an instance of this class.\r\n// This class is really just a dummy, though. It only defines a length\r\n// property and an item() method. The AttrArrayProxy that\r\n// defines the public API just uses the Element object itself.\r\nfunction AttributesArray(elt) {\r\n  NamedNodeMap.call(this, elt);\r\n  for (var name in elt._attrsByQName) {\r\n    this[name] = elt._attrsByQName[name];\r\n  }\r\n  for (var i = 0; i < elt._attrKeys.length; i++) {\r\n    this[i] = elt._attrsByLName[elt._attrKeys[i]];\r\n  }\r\n}\r\nAttributesArray.prototype = Object.create(NamedNodeMap.prototype, {\r\n  length: { get: function() {\r\n    return this.element._attrKeys.length;\r\n  }, set: function() { /* ignore */ } },\r\n  item: { value: function(n) {\r\n    /* jshint bitwise: false */\r\n    n = n >>> 0;\r\n    if (n >= this.length) { return null; }\r\n    return this.element._attrsByLName[this.element._attrKeys[n]];\r\n    /* jshint bitwise: true */\r\n  } },\r\n});\r\n\r\n// We can't make direct array access work (without Proxies, node >=6)\r\n// but we can make `Array.from(node.attributes)` and for-of loops work.\r\nif (globalThis.Symbol?.iterator) {\r\n    AttributesArray.prototype[globalThis.Symbol.iterator] = function() {\r\n        var i=0, n=this.length, self=this;\r\n        return {\r\n            next: function() {\r\n                if (i<n) return { value: self.item(i++) };\r\n                return { done: true };\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n\r\n// The children property of an Element will be an instance of this class.\r\n// It defines length, item() and namedItem() and will be wrapped by an\r\n// HTMLCollection when exposed through the DOM.\r\nfunction ChildrenCollection(e) {\r\n  this.element = e;\r\n  this.updateCache();\r\n}\r\n\r\nChildrenCollection.prototype = Object.create(Object.prototype, {\r\n  length: { get: function() {\r\n    this.updateCache();\r\n    return this.childrenByNumber.length;\r\n  } },\r\n  item: { value: function item(n) {\r\n    this.updateCache();\r\n    return this.childrenByNumber[n] || null;\r\n  } },\r\n\r\n  namedItem: { value: function namedItem(name) {\r\n    this.updateCache();\r\n    return this.childrenByName[name] || null;\r\n  } },\r\n\r\n  // This attribute returns the entire name->element map.\r\n  // It is not part of the HTMLCollection API, but we need it in\r\n  // src/HTMLCollectionProxy\r\n  namedItems: { get: function() {\r\n    this.updateCache();\r\n    return this.childrenByName;\r\n  } },\r\n\r\n  updateCache: { value: function updateCache() {\r\n    var namedElts = /^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;\r\n    if (this.lastModTime !== this.element.lastModTime) {\r\n      this.lastModTime = this.element.lastModTime;\r\n\r\n      var n = this.childrenByNumber && this.childrenByNumber.length || 0;\r\n      for(var i = 0; i < n; i++) {\r\n        this[i] = undefined;\r\n      }\r\n\r\n      this.childrenByNumber = [];\r\n      this.childrenByName = Object.create(null);\r\n\r\n      for (var c = this.element.firstChild; c !== null; c = c.nextSibling) {\r\n        if (c.nodeType === Node.ELEMENT_NODE) {\r\n\r\n          this[this.childrenByNumber.length] = c;\r\n          this.childrenByNumber.push(c);\r\n\r\n          // XXX Are there any requirements about the namespace\r\n          // of the id property?\r\n          var id = c.getAttribute('id');\r\n\r\n          // If there is an id that is not already in use...\r\n          if (id && !this.childrenByName[id])\r\n            this.childrenByName[id] = c;\r\n\r\n          // For certain HTML elements we check the name attribute\r\n          var name = c.getAttribute('name');\r\n          if (name &&\r\n            this.element.namespaceURI === NAMESPACE.HTML &&\r\n            namedElts.test(this.element.localName) &&\r\n            !this.childrenByName[name])\r\n            this.childrenByName[id] = c;\r\n        }\r\n      }\r\n    }\r\n  } },\r\n});\r\n\r\n// These functions return predicates for filtering elements.\r\n// They're used by the Document and Element classes for methods like\r\n// getElementsByTagName and getElementsByClassName\r\n\r\nfunction localNameElementFilter(lname) {\r\n  return function(e) { return e.localName === lname; };\r\n}\r\n\r\nfunction htmlLocalNameElementFilter(lname) {\r\n  var lclname = utils.toASCIILowerCase(lname);\r\n  if (lclname === lname)\r\n    return localNameElementFilter(lname);\r\n\r\n  return function(e) {\r\n    return e.isHTML ? e.localName === lclname : e.localName === lname;\r\n  };\r\n}\r\n\r\nfunction namespaceElementFilter(ns) {\r\n  return function(e) { return e.namespaceURI === ns; };\r\n}\r\n\r\nfunction namespaceLocalNameElementFilter(ns, lname) {\r\n  return function(e) {\r\n    return e.namespaceURI === ns && e.localName === lname;\r\n  };\r\n}\r\n\r\nfunction classNamesElementFilter(names) {\r\n  return function(e) {\r\n    return names.every(function(n) { return e.classList.contains(n); });\r\n  };\r\n}\r\n\r\nfunction elementNameFilter(name) {\r\n  return function(e) {\r\n    // All the *HTML elements* in the document with the given name attribute\r\n    if (e.namespaceURI !== NAMESPACE.HTML) { return false; }\r\n    return e.getAttribute('name') === name;\r\n  };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js":
/*!******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Event.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = Event;\r\n\r\nEvent.CAPTURING_PHASE = 1;\r\nEvent.AT_TARGET = 2;\r\nEvent.BUBBLING_PHASE = 3;\r\n\r\nfunction Event(type, dictionary) {\r\n  // Initialize basic event properties\r\n  this.type = '';\r\n  this.target = null;\r\n  this.currentTarget = null;\r\n  this.eventPhase = Event.AT_TARGET;\r\n  this.bubbles = false;\r\n  this.cancelable = false;\r\n  this.isTrusted = false;\r\n  this.defaultPrevented = false;\r\n  this.timeStamp = Date.now();\r\n\r\n  // Initialize internal flags\r\n  // XXX: Would it be better to inherit these defaults from the prototype?\r\n  this._propagationStopped = false;\r\n  this._immediatePropagationStopped = false;\r\n  this._initialized = true;\r\n  this._dispatching = false;\r\n\r\n  // Now initialize based on the constructor arguments (if any)\r\n  if (type) this.type = type;\r\n  if (dictionary) {\r\n    for(var p in dictionary) {\r\n      this[p] = dictionary[p];\r\n    }\r\n  }\r\n}\r\n\r\nEvent.prototype = Object.create(Object.prototype, {\r\n  constructor: { value: Event },\r\n  stopPropagation: { value: function stopPropagation() {\r\n    this._propagationStopped = true;\r\n  }},\r\n\r\n  stopImmediatePropagation: { value: function stopImmediatePropagation() {\r\n    this._propagationStopped = true;\r\n    this._immediatePropagationStopped = true;\r\n  }},\r\n\r\n  preventDefault: { value: function preventDefault() {\r\n    if (this.cancelable) this.defaultPrevented = true;\r\n  }},\r\n\r\n  initEvent: { value: function initEvent(type, bubbles, cancelable) {\r\n    this._initialized = true;\r\n    if (this._dispatching) return;\r\n\r\n    this._propagationStopped = false;\r\n    this._immediatePropagationStopped = false;\r\n    this.defaultPrevented = false;\r\n    this.isTrusted = false;\r\n\r\n    this.target = null;\r\n    this.type = type;\r\n    this.bubbles = bubbles;\r\n    this.cancelable = cancelable;\r\n  }},\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9FdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQixxQkFBcUI7QUFDckI7QUFDQSxJQUFJO0FBQ0o7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLElBQUk7QUFDSjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvRXZlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gRXZlbnQ7XHJcblxyXG5FdmVudC5DQVBUVVJJTkdfUEhBU0UgPSAxO1xyXG5FdmVudC5BVF9UQVJHRVQgPSAyO1xyXG5FdmVudC5CVUJCTElOR19QSEFTRSA9IDM7XHJcblxyXG5mdW5jdGlvbiBFdmVudCh0eXBlLCBkaWN0aW9uYXJ5KSB7XHJcbiAgLy8gSW5pdGlhbGl6ZSBiYXNpYyBldmVudCBwcm9wZXJ0aWVzXHJcbiAgdGhpcy50eXBlID0gJyc7XHJcbiAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XHJcbiAgdGhpcy5ldmVudFBoYXNlID0gRXZlbnQuQVRfVEFSR0VUO1xyXG4gIHRoaXMuYnViYmxlcyA9IGZhbHNlO1xyXG4gIHRoaXMuY2FuY2VsYWJsZSA9IGZhbHNlO1xyXG4gIHRoaXMuaXNUcnVzdGVkID0gZmFsc2U7XHJcbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XHJcbiAgdGhpcy50aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xyXG5cclxuICAvLyBJbml0aWFsaXplIGludGVybmFsIGZsYWdzXHJcbiAgLy8gWFhYOiBXb3VsZCBpdCBiZSBiZXR0ZXIgdG8gaW5oZXJpdCB0aGVzZSBkZWZhdWx0cyBmcm9tIHRoZSBwcm90b3R5cGU/XHJcbiAgdGhpcy5fcHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XHJcbiAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XHJcbiAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gIHRoaXMuX2Rpc3BhdGNoaW5nID0gZmFsc2U7XHJcblxyXG4gIC8vIE5vdyBpbml0aWFsaXplIGJhc2VkIG9uIHRoZSBjb25zdHJ1Y3RvciBhcmd1bWVudHMgKGlmIGFueSlcclxuICBpZiAodHlwZSkgdGhpcy50eXBlID0gdHlwZTtcclxuICBpZiAoZGljdGlvbmFyeSkge1xyXG4gICAgZm9yKHZhciBwIGluIGRpY3Rpb25hcnkpIHtcclxuICAgICAgdGhpc1twXSA9IGRpY3Rpb25hcnlbcF07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5FdmVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5wcm90b3R5cGUsIHtcclxuICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogRXZlbnQgfSxcclxuICBzdG9wUHJvcGFnYXRpb246IHsgdmFsdWU6IGZ1bmN0aW9uIHN0b3BQcm9wYWdhdGlvbigpIHtcclxuICAgIHRoaXMuX3Byb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XHJcbiAgfX0sXHJcblxyXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogeyB2YWx1ZTogZnVuY3Rpb24gc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkge1xyXG4gICAgdGhpcy5fcHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XHJcbiAgfX0sXHJcblxyXG4gIHByZXZlbnREZWZhdWx0OiB7IHZhbHVlOiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcclxuICAgIGlmICh0aGlzLmNhbmNlbGFibGUpIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcbiAgfX0sXHJcblxyXG4gIGluaXRFdmVudDogeyB2YWx1ZTogZnVuY3Rpb24gaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpIHtcclxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgIGlmICh0aGlzLl9kaXNwYXRjaGluZykgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuX3Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNUcnVzdGVkID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMuYnViYmxlcyA9IGJ1YmJsZXM7XHJcbiAgICB0aGlzLmNhbmNlbGFibGUgPSBjYW5jZWxhYmxlO1xyXG4gIH19LFxyXG5cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/EventTarget.js":
/*!************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/EventTarget.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\");\r\nvar MouseEvent = __webpack_require__(/*! ./MouseEvent */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/MouseEvent.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nmodule.exports = EventTarget;\r\n\r\nfunction EventTarget() {}\r\n\r\nEventTarget.prototype = {\r\n  // XXX\r\n  // See WebIDL §4.8 for details on object event handlers\r\n  // and how they should behave.  We actually have to accept\r\n  // any object to addEventListener... Can't type check it.\r\n  // on registration.\r\n\r\n  // XXX:\r\n  // Capturing event listeners are sort of rare.  I think I can optimize\r\n  // them so that dispatchEvent can skip the capturing phase (or much of\r\n  // it).  Each time a capturing listener is added, increment a flag on\r\n  // the target node and each of its ancestors.  Decrement when removed.\r\n  // And update the counter when nodes are added and removed from the\r\n  // tree as well.  Then, in dispatch event, the capturing phase can\r\n  // abort if it sees any node with a zero count.\r\n  addEventListener: function addEventListener(type, listener, capture) {\r\n    if (!listener) return;\r\n    if (capture === undefined) capture = false;\r\n    if (!this._listeners) this._listeners = Object.create(null);\r\n    if (!this._listeners[type]) this._listeners[type] = [];\r\n    var list = this._listeners[type];\r\n\r\n    // If this listener has already been registered, just return\r\n    for(var i = 0, n = list.length; i < n; i++) {\r\n      var l = list[i];\r\n      if (l.listener === listener && l.capture === capture)\r\n        return;\r\n    }\r\n\r\n    // Add an object to the list of listeners\r\n    var obj = { listener: listener, capture: capture };\r\n    if (typeof listener === 'function') obj.f = listener;\r\n    list.push(obj);\r\n  },\r\n\r\n  removeEventListener: function removeEventListener(type,\r\n                            listener,\r\n                            capture) {\r\n    if (capture === undefined) capture = false;\r\n    if (this._listeners) {\r\n      var list = this._listeners[type];\r\n      if (list) {\r\n        // Find the listener in the list and remove it\r\n        for(var i = 0, n = list.length; i < n; i++) {\r\n          var l = list[i];\r\n          if (l.listener === listener && l.capture === capture) {\r\n            if (list.length === 1) {\r\n              this._listeners[type] = undefined;\r\n            }\r\n            else {\r\n              list.splice(i, 1);\r\n            }\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  // This is the public API for dispatching untrusted public events.\r\n  // See _dispatchEvent for the implementation\r\n  dispatchEvent: function dispatchEvent(event) {\r\n    // Dispatch an untrusted event\r\n    return this._dispatchEvent(event, false);\r\n  },\r\n\r\n  //\r\n  // See DOMCore §4.4\r\n  // XXX: I'll probably need another version of this method for\r\n  // internal use, one that does not set isTrusted to false.\r\n  // XXX: see Document._dispatchEvent: perhaps that and this could\r\n  // call a common internal function with different settings of\r\n  // a trusted boolean argument\r\n  //\r\n  // XXX:\r\n  // The spec has changed in how to deal with handlers registered\r\n  // on idl or content attributes rather than with addEventListener.\r\n  // Used to say that they always ran first.  That's how webkit does it\r\n  // Spec now says that they run in a position determined by\r\n  // when they were first set.  FF does it that way.  See:\r\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#event-handlers\r\n  //\r\n  _dispatchEvent: function _dispatchEvent(event, trusted) {\r\n    if (typeof trusted !== 'boolean') trusted = false;\r\n    function invoke(target, event) {\r\n      var type = event.type, phase = event.eventPhase;\r\n      event.currentTarget = target;\r\n\r\n      // If there was an individual handler defined, invoke it first\r\n      // XXX: see comment above: this shouldn't always be first.\r\n      if (phase !== Event.CAPTURING_PHASE &&\r\n        target._handlers && target._handlers[type])\r\n      {\r\n        var handler = target._handlers[type];\r\n        var rv;\r\n        if (typeof handler === 'function') {\r\n          rv=handler.call(event.currentTarget, event);\r\n        }\r\n        else {\r\n          var f = handler.handleEvent;\r\n          if (typeof f !== 'function')\r\n            throw new TypeError('handleEvent property of ' +\r\n                                'event handler object is' +\r\n                                'not a function.');\r\n          rv=f.call(handler, event);\r\n        }\r\n\r\n        switch(event.type) {\r\n        case 'mouseover':\r\n          if (rv === true)  // Historical baggage\r\n            event.preventDefault();\r\n          break;\r\n        case 'beforeunload':\r\n          // XXX: eventually we need a special case here\r\n          /* falls through */\r\n        default:\r\n          if (rv === false)\r\n            event.preventDefault();\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Now invoke list list of listeners for this target and type\r\n      var list = target._listeners && target._listeners[type];\r\n      if (!list) return;\r\n      list = list.slice();\r\n      for(var i = 0, n = list.length; i < n; i++) {\r\n        if (event._immediatePropagationStopped) return;\r\n        var l = list[i];\r\n        if ((phase === Event.CAPTURING_PHASE && !l.capture) ||\r\n          (phase === Event.BUBBLING_PHASE && l.capture))\r\n          continue;\r\n        if (l.f) {\r\n          l.f.call(event.currentTarget, event);\r\n        }\r\n        else {\r\n          var fn = l.listener.handleEvent;\r\n          if (typeof fn !== 'function')\r\n            throw new TypeError('handleEvent property of event listener object is not a function.');\r\n          fn.call(l.listener, event);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!event._initialized || event._dispatching) utils.InvalidStateError();\r\n    event.isTrusted = trusted;\r\n\r\n    // Begin dispatching the event now\r\n    event._dispatching = true;\r\n    event.target = this;\r\n\r\n    // Build the list of targets for the capturing and bubbling phases\r\n    // XXX: we'll eventually have to add Window to this list.\r\n    var ancestors = [];\r\n    for(var n = this.parentNode; n; n = n.parentNode)\r\n      ancestors.push(n);\r\n\r\n    // Capturing phase\r\n    event.eventPhase = Event.CAPTURING_PHASE;\r\n    for(var i = ancestors.length-1; i >= 0; i--) {\r\n      invoke(ancestors[i], event);\r\n      if (event._propagationStopped) break;\r\n    }\r\n\r\n    // At target phase\r\n    if (!event._propagationStopped) {\r\n      event.eventPhase = Event.AT_TARGET;\r\n      invoke(this, event);\r\n    }\r\n\r\n    // Bubbling phase\r\n    if (event.bubbles && !event._propagationStopped) {\r\n      event.eventPhase = Event.BUBBLING_PHASE;\r\n      for(var ii = 0, nn = ancestors.length; ii < nn; ii++) {\r\n        invoke(ancestors[ii], event);\r\n        if (event._propagationStopped) break;\r\n      }\r\n    }\r\n\r\n    event._dispatching = false;\r\n    event.eventPhase = Event.AT_TARGET;\r\n    event.currentTarget = null;\r\n\r\n    // Deal with mouse events and figure out when\r\n    // a click has happened\r\n    if (trusted && !event.defaultPrevented && event instanceof MouseEvent) {\r\n      switch(event.type) {\r\n      case 'mousedown':\r\n        this._armed = {\r\n          x: event.clientX,\r\n          y: event.clientY,\r\n          t: event.timeStamp\r\n        };\r\n        break;\r\n      case 'mouseout':\r\n      case 'mouseover':\r\n        this._armed = null;\r\n        break;\r\n      case 'mouseup':\r\n        if (this._isClick(event)) this._doClick(event);\r\n        this._armed = null;\r\n        break;\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return !event.defaultPrevented;\r\n  },\r\n\r\n  // Determine whether a click occurred\r\n  // XXX We don't support double clicks for now\r\n  _isClick: function(event) {\r\n    return (this._armed !== null &&\r\n        event.type === 'mouseup' &&\r\n        event.isTrusted &&\r\n        event.button === 0 &&\r\n        event.timeStamp - this._armed.t < 1000 &&\r\n        Math.abs(event.clientX - this._armed.x) < 10 &&\r\n        Math.abs(event.clientY - this._armed.Y) < 10);\r\n  },\r\n\r\n  // Clicks are handled like this:\r\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#interactive-content-0\r\n  //\r\n  // Note that this method is similar to the HTMLElement.click() method\r\n  // The event argument must be the trusted mouseup event\r\n  _doClick: function(event) {\r\n    if (this._click_in_progress) return;\r\n    this._click_in_progress = true;\r\n\r\n    // Find the nearest enclosing element that is activatable\r\n    // An element is activatable if it has a\r\n    // _post_click_activation_steps hook\r\n    var activated = this;\r\n    while(activated && !activated._post_click_activation_steps)\r\n      activated = activated.parentNode;\r\n\r\n    if (activated && activated._pre_click_activation_steps) {\r\n      activated._pre_click_activation_steps();\r\n    }\r\n\r\n    var click = this.ownerDocument.createEvent('MouseEvent');\r\n    click.initMouseEvent('click', true, true,\r\n      this.ownerDocument.defaultView, 1,\r\n      event.screenX, event.screenY,\r\n      event.clientX, event.clientY,\r\n      event.ctrlKey, event.altKey,\r\n      event.shiftKey, event.metaKey,\r\n      event.button, null);\r\n\r\n    var result = this._dispatchEvent(click, true);\r\n\r\n    if (activated) {\r\n      if (result) {\r\n        // This is where hyperlinks get followed, for example.\r\n        if (activated._post_click_activation_steps)\r\n          activated._post_click_activation_steps(click);\r\n      }\r\n      else {\r\n        if (activated._cancelled_activation_steps)\r\n          activated._cancelled_activation_steps();\r\n      }\r\n    }\r\n  },\r\n\r\n  //\r\n  // An event handler is like an event listener, but it registered\r\n  // by setting an IDL or content attribute like onload or onclick.\r\n  // There can only be one of these at a time for any event type.\r\n  // This is an internal method for the attribute accessors and\r\n  // content attribute handlers that need to register events handlers.\r\n  // The type argument is the same as in addEventListener().\r\n  // The handler argument is the same as listeners in addEventListener:\r\n  // it can be a function or an object. Pass null to remove any existing\r\n  // handler.  Handlers are always invoked before any listeners of\r\n  // the same type.  They are not invoked during the capturing phase\r\n  // of event dispatch.\r\n  //\r\n  _setEventHandler: function _setEventHandler(type, handler) {\r\n    if (!this._handlers) this._handlers = Object.create(null);\r\n    this._handlers[type] = handler;\r\n  },\r\n\r\n  _getEventHandler: function _getEventHandler(type) {\r\n    return (this._handlers && this._handlers[type]) || null;\r\n  }\r\n\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/EventTarget.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/FilteredElementList.js":
/*!********************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/FilteredElementList.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = FilteredElementList;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\n\r\n//\r\n// This file defines node list implementation that lazily traverses\r\n// the document tree (or a subtree rooted at any element) and includes\r\n// only those elements for which a specified filter function returns true.\r\n// It is used to implement the\r\n// {Document,Element}.getElementsBy{TagName,ClassName}{,NS} methods.\r\n//\r\n// XXX this should inherit from NodeList\r\n\r\nfunction FilteredElementList(root, filter) {\r\n  this.root = root;\r\n  this.filter = filter;\r\n  this.lastModTime = root.lastModTime;\r\n  this.done = false;\r\n  this.cache = [];\r\n  this.traverse();\r\n}\r\n\r\nFilteredElementList.prototype = Object.create(Object.prototype, {\r\n  length: { get: function() {\r\n    this.checkcache();\r\n    if (!this.done) this.traverse();\r\n    return this.cache.length;\r\n  } },\r\n\r\n  item: { value: function(n) {\r\n    this.checkcache();\r\n    if (!this.done && n >= this.cache.length) {\r\n      // This can lead to O(N^2) behavior if we stop when we get to n\r\n      // and the caller is iterating through the items in order; so\r\n      // be sure to do the full traverse here.\r\n      this.traverse(/*n*/);\r\n    }\r\n    return this.cache[n];\r\n  } },\r\n\r\n  checkcache: { value: function() {\r\n    if (this.lastModTime !== this.root.lastModTime) {\r\n      // subtree has changed, so invalidate cache\r\n      for (var i = this.cache.length-1; i>=0; i--) {\r\n        this[i] = undefined;\r\n      }\r\n      this.cache.length = 0;\r\n      this.done = false;\r\n      this.lastModTime = this.root.lastModTime;\r\n    }\r\n  } },\r\n\r\n  // If n is specified, then traverse the tree until we've found the nth\r\n  // item (or until we've found all items).  If n is not specified,\r\n  // traverse until we've found all items.\r\n  traverse: { value: function(n) {\r\n    // increment n so we can compare to length, and so it is never falsy\r\n    if (n !== undefined) n++;\r\n\r\n    var elt;\r\n    while ((elt = this.next()) !== null) {\r\n      this[this.cache.length] = elt; //XXX Use proxy instead\r\n      this.cache.push(elt);\r\n      if (n && this.cache.length === n) return;\r\n    }\r\n\r\n    // no next element, so we've found everything\r\n    this.done = true;\r\n  } },\r\n\r\n  // Return the next element under root that matches filter\r\n  next: { value: function() {\r\n    var start = (this.cache.length === 0) ? this.root // Start at the root or at\r\n      : this.cache[this.cache.length-1]; // the last element we found\r\n\r\n    var elt;\r\n    if (start.nodeType === Node.DOCUMENT_NODE)\r\n      elt = start.documentElement;\r\n    else\r\n      elt = start.nextElement(this.root);\r\n\r\n    while(elt) {\r\n      if (this.filter(elt)) {\r\n        return elt;\r\n      }\r\n\r\n      elt = elt.nextElement(this.root);\r\n    }\r\n    return null;\r\n  } },\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9GaWx0ZXJlZEVsZW1lbnRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlCQUFpQixlQUFlLG1CQUFtQixLQUFLO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHdDQUF3QyxNQUFNO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvRmlsdGVyZWRFbGVtZW50TGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXJlZEVsZW1lbnRMaXN0O1xyXG5cclxudmFyIE5vZGUgPSByZXF1aXJlKCcuL05vZGUnKTtcclxuXHJcbi8vXHJcbi8vIFRoaXMgZmlsZSBkZWZpbmVzIG5vZGUgbGlzdCBpbXBsZW1lbnRhdGlvbiB0aGF0IGxhemlseSB0cmF2ZXJzZXNcclxuLy8gdGhlIGRvY3VtZW50IHRyZWUgKG9yIGEgc3VidHJlZSByb290ZWQgYXQgYW55IGVsZW1lbnQpIGFuZCBpbmNsdWRlc1xyXG4vLyBvbmx5IHRob3NlIGVsZW1lbnRzIGZvciB3aGljaCBhIHNwZWNpZmllZCBmaWx0ZXIgZnVuY3Rpb24gcmV0dXJucyB0cnVlLlxyXG4vLyBJdCBpcyB1c2VkIHRvIGltcGxlbWVudCB0aGVcclxuLy8ge0RvY3VtZW50LEVsZW1lbnR9LmdldEVsZW1lbnRzQnl7VGFnTmFtZSxDbGFzc05hbWV9eyxOU30gbWV0aG9kcy5cclxuLy9cclxuLy8gWFhYIHRoaXMgc2hvdWxkIGluaGVyaXQgZnJvbSBOb2RlTGlzdFxyXG5cclxuZnVuY3Rpb24gRmlsdGVyZWRFbGVtZW50TGlzdChyb290LCBmaWx0ZXIpIHtcclxuICB0aGlzLnJvb3QgPSByb290O1xyXG4gIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xyXG4gIHRoaXMubGFzdE1vZFRpbWUgPSByb290Lmxhc3RNb2RUaW1lO1xyXG4gIHRoaXMuZG9uZSA9IGZhbHNlO1xyXG4gIHRoaXMuY2FjaGUgPSBbXTtcclxuICB0aGlzLnRyYXZlcnNlKCk7XHJcbn1cclxuXHJcbkZpbHRlcmVkRWxlbWVudExpc3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShPYmplY3QucHJvdG90eXBlLCB7XHJcbiAgbGVuZ3RoOiB7IGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmNoZWNrY2FjaGUoKTtcclxuICAgIGlmICghdGhpcy5kb25lKSB0aGlzLnRyYXZlcnNlKCk7XHJcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5sZW5ndGg7XHJcbiAgfSB9LFxyXG5cclxuICBpdGVtOiB7IHZhbHVlOiBmdW5jdGlvbihuKSB7XHJcbiAgICB0aGlzLmNoZWNrY2FjaGUoKTtcclxuICAgIGlmICghdGhpcy5kb25lICYmIG4gPj0gdGhpcy5jYWNoZS5sZW5ndGgpIHtcclxuICAgICAgLy8gVGhpcyBjYW4gbGVhZCB0byBPKE5eMikgYmVoYXZpb3IgaWYgd2Ugc3RvcCB3aGVuIHdlIGdldCB0byBuXHJcbiAgICAgIC8vIGFuZCB0aGUgY2FsbGVyIGlzIGl0ZXJhdGluZyB0aHJvdWdoIHRoZSBpdGVtcyBpbiBvcmRlcjsgc29cclxuICAgICAgLy8gYmUgc3VyZSB0byBkbyB0aGUgZnVsbCB0cmF2ZXJzZSBoZXJlLlxyXG4gICAgICB0aGlzLnRyYXZlcnNlKC8qbiovKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmNhY2hlW25dO1xyXG4gIH0gfSxcclxuXHJcbiAgY2hlY2tjYWNoZTogeyB2YWx1ZTogZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodGhpcy5sYXN0TW9kVGltZSAhPT0gdGhpcy5yb290Lmxhc3RNb2RUaW1lKSB7XHJcbiAgICAgIC8vIHN1YnRyZWUgaGFzIGNoYW5nZWQsIHNvIGludmFsaWRhdGUgY2FjaGVcclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuY2FjaGUubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xyXG4gICAgICAgIHRoaXNbaV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSAwO1xyXG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5sYXN0TW9kVGltZSA9IHRoaXMucm9vdC5sYXN0TW9kVGltZTtcclxuICAgIH1cclxuICB9IH0sXHJcblxyXG4gIC8vIElmIG4gaXMgc3BlY2lmaWVkLCB0aGVuIHRyYXZlcnNlIHRoZSB0cmVlIHVudGlsIHdlJ3ZlIGZvdW5kIHRoZSBudGhcclxuICAvLyBpdGVtIChvciB1bnRpbCB3ZSd2ZSBmb3VuZCBhbGwgaXRlbXMpLiAgSWYgbiBpcyBub3Qgc3BlY2lmaWVkLFxyXG4gIC8vIHRyYXZlcnNlIHVudGlsIHdlJ3ZlIGZvdW5kIGFsbCBpdGVtcy5cclxuICB0cmF2ZXJzZTogeyB2YWx1ZTogZnVuY3Rpb24obikge1xyXG4gICAgLy8gaW5jcmVtZW50IG4gc28gd2UgY2FuIGNvbXBhcmUgdG8gbGVuZ3RoLCBhbmQgc28gaXQgaXMgbmV2ZXIgZmFsc3lcclxuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIG4rKztcclxuXHJcbiAgICB2YXIgZWx0O1xyXG4gICAgd2hpbGUgKChlbHQgPSB0aGlzLm5leHQoKSkgIT09IG51bGwpIHtcclxuICAgICAgdGhpc1t0aGlzLmNhY2hlLmxlbmd0aF0gPSBlbHQ7IC8vWFhYIFVzZSBwcm94eSBpbnN0ZWFkXHJcbiAgICAgIHRoaXMuY2FjaGUucHVzaChlbHQpO1xyXG4gICAgICBpZiAobiAmJiB0aGlzLmNhY2hlLmxlbmd0aCA9PT0gbikgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG5vIG5leHQgZWxlbWVudCwgc28gd2UndmUgZm91bmQgZXZlcnl0aGluZ1xyXG4gICAgdGhpcy5kb25lID0gdHJ1ZTtcclxuICB9IH0sXHJcblxyXG4gIC8vIFJldHVybiB0aGUgbmV4dCBlbGVtZW50IHVuZGVyIHJvb3QgdGhhdCBtYXRjaGVzIGZpbHRlclxyXG4gIG5leHQ6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHN0YXJ0ID0gKHRoaXMuY2FjaGUubGVuZ3RoID09PSAwKSA/IHRoaXMucm9vdCAvLyBTdGFydCBhdCB0aGUgcm9vdCBvciBhdFxyXG4gICAgICA6IHRoaXMuY2FjaGVbdGhpcy5jYWNoZS5sZW5ndGgtMV07IC8vIHRoZSBsYXN0IGVsZW1lbnQgd2UgZm91bmRcclxuXHJcbiAgICB2YXIgZWx0O1xyXG4gICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpXHJcbiAgICAgIGVsdCA9IHN0YXJ0LmRvY3VtZW50RWxlbWVudDtcclxuICAgIGVsc2VcclxuICAgICAgZWx0ID0gc3RhcnQubmV4dEVsZW1lbnQodGhpcy5yb290KTtcclxuXHJcbiAgICB3aGlsZShlbHQpIHtcclxuICAgICAgaWYgKHRoaXMuZmlsdGVyKGVsdCkpIHtcclxuICAgICAgICByZXR1cm4gZWx0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbHQgPSBlbHQubmV4dEVsZW1lbnQodGhpcy5yb290KTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gfSxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/FilteredElementList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/HTMLParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/HTMLParser.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = HTMLParser;\r\n\r\nvar Document = __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Document.js\");\r\nvar DocumentType = __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentType.js\");\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NAMESPACE = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\").NAMESPACE);\r\nvar html = __webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/htmlelts.js\");\r\nvar impl = html.elements;\r\n\r\nvar pushAll = Function.prototype.apply.bind(Array.prototype.push);\r\n\r\n/*\r\n * This file contains an implementation of the HTML parsing algorithm.\r\n * The algorithm and the implementation are complex because HTML\r\n * explicitly defines how the parser should behave for all possible\r\n * valid and invalid inputs.\r\n *\r\n * Usage:\r\n *\r\n * The file defines a single HTMLParser() function, which dom.js exposes\r\n * publicly as document.implementation.mozHTMLParser(). This is a\r\n * factory function, not a constructor.\r\n *\r\n * When you call document.implementation.mozHTMLParser(), it returns\r\n * an object that has parse() and document() methods. To parse HTML text,\r\n * pass the text (in one or more chunks) to the parse() method.  When\r\n * you've passed all the text (on the last chunk, or afterward) pass\r\n * true as the second argument to parse() to tell the parser that there\r\n * is no more coming. Call document() to get the document object that\r\n * the parser is parsing into.  You can call this at any time, before\r\n * or after calling parse().\r\n *\r\n * The first argument to mozHTMLParser is the absolute URL of the document.\r\n *\r\n * The second argument is optional and is for internal use only.  Pass an\r\n * element as the fragmentContext to do innerHTML parsing for the\r\n * element.  To do innerHTML parsing on a document, pass null. Otherwise,\r\n * omit the 2nd argument. See HTMLElement.innerHTML for an example.  Note\r\n * that if you pass a context element, the end() method will return an\r\n * unwrapped document instead of a wrapped one.\r\n *\r\n * Implementation details:\r\n *\r\n * This is a long file of almost 7000 lines. It is structured as one\r\n * big function nested within another big function.  The outer\r\n * function defines a bunch of constant data, utility functions\r\n * that use that data, and a couple of classes used by the parser.\r\n * The outer function also defines and returns the\r\n * inner function. This inner function is the HTMLParser factory\r\n * function that implements the parser and holds all the parser state\r\n * as local variables.  The HTMLParser function is quite big because\r\n * it defines many nested functions that use those local variables.\r\n *\r\n * There are three tightly coupled parser stages: a scanner, a\r\n * tokenizer and a tree builder. In a (possibly misguided) attempt at\r\n * efficiency, the stages are not implemented as separate classes:\r\n * everything shares state and is (mostly) implemented in imperative\r\n * (rather than OO) style.\r\n *\r\n * The stages of the parser work like this: When the client code calls\r\n * the parser's parse() method, the specified string is passed to\r\n * scanChars(). The scanner loops through that string and passes characters\r\n * (sometimes one at a time, sometimes in chunks) to the tokenizer stage.\r\n * The tokenizer groups the characters into tokens: tags, endtags, runs\r\n * of text, comments, doctype declarations, and the end-of-file (EOF)\r\n * token.  These tokens are then passed to the tree building stage via\r\n * the insertToken() function.  The tree building stage builds up the\r\n * document tree.\r\n *\r\n * The tokenizer stage is a finite state machine.  Each state is\r\n * implemented as a function with a name that ends in \"_state\".  The\r\n * initial state is data_state(). The current tokenizer state is stored\r\n * in the variable 'tokenizer'.  Most state functions expect a single\r\n * integer argument which represents a single UTF-16 codepoint.  Some\r\n * states want more characters and set a lookahead property on\r\n * themselves.  The scanChars() function in the scanner checks for this\r\n * lookahead property.  If it doesn't exist, then scanChars() just passes\r\n * the next input character to the current tokenizer state function.\r\n * Otherwise, scanChars() looks ahead (a given # of characters, or for a\r\n * matching string, or for a matching regexp) and passes a string of\r\n * characters to the current tokenizer state function.\r\n *\r\n * As a shortcut, certain states of the tokenizer use regular expressions\r\n * to look ahead in the scanner's input buffer for runs of text, simple\r\n * tags and attributes.  For well-formed input, these shortcuts skip a\r\n * lot of state transitions and speed things up a bit.\r\n *\r\n * When a tokenizer state function has consumed a complete token, it\r\n * emits that token, by calling insertToken(), or by calling a utility\r\n * function that itself calls insertToken().  These tokens are passed to\r\n * the tree building stage, which is also a state machine.  Like the\r\n * tokenizer, the tree building states are implemented as functions, and\r\n * these functions have names that end with _mode (because the HTML spec\r\n * refers to them as insertion modes). The current insertion mode is held\r\n * by the 'parser' variable.  Each insertion mode function takes up to 4\r\n * arguments.  The first is a token type, represented by the constants\r\n * TAG, ENDTAG, TEXT, COMMENT, DOCTYPE and EOF.  The second argument is\r\n * the value of the token: the text or comment data, or tagname or\r\n * doctype.  For tags, the 3rd argument is an array of attributes.  For\r\n * DOCTYPES it is the optional public id.  For tags, the 4th argument is\r\n * true if the tag is self-closing. For doctypes, the 4th argument is the\r\n * optional system id.\r\n *\r\n * Search for \"***\" to find the major sub-divisions in the code.\r\n */\r\n\r\n\r\n/***\r\n * Data prolog.  Lots of constants declared here, including some\r\n * very large objects.  They're used throughout the code that follows\r\n */\r\n// Token types for the tree builder.\r\nvar EOF = -1;\r\nvar TEXT = 1;\r\nvar TAG = 2;\r\nvar ENDTAG = 3;\r\nvar COMMENT = 4;\r\nvar DOCTYPE = 5;\r\n\r\n// A re-usable empty array\r\nvar NOATTRS = [];\r\n\r\n// These DTD public ids put the browser in quirks mode\r\nvar quirkyPublicIds = /^HTML$|^-\\/\\/W3O\\/\\/DTD W3 HTML Strict 3\\.0\\/\\/EN\\/\\/$|^-\\/W3C\\/DTD HTML 4\\.0 Transitional\\/EN$|^\\+\\/\\/Silmaril\\/\\/dtd html Pro v0r11 19970101\\/\\/|^-\\/\\/AdvaSoft Ltd\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/AS\\/\\/DTD HTML 3\\.0 asWedit \\+ extensions\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0 Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 2\\.1E\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 0\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 1\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 2\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict Level 3\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML Strict\\/\\/|^-\\/\\/IETF\\/\\/DTD HTML\\/\\/|^-\\/\\/Metrius\\/\\/DTD Metrius Presentational\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 2\\.0 Tables\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML Strict\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 HTML\\/\\/|^-\\/\\/Microsoft\\/\\/DTD Internet Explorer 3\\.0 Tables\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD HTML\\/\\/|^-\\/\\/Netscape Comm\\. Corp\\.\\/\\/DTD Strict HTML\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML 2\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended 1\\.0\\/\\/|^-\\/\\/O'Reilly and Associates\\/\\/DTD HTML Extended Relaxed 1\\.0\\/\\/|^-\\/\\/SoftQuad Software\\/\\/DTD HoTMetaL PRO 6\\.0::19990601::extensions to HTML 4\\.0\\/\\/|^-\\/\\/SoftQuad\\/\\/DTD HoTMetaL PRO 4\\.0::19971010::extensions to HTML 4\\.0\\/\\/|^-\\/\\/Spyglass\\/\\/DTD HTML 2\\.0 Extended\\/\\/|^-\\/\\/SQ\\/\\/DTD HTML 2\\.0 HoTMetaL \\+ extensions\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava HTML\\/\\/|^-\\/\\/Sun Microsystems Corp\\.\\/\\/DTD HotJava Strict HTML\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3 1995-03-24\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2 Final\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 3\\.2S Draft\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.0 Transitional\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 19960712\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML Experimental 970421\\/\\/|^-\\/\\/W3C\\/\\/DTD W3 HTML\\/\\/|^-\\/\\/W3O\\/\\/DTD W3 HTML 3\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML 2\\.0\\/\\/|^-\\/\\/WebTechs\\/\\/DTD Mozilla HTML\\/\\//i;\r\n\r\nvar quirkySystemId = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\r\n\r\nvar conditionallyQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD HTML 4\\.01 Transitional\\/\\//i;\r\n\r\n// These DTD public ids put the browser in limited quirks mode\r\nvar limitedQuirkyPublicIds = /^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Frameset\\/\\/|^-\\/\\/W3C\\/\\/DTD XHTML 1\\.0 Transitional\\/\\//i;\r\n\r\n\r\n// Element sets below. See the isA() function for a way to test\r\n// whether an element is a member of a set\r\nvar specialSet = Object.create(null);\r\nspecialSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"address\":true, \"applet\":true, \"area\":true, \"article\":true,\r\n  \"aside\":true, \"base\":true, \"basefont\":true, \"bgsound\":true,\r\n  \"blockquote\":true, \"body\":true, \"br\":true, \"button\":true,\r\n  \"caption\":true, \"center\":true, \"col\":true, \"colgroup\":true,\r\n  \"dd\":true, \"details\":true, \"dir\":true,\r\n  \"div\":true, \"dl\":true, \"dt\":true, \"embed\":true,\r\n  \"fieldset\":true, \"figcaption\":true, \"figure\":true, \"footer\":true,\r\n  \"form\":true, \"frame\":true, \"frameset\":true, \"h1\":true,\r\n  \"h2\":true, \"h3\":true, \"h4\":true, \"h5\":true,\r\n  \"h6\":true, \"head\":true, \"header\":true, \"hgroup\":true,\r\n  \"hr\":true, \"html\":true, \"iframe\":true, \"img\":true,\r\n  \"input\":true, \"li\":true, \"link\":true,\r\n  \"listing\":true, \"main\":true, \"marquee\":true, \"menu\":true, \"meta\":true,\r\n  \"nav\":true, \"noembed\":true, \"noframes\":true, \"noscript\":true,\r\n  \"object\":true, \"ol\":true, \"p\":true, \"param\":true,\r\n  \"plaintext\":true, \"pre\":true, \"script\":true, \"section\":true,\r\n  \"select\":true, \"source\":true, \"style\":true, \"summary\":true, \"table\":true,\r\n  \"tbody\":true, \"td\":true, \"template\":true, \"textarea\":true, \"tfoot\":true,\r\n  \"th\":true, \"thead\":true, \"title\":true, \"tr\":true, \"track\":true,\r\n  // Note that \"xmp\" was removed from the \"special\" set in the latest\r\n  // spec, apparently by accident; see\r\n  // https://github.com/whatwg/html/pull/1919\r\n  \"ul\":true, \"wbr\":true, \"xmp\":true\r\n};\r\nspecialSet[NAMESPACE.SVG] = {\r\n  __proto__: null,\r\n  \"foreignObject\": true, \"desc\": true, \"title\": true\r\n};\r\nspecialSet[NAMESPACE.MATHML] = {\r\n  __proto__: null,\r\n  \"mi\":true, \"mo\":true, \"mn\":true, \"ms\":true,\r\n  \"mtext\":true, \"annotation-xml\":true\r\n};\r\n\r\n// The set of address, div, and p HTML tags\r\nvar addressdivpSet = Object.create(null);\r\naddressdivpSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"address\":true, \"div\":true, \"p\":true\r\n};\r\n\r\nvar dddtSet = Object.create(null);\r\ndddtSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"dd\":true, \"dt\":true\r\n};\r\n\r\nvar tablesectionrowSet = Object.create(null);\r\ntablesectionrowSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"table\":true, \"thead\":true, \"tbody\":true, \"tfoot\":true, \"tr\":true\r\n};\r\n\r\nvar impliedEndTagsSet = Object.create(null);\r\nimpliedEndTagsSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"dd\": true, \"dt\": true, \"li\": true, \"menuitem\": true, \"optgroup\": true,\r\n  \"option\": true, \"p\": true, \"rb\": true, \"rp\": true, \"rt\": true, \"rtc\": true\r\n};\r\n\r\nvar thoroughImpliedEndTagsSet = Object.create(null);\r\nthoroughImpliedEndTagsSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"caption\": true, \"colgroup\": true, \"dd\": true, \"dt\": true, \"li\": true,\r\n  \"optgroup\": true, \"option\": true, \"p\": true, \"rb\": true, \"rp\": true,\r\n  \"rt\": true, \"rtc\": true, \"tbody\": true, \"td\": true, \"tfoot\": true,\r\n  \"th\": true, \"thead\": true, \"tr\": true\r\n};\r\n\r\nvar tableContextSet = Object.create(null);\r\ntableContextSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"table\": true, \"template\": true, \"html\": true\r\n};\r\n\r\nvar tableBodyContextSet = Object.create(null);\r\ntableBodyContextSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"tbody\": true, \"tfoot\": true, \"thead\": true, \"template\": true, \"html\": true\r\n};\r\n\r\nvar tableRowContextSet = Object.create(null);\r\ntableRowContextSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"tr\": true, \"template\": true, \"html\": true\r\n};\r\n\r\n// See http://www.w3.org/TR/html5/forms.html#form-associated-element\r\nvar formassociatedSet = Object.create(null);\r\nformassociatedSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"button\": true, \"fieldset\": true, \"input\": true, \"keygen\": true,\r\n  \"object\": true, \"output\": true, \"select\": true, \"textarea\": true,\r\n  \"img\": true\r\n};\r\n\r\nvar inScopeSet = Object.create(null);\r\ninScopeSet[NAMESPACE.HTML]= {\r\n  __proto__: null,\r\n  \"applet\":true, \"caption\":true, \"html\":true, \"table\":true,\r\n  \"td\":true, \"th\":true, \"marquee\":true, \"object\":true,\r\n  \"template\":true\r\n};\r\ninScopeSet[NAMESPACE.MATHML] = {\r\n  __proto__: null,\r\n  \"mi\":true, \"mo\":true, \"mn\":true, \"ms\":true,\r\n  \"mtext\":true, \"annotation-xml\":true\r\n};\r\ninScopeSet[NAMESPACE.SVG] = {\r\n  __proto__: null,\r\n  \"foreignObject\":true, \"desc\":true, \"title\":true\r\n};\r\n\r\nvar inListItemScopeSet = Object.create(inScopeSet);\r\ninListItemScopeSet[NAMESPACE.HTML] =\r\n  Object.create(inScopeSet[NAMESPACE.HTML]);\r\ninListItemScopeSet[NAMESPACE.HTML].ol = true;\r\ninListItemScopeSet[NAMESPACE.HTML].ul = true;\r\n\r\nvar inButtonScopeSet = Object.create(inScopeSet);\r\ninButtonScopeSet[NAMESPACE.HTML] =\r\n  Object.create(inScopeSet[NAMESPACE.HTML]);\r\ninButtonScopeSet[NAMESPACE.HTML].button = true;\r\n\r\nvar inTableScopeSet = Object.create(null);\r\ninTableScopeSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"html\":true, \"table\":true, \"template\":true\r\n};\r\n\r\n// The set of elements for select scope is the everything *except* these\r\nvar invertedSelectScopeSet = Object.create(null);\r\ninvertedSelectScopeSet[NAMESPACE.HTML] = {\r\n  __proto__: null,\r\n  \"optgroup\":true, \"option\":true\r\n};\r\n\r\nvar mathmlTextIntegrationPointSet = Object.create(null);\r\nmathmlTextIntegrationPointSet[NAMESPACE.MATHML] = {\r\n  __proto__: null,\r\n  mi: true,\r\n  mo: true,\r\n  mn: true,\r\n  ms: true,\r\n  mtext: true\r\n};\r\n\r\nvar htmlIntegrationPointSet = Object.create(null);\r\nhtmlIntegrationPointSet[NAMESPACE.SVG] = {\r\n  __proto__: null,\r\n  foreignObject: true,\r\n  desc: true,\r\n  title: true\r\n};\r\n\r\nvar foreignAttributes = {\r\n  __proto__: null,\r\n  \"xlink:actuate\": NAMESPACE.XLINK, \"xlink:arcrole\": NAMESPACE.XLINK,\r\n  \"xlink:href\":   NAMESPACE.XLINK,  \"xlink:role\":    NAMESPACE.XLINK,\r\n  \"xlink:show\":   NAMESPACE.XLINK,  \"xlink:title\":   NAMESPACE.XLINK,\r\n  \"xlink:type\":   NAMESPACE.XLINK,  \"xml:base\":      NAMESPACE.XML,\r\n  \"xml:lang\":     NAMESPACE.XML,    \"xml:space\":     NAMESPACE.XML,\r\n  \"xmlns\":        NAMESPACE.XMLNS,  \"xmlns:xlink\":   NAMESPACE.XMLNS\r\n};\r\n\r\n\r\n// Lowercase to mixed case mapping for SVG attributes and tagnames\r\nvar svgAttrAdjustments = {\r\n  __proto__: null,\r\n  attributename: \"attributeName\", attributetype: \"attributeType\",\r\n  basefrequency: \"baseFrequency\", baseprofile: \"baseProfile\",\r\n  calcmode: \"calcMode\", clippathunits: \"clipPathUnits\",\r\n  diffuseconstant: \"diffuseConstant\",\r\n  edgemode: \"edgeMode\",\r\n  filterunits: \"filterUnits\",\r\n  glyphref: \"glyphRef\", gradienttransform: \"gradientTransform\",\r\n  gradientunits: \"gradientUnits\", kernelmatrix: \"kernelMatrix\",\r\n  kernelunitlength: \"kernelUnitLength\", keypoints: \"keyPoints\",\r\n  keysplines: \"keySplines\", keytimes: \"keyTimes\",\r\n  lengthadjust: \"lengthAdjust\", limitingconeangle: \"limitingConeAngle\",\r\n  markerheight: \"markerHeight\", markerunits: \"markerUnits\",\r\n  markerwidth: \"markerWidth\", maskcontentunits: \"maskContentUnits\",\r\n  maskunits: \"maskUnits\", numoctaves: \"numOctaves\",\r\n  pathlength: \"pathLength\", patterncontentunits: \"patternContentUnits\",\r\n  patterntransform: \"patternTransform\", patternunits: \"patternUnits\",\r\n  pointsatx: \"pointsAtX\", pointsaty: \"pointsAtY\",\r\n  pointsatz: \"pointsAtZ\", preservealpha: \"preserveAlpha\",\r\n  preserveaspectratio: \"preserveAspectRatio\",\r\n  primitiveunits: \"primitiveUnits\", refx: \"refX\",\r\n  refy: \"refY\", repeatcount: \"repeatCount\",\r\n  repeatdur: \"repeatDur\", requiredextensions: \"requiredExtensions\",\r\n  requiredfeatures: \"requiredFeatures\",\r\n  specularconstant: \"specularConstant\",\r\n  specularexponent: \"specularExponent\", spreadmethod: \"spreadMethod\",\r\n  startoffset: \"startOffset\", stddeviation: \"stdDeviation\",\r\n  stitchtiles: \"stitchTiles\", surfacescale: \"surfaceScale\",\r\n  systemlanguage: \"systemLanguage\", tablevalues: \"tableValues\",\r\n  targetx: \"targetX\", targety: \"targetY\",\r\n  textlength: \"textLength\", viewbox: \"viewBox\",\r\n  viewtarget: \"viewTarget\", xchannelselector: \"xChannelSelector\",\r\n  ychannelselector: \"yChannelSelector\", zoomandpan: \"zoomAndPan\"\r\n};\r\n\r\nvar svgTagNameAdjustments = {\r\n  __proto__: null,\r\n  altglyph: \"altGlyph\", altglyphdef: \"altGlyphDef\",\r\n  altglyphitem: \"altGlyphItem\", animatecolor: \"animateColor\",\r\n  animatemotion: \"animateMotion\", animatetransform: \"animateTransform\",\r\n  clippath: \"clipPath\", feblend: \"feBlend\",\r\n  fecolormatrix: \"feColorMatrix\",\r\n  fecomponenttransfer: \"feComponentTransfer\", fecomposite: \"feComposite\",\r\n  feconvolvematrix: \"feConvolveMatrix\",\r\n  fediffuselighting: \"feDiffuseLighting\",\r\n  fedisplacementmap: \"feDisplacementMap\",\r\n  fedistantlight: \"feDistantLight\", feflood: \"feFlood\",\r\n  fefunca: \"feFuncA\", fefuncb: \"feFuncB\",\r\n  fefuncg: \"feFuncG\", fefuncr: \"feFuncR\",\r\n  fegaussianblur: \"feGaussianBlur\", feimage: \"feImage\",\r\n  femerge: \"feMerge\", femergenode: \"feMergeNode\",\r\n  femorphology: \"feMorphology\", feoffset: \"feOffset\",\r\n  fepointlight: \"fePointLight\", fespecularlighting: \"feSpecularLighting\",\r\n  fespotlight: \"feSpotLight\", fetile: \"feTile\",\r\n  feturbulence: \"feTurbulence\", foreignobject: \"foreignObject\",\r\n  glyphref: \"glyphRef\", lineargradient: \"linearGradient\",\r\n  radialgradient: \"radialGradient\", textpath: \"textPath\"\r\n};\r\n\r\n\r\n// Data for parsing numeric and named character references\r\n// These next 3 objects are direct translations of tables\r\n// in the HTML spec into JavaScript object format\r\nvar numericCharRefReplacements = {\r\n  __proto__: null,\r\n  0x00:0xFFFD, 0x80:0x20AC, 0x82:0x201A, 0x83:0x0192, 0x84:0x201E,\r\n  0x85:0x2026, 0x86:0x2020, 0x87:0x2021, 0x88:0x02C6, 0x89:0x2030,\r\n  0x8A:0x0160, 0x8B:0x2039, 0x8C:0x0152, 0x8E:0x017D, 0x91:0x2018,\r\n  0x92:0x2019, 0x93:0x201C, 0x94:0x201D, 0x95:0x2022, 0x96:0x2013,\r\n  0x97:0x2014, 0x98:0x02DC, 0x99:0x2122, 0x9A:0x0161, 0x9B:0x203A,\r\n  0x9C:0x0153, 0x9E:0x017E, 0x9F:0x0178\r\n};\r\n\r\n/*\r\n * This table is generated with test/tools/update-entities.js\r\n */\r\nvar namedCharRefs = {\r\n  __proto__: null,\r\n  \"AElig\":0xc6, \"AElig;\":0xc6,\r\n  \"AMP\":0x26, \"AMP;\":0x26,\r\n  \"Aacute\":0xc1, \"Aacute;\":0xc1,\r\n  \"Abreve;\":0x102, \"Acirc\":0xc2,\r\n  \"Acirc;\":0xc2, \"Acy;\":0x410,\r\n  \"Afr;\":[0xd835,0xdd04], \"Agrave\":0xc0,\r\n  \"Agrave;\":0xc0, \"Alpha;\":0x391,\r\n  \"Amacr;\":0x100, \"And;\":0x2a53,\r\n  \"Aogon;\":0x104, \"Aopf;\":[0xd835,0xdd38],\r\n  \"ApplyFunction;\":0x2061, \"Aring\":0xc5,\r\n  \"Aring;\":0xc5, \"Ascr;\":[0xd835,0xdc9c],\r\n  \"Assign;\":0x2254, \"Atilde\":0xc3,\r\n  \"Atilde;\":0xc3, \"Auml\":0xc4,\r\n  \"Auml;\":0xc4, \"Backslash;\":0x2216,\r\n  \"Barv;\":0x2ae7, \"Barwed;\":0x2306,\r\n  \"Bcy;\":0x411, \"Because;\":0x2235,\r\n  \"Bernoullis;\":0x212c, \"Beta;\":0x392,\r\n  \"Bfr;\":[0xd835,0xdd05], \"Bopf;\":[0xd835,0xdd39],\r\n  \"Breve;\":0x2d8, \"Bscr;\":0x212c,\r\n  \"Bumpeq;\":0x224e, \"CHcy;\":0x427,\r\n  \"COPY\":0xa9, \"COPY;\":0xa9,\r\n  \"Cacute;\":0x106, \"Cap;\":0x22d2,\r\n  \"CapitalDifferentialD;\":0x2145, \"Cayleys;\":0x212d,\r\n  \"Ccaron;\":0x10c, \"Ccedil\":0xc7,\r\n  \"Ccedil;\":0xc7, \"Ccirc;\":0x108,\r\n  \"Cconint;\":0x2230, \"Cdot;\":0x10a,\r\n  \"Cedilla;\":0xb8, \"CenterDot;\":0xb7,\r\n  \"Cfr;\":0x212d, \"Chi;\":0x3a7,\r\n  \"CircleDot;\":0x2299, \"CircleMinus;\":0x2296,\r\n  \"CirclePlus;\":0x2295, \"CircleTimes;\":0x2297,\r\n  \"ClockwiseContourIntegral;\":0x2232, \"CloseCurlyDoubleQuote;\":0x201d,\r\n  \"CloseCurlyQuote;\":0x2019, \"Colon;\":0x2237,\r\n  \"Colone;\":0x2a74, \"Congruent;\":0x2261,\r\n  \"Conint;\":0x222f, \"ContourIntegral;\":0x222e,\r\n  \"Copf;\":0x2102, \"Coproduct;\":0x2210,\r\n  \"CounterClockwiseContourIntegral;\":0x2233, \"Cross;\":0x2a2f,\r\n  \"Cscr;\":[0xd835,0xdc9e], \"Cup;\":0x22d3,\r\n  \"CupCap;\":0x224d, \"DD;\":0x2145,\r\n  \"DDotrahd;\":0x2911, \"DJcy;\":0x402,\r\n  \"DScy;\":0x405, \"DZcy;\":0x40f,\r\n  \"Dagger;\":0x2021, \"Darr;\":0x21a1,\r\n  \"Dashv;\":0x2ae4, \"Dcaron;\":0x10e,\r\n  \"Dcy;\":0x414, \"Del;\":0x2207,\r\n  \"Delta;\":0x394, \"Dfr;\":[0xd835,0xdd07],\r\n  \"DiacriticalAcute;\":0xb4, \"DiacriticalDot;\":0x2d9,\r\n  \"DiacriticalDoubleAcute;\":0x2dd, \"DiacriticalGrave;\":0x60,\r\n  \"DiacriticalTilde;\":0x2dc, \"Diamond;\":0x22c4,\r\n  \"DifferentialD;\":0x2146, \"Dopf;\":[0xd835,0xdd3b],\r\n  \"Dot;\":0xa8, \"DotDot;\":0x20dc,\r\n  \"DotEqual;\":0x2250, \"DoubleContourIntegral;\":0x222f,\r\n  \"DoubleDot;\":0xa8, \"DoubleDownArrow;\":0x21d3,\r\n  \"DoubleLeftArrow;\":0x21d0, \"DoubleLeftRightArrow;\":0x21d4,\r\n  \"DoubleLeftTee;\":0x2ae4, \"DoubleLongLeftArrow;\":0x27f8,\r\n  \"DoubleLongLeftRightArrow;\":0x27fa, \"DoubleLongRightArrow;\":0x27f9,\r\n  \"DoubleRightArrow;\":0x21d2, \"DoubleRightTee;\":0x22a8,\r\n  \"DoubleUpArrow;\":0x21d1, \"DoubleUpDownArrow;\":0x21d5,\r\n  \"DoubleVerticalBar;\":0x2225, \"DownArrow;\":0x2193,\r\n  \"DownArrowBar;\":0x2913, \"DownArrowUpArrow;\":0x21f5,\r\n  \"DownBreve;\":0x311, \"DownLeftRightVector;\":0x2950,\r\n  \"DownLeftTeeVector;\":0x295e, \"DownLeftVector;\":0x21bd,\r\n  \"DownLeftVectorBar;\":0x2956, \"DownRightTeeVector;\":0x295f,\r\n  \"DownRightVector;\":0x21c1, \"DownRightVectorBar;\":0x2957,\r\n  \"DownTee;\":0x22a4, \"DownTeeArrow;\":0x21a7,\r\n  \"Downarrow;\":0x21d3, \"Dscr;\":[0xd835,0xdc9f],\r\n  \"Dstrok;\":0x110, \"ENG;\":0x14a,\r\n  \"ETH\":0xd0, \"ETH;\":0xd0,\r\n  \"Eacute\":0xc9, \"Eacute;\":0xc9,\r\n  \"Ecaron;\":0x11a, \"Ecirc\":0xca,\r\n  \"Ecirc;\":0xca, \"Ecy;\":0x42d,\r\n  \"Edot;\":0x116, \"Efr;\":[0xd835,0xdd08],\r\n  \"Egrave\":0xc8, \"Egrave;\":0xc8,\r\n  \"Element;\":0x2208, \"Emacr;\":0x112,\r\n  \"EmptySmallSquare;\":0x25fb, \"EmptyVerySmallSquare;\":0x25ab,\r\n  \"Eogon;\":0x118, \"Eopf;\":[0xd835,0xdd3c],\r\n  \"Epsilon;\":0x395, \"Equal;\":0x2a75,\r\n  \"EqualTilde;\":0x2242, \"Equilibrium;\":0x21cc,\r\n  \"Escr;\":0x2130, \"Esim;\":0x2a73,\r\n  \"Eta;\":0x397, \"Euml\":0xcb,\r\n  \"Euml;\":0xcb, \"Exists;\":0x2203,\r\n  \"ExponentialE;\":0x2147, \"Fcy;\":0x424,\r\n  \"Ffr;\":[0xd835,0xdd09], \"FilledSmallSquare;\":0x25fc,\r\n  \"FilledVerySmallSquare;\":0x25aa, \"Fopf;\":[0xd835,0xdd3d],\r\n  \"ForAll;\":0x2200, \"Fouriertrf;\":0x2131,\r\n  \"Fscr;\":0x2131, \"GJcy;\":0x403,\r\n  \"GT\":0x3e, \"GT;\":0x3e,\r\n  \"Gamma;\":0x393, \"Gammad;\":0x3dc,\r\n  \"Gbreve;\":0x11e, \"Gcedil;\":0x122,\r\n  \"Gcirc;\":0x11c, \"Gcy;\":0x413,\r\n  \"Gdot;\":0x120, \"Gfr;\":[0xd835,0xdd0a],\r\n  \"Gg;\":0x22d9, \"Gopf;\":[0xd835,0xdd3e],\r\n  \"GreaterEqual;\":0x2265, \"GreaterEqualLess;\":0x22db,\r\n  \"GreaterFullEqual;\":0x2267, \"GreaterGreater;\":0x2aa2,\r\n  \"GreaterLess;\":0x2277, \"GreaterSlantEqual;\":0x2a7e,\r\n  \"GreaterTilde;\":0x2273, \"Gscr;\":[0xd835,0xdca2],\r\n  \"Gt;\":0x226b, \"HARDcy;\":0x42a,\r\n  \"Hacek;\":0x2c7, \"Hat;\":0x5e,\r\n  \"Hcirc;\":0x124, \"Hfr;\":0x210c,\r\n  \"HilbertSpace;\":0x210b, \"Hopf;\":0x210d,\r\n  \"HorizontalLine;\":0x2500, \"Hscr;\":0x210b,\r\n  \"Hstrok;\":0x126, \"HumpDownHump;\":0x224e,\r\n  \"HumpEqual;\":0x224f, \"IEcy;\":0x415,\r\n  \"IJlig;\":0x132, \"IOcy;\":0x401,\r\n  \"Iacute\":0xcd, \"Iacute;\":0xcd,\r\n  \"Icirc\":0xce, \"Icirc;\":0xce,\r\n  \"Icy;\":0x418, \"Idot;\":0x130,\r\n  \"Ifr;\":0x2111, \"Igrave\":0xcc,\r\n  \"Igrave;\":0xcc, \"Im;\":0x2111,\r\n  \"Imacr;\":0x12a, \"ImaginaryI;\":0x2148,\r\n  \"Implies;\":0x21d2, \"Int;\":0x222c,\r\n  \"Integral;\":0x222b, \"Intersection;\":0x22c2,\r\n  \"InvisibleComma;\":0x2063, \"InvisibleTimes;\":0x2062,\r\n  \"Iogon;\":0x12e, \"Iopf;\":[0xd835,0xdd40],\r\n  \"Iota;\":0x399, \"Iscr;\":0x2110,\r\n  \"Itilde;\":0x128, \"Iukcy;\":0x406,\r\n  \"Iuml\":0xcf, \"Iuml;\":0xcf,\r\n  \"Jcirc;\":0x134, \"Jcy;\":0x419,\r\n  \"Jfr;\":[0xd835,0xdd0d], \"Jopf;\":[0xd835,0xdd41],\r\n  \"Jscr;\":[0xd835,0xdca5], \"Jsercy;\":0x408,\r\n  \"Jukcy;\":0x404, \"KHcy;\":0x425,\r\n  \"KJcy;\":0x40c, \"Kappa;\":0x39a,\r\n  \"Kcedil;\":0x136, \"Kcy;\":0x41a,\r\n  \"Kfr;\":[0xd835,0xdd0e], \"Kopf;\":[0xd835,0xdd42],\r\n  \"Kscr;\":[0xd835,0xdca6], \"LJcy;\":0x409,\r\n  \"LT\":0x3c, \"LT;\":0x3c,\r\n  \"Lacute;\":0x139, \"Lambda;\":0x39b,\r\n  \"Lang;\":0x27ea, \"Laplacetrf;\":0x2112,\r\n  \"Larr;\":0x219e, \"Lcaron;\":0x13d,\r\n  \"Lcedil;\":0x13b, \"Lcy;\":0x41b,\r\n  \"LeftAngleBracket;\":0x27e8, \"LeftArrow;\":0x2190,\r\n  \"LeftArrowBar;\":0x21e4, \"LeftArrowRightArrow;\":0x21c6,\r\n  \"LeftCeiling;\":0x2308, \"LeftDoubleBracket;\":0x27e6,\r\n  \"LeftDownTeeVector;\":0x2961, \"LeftDownVector;\":0x21c3,\r\n  \"LeftDownVectorBar;\":0x2959, \"LeftFloor;\":0x230a,\r\n  \"LeftRightArrow;\":0x2194, \"LeftRightVector;\":0x294e,\r\n  \"LeftTee;\":0x22a3, \"LeftTeeArrow;\":0x21a4,\r\n  \"LeftTeeVector;\":0x295a, \"LeftTriangle;\":0x22b2,\r\n  \"LeftTriangleBar;\":0x29cf, \"LeftTriangleEqual;\":0x22b4,\r\n  \"LeftUpDownVector;\":0x2951, \"LeftUpTeeVector;\":0x2960,\r\n  \"LeftUpVector;\":0x21bf, \"LeftUpVectorBar;\":0x2958,\r\n  \"LeftVector;\":0x21bc, \"LeftVectorBar;\":0x2952,\r\n  \"Leftarrow;\":0x21d0, \"Leftrightarrow;\":0x21d4,\r\n  \"LessEqualGreater;\":0x22da, \"LessFullEqual;\":0x2266,\r\n  \"LessGreater;\":0x2276, \"LessLess;\":0x2aa1,\r\n  \"LessSlantEqual;\":0x2a7d, \"LessTilde;\":0x2272,\r\n  \"Lfr;\":[0xd835,0xdd0f], \"Ll;\":0x22d8,\r\n  \"Lleftarrow;\":0x21da, \"Lmidot;\":0x13f,\r\n  \"LongLeftArrow;\":0x27f5, \"LongLeftRightArrow;\":0x27f7,\r\n  \"LongRightArrow;\":0x27f6, \"Longleftarrow;\":0x27f8,\r\n  \"Longleftrightarrow;\":0x27fa, \"Longrightarrow;\":0x27f9,\r\n  \"Lopf;\":[0xd835,0xdd43], \"LowerLeftArrow;\":0x2199,\r\n  \"LowerRightArrow;\":0x2198, \"Lscr;\":0x2112,\r\n  \"Lsh;\":0x21b0, \"Lstrok;\":0x141,\r\n  \"Lt;\":0x226a, \"Map;\":0x2905,\r\n  \"Mcy;\":0x41c, \"MediumSpace;\":0x205f,\r\n  \"Mellintrf;\":0x2133, \"Mfr;\":[0xd835,0xdd10],\r\n  \"MinusPlus;\":0x2213, \"Mopf;\":[0xd835,0xdd44],\r\n  \"Mscr;\":0x2133, \"Mu;\":0x39c,\r\n  \"NJcy;\":0x40a, \"Nacute;\":0x143,\r\n  \"Ncaron;\":0x147, \"Ncedil;\":0x145,\r\n  \"Ncy;\":0x41d, \"NegativeMediumSpace;\":0x200b,\r\n  \"NegativeThickSpace;\":0x200b, \"NegativeThinSpace;\":0x200b,\r\n  \"NegativeVeryThinSpace;\":0x200b, \"NestedGreaterGreater;\":0x226b,\r\n  \"NestedLessLess;\":0x226a, \"NewLine;\":0xa,\r\n  \"Nfr;\":[0xd835,0xdd11], \"NoBreak;\":0x2060,\r\n  \"NonBreakingSpace;\":0xa0, \"Nopf;\":0x2115,\r\n  \"Not;\":0x2aec, \"NotCongruent;\":0x2262,\r\n  \"NotCupCap;\":0x226d, \"NotDoubleVerticalBar;\":0x2226,\r\n  \"NotElement;\":0x2209, \"NotEqual;\":0x2260,\r\n  \"NotEqualTilde;\":[0x2242,0x338], \"NotExists;\":0x2204,\r\n  \"NotGreater;\":0x226f, \"NotGreaterEqual;\":0x2271,\r\n  \"NotGreaterFullEqual;\":[0x2267,0x338], \"NotGreaterGreater;\":[0x226b,0x338],\r\n  \"NotGreaterLess;\":0x2279, \"NotGreaterSlantEqual;\":[0x2a7e,0x338],\r\n  \"NotGreaterTilde;\":0x2275, \"NotHumpDownHump;\":[0x224e,0x338],\r\n  \"NotHumpEqual;\":[0x224f,0x338], \"NotLeftTriangle;\":0x22ea,\r\n  \"NotLeftTriangleBar;\":[0x29cf,0x338], \"NotLeftTriangleEqual;\":0x22ec,\r\n  \"NotLess;\":0x226e, \"NotLessEqual;\":0x2270,\r\n  \"NotLessGreater;\":0x2278, \"NotLessLess;\":[0x226a,0x338],\r\n  \"NotLessSlantEqual;\":[0x2a7d,0x338], \"NotLessTilde;\":0x2274,\r\n  \"NotNestedGreaterGreater;\":[0x2aa2,0x338], \"NotNestedLessLess;\":[0x2aa1,0x338],\r\n  \"NotPrecedes;\":0x2280, \"NotPrecedesEqual;\":[0x2aaf,0x338],\r\n  \"NotPrecedesSlantEqual;\":0x22e0, \"NotReverseElement;\":0x220c,\r\n  \"NotRightTriangle;\":0x22eb, \"NotRightTriangleBar;\":[0x29d0,0x338],\r\n  \"NotRightTriangleEqual;\":0x22ed, \"NotSquareSubset;\":[0x228f,0x338],\r\n  \"NotSquareSubsetEqual;\":0x22e2, \"NotSquareSuperset;\":[0x2290,0x338],\r\n  \"NotSquareSupersetEqual;\":0x22e3, \"NotSubset;\":[0x2282,0x20d2],\r\n  \"NotSubsetEqual;\":0x2288, \"NotSucceeds;\":0x2281,\r\n  \"NotSucceedsEqual;\":[0x2ab0,0x338], \"NotSucceedsSlantEqual;\":0x22e1,\r\n  \"NotSucceedsTilde;\":[0x227f,0x338], \"NotSuperset;\":[0x2283,0x20d2],\r\n  \"NotSupersetEqual;\":0x2289, \"NotTilde;\":0x2241,\r\n  \"NotTildeEqual;\":0x2244, \"NotTildeFullEqual;\":0x2247,\r\n  \"NotTildeTilde;\":0x2249, \"NotVerticalBar;\":0x2224,\r\n  \"Nscr;\":[0xd835,0xdca9], \"Ntilde\":0xd1,\r\n  \"Ntilde;\":0xd1, \"Nu;\":0x39d,\r\n  \"OElig;\":0x152, \"Oacute\":0xd3,\r\n  \"Oacute;\":0xd3, \"Ocirc\":0xd4,\r\n  \"Ocirc;\":0xd4, \"Ocy;\":0x41e,\r\n  \"Odblac;\":0x150, \"Ofr;\":[0xd835,0xdd12],\r\n  \"Ograve\":0xd2, \"Ograve;\":0xd2,\r\n  \"Omacr;\":0x14c, \"Omega;\":0x3a9,\r\n  \"Omicron;\":0x39f, \"Oopf;\":[0xd835,0xdd46],\r\n  \"OpenCurlyDoubleQuote;\":0x201c, \"OpenCurlyQuote;\":0x2018,\r\n  \"Or;\":0x2a54, \"Oscr;\":[0xd835,0xdcaa],\r\n  \"Oslash\":0xd8, \"Oslash;\":0xd8,\r\n  \"Otilde\":0xd5, \"Otilde;\":0xd5,\r\n  \"Otimes;\":0x2a37, \"Ouml\":0xd6,\r\n  \"Ouml;\":0xd6, \"OverBar;\":0x203e,\r\n  \"OverBrace;\":0x23de, \"OverBracket;\":0x23b4,\r\n  \"OverParenthesis;\":0x23dc, \"PartialD;\":0x2202,\r\n  \"Pcy;\":0x41f, \"Pfr;\":[0xd835,0xdd13],\r\n  \"Phi;\":0x3a6, \"Pi;\":0x3a0,\r\n  \"PlusMinus;\":0xb1, \"Poincareplane;\":0x210c,\r\n  \"Popf;\":0x2119, \"Pr;\":0x2abb,\r\n  \"Precedes;\":0x227a, \"PrecedesEqual;\":0x2aaf,\r\n  \"PrecedesSlantEqual;\":0x227c, \"PrecedesTilde;\":0x227e,\r\n  \"Prime;\":0x2033, \"Product;\":0x220f,\r\n  \"Proportion;\":0x2237, \"Proportional;\":0x221d,\r\n  \"Pscr;\":[0xd835,0xdcab], \"Psi;\":0x3a8,\r\n  \"QUOT\":0x22, \"QUOT;\":0x22,\r\n  \"Qfr;\":[0xd835,0xdd14], \"Qopf;\":0x211a,\r\n  \"Qscr;\":[0xd835,0xdcac], \"RBarr;\":0x2910,\r\n  \"REG\":0xae, \"REG;\":0xae,\r\n  \"Racute;\":0x154, \"Rang;\":0x27eb,\r\n  \"Rarr;\":0x21a0, \"Rarrtl;\":0x2916,\r\n  \"Rcaron;\":0x158, \"Rcedil;\":0x156,\r\n  \"Rcy;\":0x420, \"Re;\":0x211c,\r\n  \"ReverseElement;\":0x220b, \"ReverseEquilibrium;\":0x21cb,\r\n  \"ReverseUpEquilibrium;\":0x296f, \"Rfr;\":0x211c,\r\n  \"Rho;\":0x3a1, \"RightAngleBracket;\":0x27e9,\r\n  \"RightArrow;\":0x2192, \"RightArrowBar;\":0x21e5,\r\n  \"RightArrowLeftArrow;\":0x21c4, \"RightCeiling;\":0x2309,\r\n  \"RightDoubleBracket;\":0x27e7, \"RightDownTeeVector;\":0x295d,\r\n  \"RightDownVector;\":0x21c2, \"RightDownVectorBar;\":0x2955,\r\n  \"RightFloor;\":0x230b, \"RightTee;\":0x22a2,\r\n  \"RightTeeArrow;\":0x21a6, \"RightTeeVector;\":0x295b,\r\n  \"RightTriangle;\":0x22b3, \"RightTriangleBar;\":0x29d0,\r\n  \"RightTriangleEqual;\":0x22b5, \"RightUpDownVector;\":0x294f,\r\n  \"RightUpTeeVector;\":0x295c, \"RightUpVector;\":0x21be,\r\n  \"RightUpVectorBar;\":0x2954, \"RightVector;\":0x21c0,\r\n  \"RightVectorBar;\":0x2953, \"Rightarrow;\":0x21d2,\r\n  \"Ropf;\":0x211d, \"RoundImplies;\":0x2970,\r\n  \"Rrightarrow;\":0x21db, \"Rscr;\":0x211b,\r\n  \"Rsh;\":0x21b1, \"RuleDelayed;\":0x29f4,\r\n  \"SHCHcy;\":0x429, \"SHcy;\":0x428,\r\n  \"SOFTcy;\":0x42c, \"Sacute;\":0x15a,\r\n  \"Sc;\":0x2abc, \"Scaron;\":0x160,\r\n  \"Scedil;\":0x15e, \"Scirc;\":0x15c,\r\n  \"Scy;\":0x421, \"Sfr;\":[0xd835,0xdd16],\r\n  \"ShortDownArrow;\":0x2193, \"ShortLeftArrow;\":0x2190,\r\n  \"ShortRightArrow;\":0x2192, \"ShortUpArrow;\":0x2191,\r\n  \"Sigma;\":0x3a3, \"SmallCircle;\":0x2218,\r\n  \"Sopf;\":[0xd835,0xdd4a], \"Sqrt;\":0x221a,\r\n  \"Square;\":0x25a1, \"SquareIntersection;\":0x2293,\r\n  \"SquareSubset;\":0x228f, \"SquareSubsetEqual;\":0x2291,\r\n  \"SquareSuperset;\":0x2290, \"SquareSupersetEqual;\":0x2292,\r\n  \"SquareUnion;\":0x2294, \"Sscr;\":[0xd835,0xdcae],\r\n  \"Star;\":0x22c6, \"Sub;\":0x22d0,\r\n  \"Subset;\":0x22d0, \"SubsetEqual;\":0x2286,\r\n  \"Succeeds;\":0x227b, \"SucceedsEqual;\":0x2ab0,\r\n  \"SucceedsSlantEqual;\":0x227d, \"SucceedsTilde;\":0x227f,\r\n  \"SuchThat;\":0x220b, \"Sum;\":0x2211,\r\n  \"Sup;\":0x22d1, \"Superset;\":0x2283,\r\n  \"SupersetEqual;\":0x2287, \"Supset;\":0x22d1,\r\n  \"THORN\":0xde, \"THORN;\":0xde,\r\n  \"TRADE;\":0x2122, \"TSHcy;\":0x40b,\r\n  \"TScy;\":0x426, \"Tab;\":0x9,\r\n  \"Tau;\":0x3a4, \"Tcaron;\":0x164,\r\n  \"Tcedil;\":0x162, \"Tcy;\":0x422,\r\n  \"Tfr;\":[0xd835,0xdd17], \"Therefore;\":0x2234,\r\n  \"Theta;\":0x398, \"ThickSpace;\":[0x205f,0x200a],\r\n  \"ThinSpace;\":0x2009, \"Tilde;\":0x223c,\r\n  \"TildeEqual;\":0x2243, \"TildeFullEqual;\":0x2245,\r\n  \"TildeTilde;\":0x2248, \"Topf;\":[0xd835,0xdd4b],\r\n  \"TripleDot;\":0x20db, \"Tscr;\":[0xd835,0xdcaf],\r\n  \"Tstrok;\":0x166, \"Uacute\":0xda,\r\n  \"Uacute;\":0xda, \"Uarr;\":0x219f,\r\n  \"Uarrocir;\":0x2949, \"Ubrcy;\":0x40e,\r\n  \"Ubreve;\":0x16c, \"Ucirc\":0xdb,\r\n  \"Ucirc;\":0xdb, \"Ucy;\":0x423,\r\n  \"Udblac;\":0x170, \"Ufr;\":[0xd835,0xdd18],\r\n  \"Ugrave\":0xd9, \"Ugrave;\":0xd9,\r\n  \"Umacr;\":0x16a, \"UnderBar;\":0x5f,\r\n  \"UnderBrace;\":0x23df, \"UnderBracket;\":0x23b5,\r\n  \"UnderParenthesis;\":0x23dd, \"Union;\":0x22c3,\r\n  \"UnionPlus;\":0x228e, \"Uogon;\":0x172,\r\n  \"Uopf;\":[0xd835,0xdd4c], \"UpArrow;\":0x2191,\r\n  \"UpArrowBar;\":0x2912, \"UpArrowDownArrow;\":0x21c5,\r\n  \"UpDownArrow;\":0x2195, \"UpEquilibrium;\":0x296e,\r\n  \"UpTee;\":0x22a5, \"UpTeeArrow;\":0x21a5,\r\n  \"Uparrow;\":0x21d1, \"Updownarrow;\":0x21d5,\r\n  \"UpperLeftArrow;\":0x2196, \"UpperRightArrow;\":0x2197,\r\n  \"Upsi;\":0x3d2, \"Upsilon;\":0x3a5,\r\n  \"Uring;\":0x16e, \"Uscr;\":[0xd835,0xdcb0],\r\n  \"Utilde;\":0x168, \"Uuml\":0xdc,\r\n  \"Uuml;\":0xdc, \"VDash;\":0x22ab,\r\n  \"Vbar;\":0x2aeb, \"Vcy;\":0x412,\r\n  \"Vdash;\":0x22a9, \"Vdashl;\":0x2ae6,\r\n  \"Vee;\":0x22c1, \"Verbar;\":0x2016,\r\n  \"Vert;\":0x2016, \"VerticalBar;\":0x2223,\r\n  \"VerticalLine;\":0x7c, \"VerticalSeparator;\":0x2758,\r\n  \"VerticalTilde;\":0x2240, \"VeryThinSpace;\":0x200a,\r\n  \"Vfr;\":[0xd835,0xdd19], \"Vopf;\":[0xd835,0xdd4d],\r\n  \"Vscr;\":[0xd835,0xdcb1], \"Vvdash;\":0x22aa,\r\n  \"Wcirc;\":0x174, \"Wedge;\":0x22c0,\r\n  \"Wfr;\":[0xd835,0xdd1a], \"Wopf;\":[0xd835,0xdd4e],\r\n  \"Wscr;\":[0xd835,0xdcb2], \"Xfr;\":[0xd835,0xdd1b],\r\n  \"Xi;\":0x39e, \"Xopf;\":[0xd835,0xdd4f],\r\n  \"Xscr;\":[0xd835,0xdcb3], \"YAcy;\":0x42f,\r\n  \"YIcy;\":0x407, \"YUcy;\":0x42e,\r\n  \"Yacute\":0xdd, \"Yacute;\":0xdd,\r\n  \"Ycirc;\":0x176, \"Ycy;\":0x42b,\r\n  \"Yfr;\":[0xd835,0xdd1c], \"Yopf;\":[0xd835,0xdd50],\r\n  \"Yscr;\":[0xd835,0xdcb4], \"Yuml;\":0x178,\r\n  \"ZHcy;\":0x416, \"Zacute;\":0x179,\r\n  \"Zcaron;\":0x17d, \"Zcy;\":0x417,\r\n  \"Zdot;\":0x17b, \"ZeroWidthSpace;\":0x200b,\r\n  \"Zeta;\":0x396, \"Zfr;\":0x2128,\r\n  \"Zopf;\":0x2124, \"Zscr;\":[0xd835,0xdcb5],\r\n  \"aacute\":0xe1, \"aacute;\":0xe1,\r\n  \"abreve;\":0x103, \"ac;\":0x223e,\r\n  \"acE;\":[0x223e,0x333], \"acd;\":0x223f,\r\n  \"acirc\":0xe2, \"acirc;\":0xe2,\r\n  \"acute\":0xb4, \"acute;\":0xb4,\r\n  \"acy;\":0x430, \"aelig\":0xe6,\r\n  \"aelig;\":0xe6, \"af;\":0x2061,\r\n  \"afr;\":[0xd835,0xdd1e], \"agrave\":0xe0,\r\n  \"agrave;\":0xe0, \"alefsym;\":0x2135,\r\n  \"aleph;\":0x2135, \"alpha;\":0x3b1,\r\n  \"amacr;\":0x101, \"amalg;\":0x2a3f,\r\n  \"amp\":0x26, \"amp;\":0x26,\r\n  \"and;\":0x2227, \"andand;\":0x2a55,\r\n  \"andd;\":0x2a5c, \"andslope;\":0x2a58,\r\n  \"andv;\":0x2a5a, \"ang;\":0x2220,\r\n  \"ange;\":0x29a4, \"angle;\":0x2220,\r\n  \"angmsd;\":0x2221, \"angmsdaa;\":0x29a8,\r\n  \"angmsdab;\":0x29a9, \"angmsdac;\":0x29aa,\r\n  \"angmsdad;\":0x29ab, \"angmsdae;\":0x29ac,\r\n  \"angmsdaf;\":0x29ad, \"angmsdag;\":0x29ae,\r\n  \"angmsdah;\":0x29af, \"angrt;\":0x221f,\r\n  \"angrtvb;\":0x22be, \"angrtvbd;\":0x299d,\r\n  \"angsph;\":0x2222, \"angst;\":0xc5,\r\n  \"angzarr;\":0x237c, \"aogon;\":0x105,\r\n  \"aopf;\":[0xd835,0xdd52], \"ap;\":0x2248,\r\n  \"apE;\":0x2a70, \"apacir;\":0x2a6f,\r\n  \"ape;\":0x224a, \"apid;\":0x224b,\r\n  \"apos;\":0x27, \"approx;\":0x2248,\r\n  \"approxeq;\":0x224a, \"aring\":0xe5,\r\n  \"aring;\":0xe5, \"ascr;\":[0xd835,0xdcb6],\r\n  \"ast;\":0x2a, \"asymp;\":0x2248,\r\n  \"asympeq;\":0x224d, \"atilde\":0xe3,\r\n  \"atilde;\":0xe3, \"auml\":0xe4,\r\n  \"auml;\":0xe4, \"awconint;\":0x2233,\r\n  \"awint;\":0x2a11, \"bNot;\":0x2aed,\r\n  \"backcong;\":0x224c, \"backepsilon;\":0x3f6,\r\n  \"backprime;\":0x2035, \"backsim;\":0x223d,\r\n  \"backsimeq;\":0x22cd, \"barvee;\":0x22bd,\r\n  \"barwed;\":0x2305, \"barwedge;\":0x2305,\r\n  \"bbrk;\":0x23b5, \"bbrktbrk;\":0x23b6,\r\n  \"bcong;\":0x224c, \"bcy;\":0x431,\r\n  \"bdquo;\":0x201e, \"becaus;\":0x2235,\r\n  \"because;\":0x2235, \"bemptyv;\":0x29b0,\r\n  \"bepsi;\":0x3f6, \"bernou;\":0x212c,\r\n  \"beta;\":0x3b2, \"beth;\":0x2136,\r\n  \"between;\":0x226c, \"bfr;\":[0xd835,0xdd1f],\r\n  \"bigcap;\":0x22c2, \"bigcirc;\":0x25ef,\r\n  \"bigcup;\":0x22c3, \"bigodot;\":0x2a00,\r\n  \"bigoplus;\":0x2a01, \"bigotimes;\":0x2a02,\r\n  \"bigsqcup;\":0x2a06, \"bigstar;\":0x2605,\r\n  \"bigtriangledown;\":0x25bd, \"bigtriangleup;\":0x25b3,\r\n  \"biguplus;\":0x2a04, \"bigvee;\":0x22c1,\r\n  \"bigwedge;\":0x22c0, \"bkarow;\":0x290d,\r\n  \"blacklozenge;\":0x29eb, \"blacksquare;\":0x25aa,\r\n  \"blacktriangle;\":0x25b4, \"blacktriangledown;\":0x25be,\r\n  \"blacktriangleleft;\":0x25c2, \"blacktriangleright;\":0x25b8,\r\n  \"blank;\":0x2423, \"blk12;\":0x2592,\r\n  \"blk14;\":0x2591, \"blk34;\":0x2593,\r\n  \"block;\":0x2588, \"bne;\":[0x3d,0x20e5],\r\n  \"bnequiv;\":[0x2261,0x20e5], \"bnot;\":0x2310,\r\n  \"bopf;\":[0xd835,0xdd53], \"bot;\":0x22a5,\r\n  \"bottom;\":0x22a5, \"bowtie;\":0x22c8,\r\n  \"boxDL;\":0x2557, \"boxDR;\":0x2554,\r\n  \"boxDl;\":0x2556, \"boxDr;\":0x2553,\r\n  \"boxH;\":0x2550, \"boxHD;\":0x2566,\r\n  \"boxHU;\":0x2569, \"boxHd;\":0x2564,\r\n  \"boxHu;\":0x2567, \"boxUL;\":0x255d,\r\n  \"boxUR;\":0x255a, \"boxUl;\":0x255c,\r\n  \"boxUr;\":0x2559, \"boxV;\":0x2551,\r\n  \"boxVH;\":0x256c, \"boxVL;\":0x2563,\r\n  \"boxVR;\":0x2560, \"boxVh;\":0x256b,\r\n  \"boxVl;\":0x2562, \"boxVr;\":0x255f,\r\n  \"boxbox;\":0x29c9, \"boxdL;\":0x2555,\r\n  \"boxdR;\":0x2552, \"boxdl;\":0x2510,\r\n  \"boxdr;\":0x250c, \"boxh;\":0x2500,\r\n  \"boxhD;\":0x2565, \"boxhU;\":0x2568,\r\n  \"boxhd;\":0x252c, \"boxhu;\":0x2534,\r\n  \"boxminus;\":0x229f, \"boxplus;\":0x229e,\r\n  \"boxtimes;\":0x22a0, \"boxuL;\":0x255b,\r\n  \"boxuR;\":0x2558, \"boxul;\":0x2518,\r\n  \"boxur;\":0x2514, \"boxv;\":0x2502,\r\n  \"boxvH;\":0x256a, \"boxvL;\":0x2561,\r\n  \"boxvR;\":0x255e, \"boxvh;\":0x253c,\r\n  \"boxvl;\":0x2524, \"boxvr;\":0x251c,\r\n  \"bprime;\":0x2035, \"breve;\":0x2d8,\r\n  \"brvbar\":0xa6, \"brvbar;\":0xa6,\r\n  \"bscr;\":[0xd835,0xdcb7], \"bsemi;\":0x204f,\r\n  \"bsim;\":0x223d, \"bsime;\":0x22cd,\r\n  \"bsol;\":0x5c, \"bsolb;\":0x29c5,\r\n  \"bsolhsub;\":0x27c8, \"bull;\":0x2022,\r\n  \"bullet;\":0x2022, \"bump;\":0x224e,\r\n  \"bumpE;\":0x2aae, \"bumpe;\":0x224f,\r\n  \"bumpeq;\":0x224f, \"cacute;\":0x107,\r\n  \"cap;\":0x2229, \"capand;\":0x2a44,\r\n  \"capbrcup;\":0x2a49, \"capcap;\":0x2a4b,\r\n  \"capcup;\":0x2a47, \"capdot;\":0x2a40,\r\n  \"caps;\":[0x2229,0xfe00], \"caret;\":0x2041,\r\n  \"caron;\":0x2c7, \"ccaps;\":0x2a4d,\r\n  \"ccaron;\":0x10d, \"ccedil\":0xe7,\r\n  \"ccedil;\":0xe7, \"ccirc;\":0x109,\r\n  \"ccups;\":0x2a4c, \"ccupssm;\":0x2a50,\r\n  \"cdot;\":0x10b, \"cedil\":0xb8,\r\n  \"cedil;\":0xb8, \"cemptyv;\":0x29b2,\r\n  \"cent\":0xa2, \"cent;\":0xa2,\r\n  \"centerdot;\":0xb7, \"cfr;\":[0xd835,0xdd20],\r\n  \"chcy;\":0x447, \"check;\":0x2713,\r\n  \"checkmark;\":0x2713, \"chi;\":0x3c7,\r\n  \"cir;\":0x25cb, \"cirE;\":0x29c3,\r\n  \"circ;\":0x2c6, \"circeq;\":0x2257,\r\n  \"circlearrowleft;\":0x21ba, \"circlearrowright;\":0x21bb,\r\n  \"circledR;\":0xae, \"circledS;\":0x24c8,\r\n  \"circledast;\":0x229b, \"circledcirc;\":0x229a,\r\n  \"circleddash;\":0x229d, \"cire;\":0x2257,\r\n  \"cirfnint;\":0x2a10, \"cirmid;\":0x2aef,\r\n  \"cirscir;\":0x29c2, \"clubs;\":0x2663,\r\n  \"clubsuit;\":0x2663, \"colon;\":0x3a,\r\n  \"colone;\":0x2254, \"coloneq;\":0x2254,\r\n  \"comma;\":0x2c, \"commat;\":0x40,\r\n  \"comp;\":0x2201, \"compfn;\":0x2218,\r\n  \"complement;\":0x2201, \"complexes;\":0x2102,\r\n  \"cong;\":0x2245, \"congdot;\":0x2a6d,\r\n  \"conint;\":0x222e, \"copf;\":[0xd835,0xdd54],\r\n  \"coprod;\":0x2210, \"copy\":0xa9,\r\n  \"copy;\":0xa9, \"copysr;\":0x2117,\r\n  \"crarr;\":0x21b5, \"cross;\":0x2717,\r\n  \"cscr;\":[0xd835,0xdcb8], \"csub;\":0x2acf,\r\n  \"csube;\":0x2ad1, \"csup;\":0x2ad0,\r\n  \"csupe;\":0x2ad2, \"ctdot;\":0x22ef,\r\n  \"cudarrl;\":0x2938, \"cudarrr;\":0x2935,\r\n  \"cuepr;\":0x22de, \"cuesc;\":0x22df,\r\n  \"cularr;\":0x21b6, \"cularrp;\":0x293d,\r\n  \"cup;\":0x222a, \"cupbrcap;\":0x2a48,\r\n  \"cupcap;\":0x2a46, \"cupcup;\":0x2a4a,\r\n  \"cupdot;\":0x228d, \"cupor;\":0x2a45,\r\n  \"cups;\":[0x222a,0xfe00], \"curarr;\":0x21b7,\r\n  \"curarrm;\":0x293c, \"curlyeqprec;\":0x22de,\r\n  \"curlyeqsucc;\":0x22df, \"curlyvee;\":0x22ce,\r\n  \"curlywedge;\":0x22cf, \"curren\":0xa4,\r\n  \"curren;\":0xa4, \"curvearrowleft;\":0x21b6,\r\n  \"curvearrowright;\":0x21b7, \"cuvee;\":0x22ce,\r\n  \"cuwed;\":0x22cf, \"cwconint;\":0x2232,\r\n  \"cwint;\":0x2231, \"cylcty;\":0x232d,\r\n  \"dArr;\":0x21d3, \"dHar;\":0x2965,\r\n  \"dagger;\":0x2020, \"daleth;\":0x2138,\r\n  \"darr;\":0x2193, \"dash;\":0x2010,\r\n  \"dashv;\":0x22a3, \"dbkarow;\":0x290f,\r\n  \"dblac;\":0x2dd, \"dcaron;\":0x10f,\r\n  \"dcy;\":0x434, \"dd;\":0x2146,\r\n  \"ddagger;\":0x2021, \"ddarr;\":0x21ca,\r\n  \"ddotseq;\":0x2a77, \"deg\":0xb0,\r\n  \"deg;\":0xb0, \"delta;\":0x3b4,\r\n  \"demptyv;\":0x29b1, \"dfisht;\":0x297f,\r\n  \"dfr;\":[0xd835,0xdd21], \"dharl;\":0x21c3,\r\n  \"dharr;\":0x21c2, \"diam;\":0x22c4,\r\n  \"diamond;\":0x22c4, \"diamondsuit;\":0x2666,\r\n  \"diams;\":0x2666, \"die;\":0xa8,\r\n  \"digamma;\":0x3dd, \"disin;\":0x22f2,\r\n  \"div;\":0xf7, \"divide\":0xf7,\r\n  \"divide;\":0xf7, \"divideontimes;\":0x22c7,\r\n  \"divonx;\":0x22c7, \"djcy;\":0x452,\r\n  \"dlcorn;\":0x231e, \"dlcrop;\":0x230d,\r\n  \"dollar;\":0x24, \"dopf;\":[0xd835,0xdd55],\r\n  \"dot;\":0x2d9, \"doteq;\":0x2250,\r\n  \"doteqdot;\":0x2251, \"dotminus;\":0x2238,\r\n  \"dotplus;\":0x2214, \"dotsquare;\":0x22a1,\r\n  \"doublebarwedge;\":0x2306, \"downarrow;\":0x2193,\r\n  \"downdownarrows;\":0x21ca, \"downharpoonleft;\":0x21c3,\r\n  \"downharpoonright;\":0x21c2, \"drbkarow;\":0x2910,\r\n  \"drcorn;\":0x231f, \"drcrop;\":0x230c,\r\n  \"dscr;\":[0xd835,0xdcb9], \"dscy;\":0x455,\r\n  \"dsol;\":0x29f6, \"dstrok;\":0x111,\r\n  \"dtdot;\":0x22f1, \"dtri;\":0x25bf,\r\n  \"dtrif;\":0x25be, \"duarr;\":0x21f5,\r\n  \"duhar;\":0x296f, \"dwangle;\":0x29a6,\r\n  \"dzcy;\":0x45f, \"dzigrarr;\":0x27ff,\r\n  \"eDDot;\":0x2a77, \"eDot;\":0x2251,\r\n  \"eacute\":0xe9, \"eacute;\":0xe9,\r\n  \"easter;\":0x2a6e, \"ecaron;\":0x11b,\r\n  \"ecir;\":0x2256, \"ecirc\":0xea,\r\n  \"ecirc;\":0xea, \"ecolon;\":0x2255,\r\n  \"ecy;\":0x44d, \"edot;\":0x117,\r\n  \"ee;\":0x2147, \"efDot;\":0x2252,\r\n  \"efr;\":[0xd835,0xdd22], \"eg;\":0x2a9a,\r\n  \"egrave\":0xe8, \"egrave;\":0xe8,\r\n  \"egs;\":0x2a96, \"egsdot;\":0x2a98,\r\n  \"el;\":0x2a99, \"elinters;\":0x23e7,\r\n  \"ell;\":0x2113, \"els;\":0x2a95,\r\n  \"elsdot;\":0x2a97, \"emacr;\":0x113,\r\n  \"empty;\":0x2205, \"emptyset;\":0x2205,\r\n  \"emptyv;\":0x2205, \"emsp13;\":0x2004,\r\n  \"emsp14;\":0x2005, \"emsp;\":0x2003,\r\n  \"eng;\":0x14b, \"ensp;\":0x2002,\r\n  \"eogon;\":0x119, \"eopf;\":[0xd835,0xdd56],\r\n  \"epar;\":0x22d5, \"eparsl;\":0x29e3,\r\n  \"eplus;\":0x2a71, \"epsi;\":0x3b5,\r\n  \"epsilon;\":0x3b5, \"epsiv;\":0x3f5,\r\n  \"eqcirc;\":0x2256, \"eqcolon;\":0x2255,\r\n  \"eqsim;\":0x2242, \"eqslantgtr;\":0x2a96,\r\n  \"eqslantless;\":0x2a95, \"equals;\":0x3d,\r\n  \"equest;\":0x225f, \"equiv;\":0x2261,\r\n  \"equivDD;\":0x2a78, \"eqvparsl;\":0x29e5,\r\n  \"erDot;\":0x2253, \"erarr;\":0x2971,\r\n  \"escr;\":0x212f, \"esdot;\":0x2250,\r\n  \"esim;\":0x2242, \"eta;\":0x3b7,\r\n  \"eth\":0xf0, \"eth;\":0xf0,\r\n  \"euml\":0xeb, \"euml;\":0xeb,\r\n  \"euro;\":0x20ac, \"excl;\":0x21,\r\n  \"exist;\":0x2203, \"expectation;\":0x2130,\r\n  \"exponentiale;\":0x2147, \"fallingdotseq;\":0x2252,\r\n  \"fcy;\":0x444, \"female;\":0x2640,\r\n  \"ffilig;\":0xfb03, \"fflig;\":0xfb00,\r\n  \"ffllig;\":0xfb04, \"ffr;\":[0xd835,0xdd23],\r\n  \"filig;\":0xfb01, \"fjlig;\":[0x66,0x6a],\r\n  \"flat;\":0x266d, \"fllig;\":0xfb02,\r\n  \"fltns;\":0x25b1, \"fnof;\":0x192,\r\n  \"fopf;\":[0xd835,0xdd57], \"forall;\":0x2200,\r\n  \"fork;\":0x22d4, \"forkv;\":0x2ad9,\r\n  \"fpartint;\":0x2a0d, \"frac12\":0xbd,\r\n  \"frac12;\":0xbd, \"frac13;\":0x2153,\r\n  \"frac14\":0xbc, \"frac14;\":0xbc,\r\n  \"frac15;\":0x2155, \"frac16;\":0x2159,\r\n  \"frac18;\":0x215b, \"frac23;\":0x2154,\r\n  \"frac25;\":0x2156, \"frac34\":0xbe,\r\n  \"frac34;\":0xbe, \"frac35;\":0x2157,\r\n  \"frac38;\":0x215c, \"frac45;\":0x2158,\r\n  \"frac56;\":0x215a, \"frac58;\":0x215d,\r\n  \"frac78;\":0x215e, \"frasl;\":0x2044,\r\n  \"frown;\":0x2322, \"fscr;\":[0xd835,0xdcbb],\r\n  \"gE;\":0x2267, \"gEl;\":0x2a8c,\r\n  \"gacute;\":0x1f5, \"gamma;\":0x3b3,\r\n  \"gammad;\":0x3dd, \"gap;\":0x2a86,\r\n  \"gbreve;\":0x11f, \"gcirc;\":0x11d,\r\n  \"gcy;\":0x433, \"gdot;\":0x121,\r\n  \"ge;\":0x2265, \"gel;\":0x22db,\r\n  \"geq;\":0x2265, \"geqq;\":0x2267,\r\n  \"geqslant;\":0x2a7e, \"ges;\":0x2a7e,\r\n  \"gescc;\":0x2aa9, \"gesdot;\":0x2a80,\r\n  \"gesdoto;\":0x2a82, \"gesdotol;\":0x2a84,\r\n  \"gesl;\":[0x22db,0xfe00], \"gesles;\":0x2a94,\r\n  \"gfr;\":[0xd835,0xdd24], \"gg;\":0x226b,\r\n  \"ggg;\":0x22d9, \"gimel;\":0x2137,\r\n  \"gjcy;\":0x453, \"gl;\":0x2277,\r\n  \"glE;\":0x2a92, \"gla;\":0x2aa5,\r\n  \"glj;\":0x2aa4, \"gnE;\":0x2269,\r\n  \"gnap;\":0x2a8a, \"gnapprox;\":0x2a8a,\r\n  \"gne;\":0x2a88, \"gneq;\":0x2a88,\r\n  \"gneqq;\":0x2269, \"gnsim;\":0x22e7,\r\n  \"gopf;\":[0xd835,0xdd58], \"grave;\":0x60,\r\n  \"gscr;\":0x210a, \"gsim;\":0x2273,\r\n  \"gsime;\":0x2a8e, \"gsiml;\":0x2a90,\r\n  \"gt\":0x3e, \"gt;\":0x3e,\r\n  \"gtcc;\":0x2aa7, \"gtcir;\":0x2a7a,\r\n  \"gtdot;\":0x22d7, \"gtlPar;\":0x2995,\r\n  \"gtquest;\":0x2a7c, \"gtrapprox;\":0x2a86,\r\n  \"gtrarr;\":0x2978, \"gtrdot;\":0x22d7,\r\n  \"gtreqless;\":0x22db, \"gtreqqless;\":0x2a8c,\r\n  \"gtrless;\":0x2277, \"gtrsim;\":0x2273,\r\n  \"gvertneqq;\":[0x2269,0xfe00], \"gvnE;\":[0x2269,0xfe00],\r\n  \"hArr;\":0x21d4, \"hairsp;\":0x200a,\r\n  \"half;\":0xbd, \"hamilt;\":0x210b,\r\n  \"hardcy;\":0x44a, \"harr;\":0x2194,\r\n  \"harrcir;\":0x2948, \"harrw;\":0x21ad,\r\n  \"hbar;\":0x210f, \"hcirc;\":0x125,\r\n  \"hearts;\":0x2665, \"heartsuit;\":0x2665,\r\n  \"hellip;\":0x2026, \"hercon;\":0x22b9,\r\n  \"hfr;\":[0xd835,0xdd25], \"hksearow;\":0x2925,\r\n  \"hkswarow;\":0x2926, \"hoarr;\":0x21ff,\r\n  \"homtht;\":0x223b, \"hookleftarrow;\":0x21a9,\r\n  \"hookrightarrow;\":0x21aa, \"hopf;\":[0xd835,0xdd59],\r\n  \"horbar;\":0x2015, \"hscr;\":[0xd835,0xdcbd],\r\n  \"hslash;\":0x210f, \"hstrok;\":0x127,\r\n  \"hybull;\":0x2043, \"hyphen;\":0x2010,\r\n  \"iacute\":0xed, \"iacute;\":0xed,\r\n  \"ic;\":0x2063, \"icirc\":0xee,\r\n  \"icirc;\":0xee, \"icy;\":0x438,\r\n  \"iecy;\":0x435, \"iexcl\":0xa1,\r\n  \"iexcl;\":0xa1, \"iff;\":0x21d4,\r\n  \"ifr;\":[0xd835,0xdd26], \"igrave\":0xec,\r\n  \"igrave;\":0xec, \"ii;\":0x2148,\r\n  \"iiiint;\":0x2a0c, \"iiint;\":0x222d,\r\n  \"iinfin;\":0x29dc, \"iiota;\":0x2129,\r\n  \"ijlig;\":0x133, \"imacr;\":0x12b,\r\n  \"image;\":0x2111, \"imagline;\":0x2110,\r\n  \"imagpart;\":0x2111, \"imath;\":0x131,\r\n  \"imof;\":0x22b7, \"imped;\":0x1b5,\r\n  \"in;\":0x2208, \"incare;\":0x2105,\r\n  \"infin;\":0x221e, \"infintie;\":0x29dd,\r\n  \"inodot;\":0x131, \"int;\":0x222b,\r\n  \"intcal;\":0x22ba, \"integers;\":0x2124,\r\n  \"intercal;\":0x22ba, \"intlarhk;\":0x2a17,\r\n  \"intprod;\":0x2a3c, \"iocy;\":0x451,\r\n  \"iogon;\":0x12f, \"iopf;\":[0xd835,0xdd5a],\r\n  \"iota;\":0x3b9, \"iprod;\":0x2a3c,\r\n  \"iquest\":0xbf, \"iquest;\":0xbf,\r\n  \"iscr;\":[0xd835,0xdcbe], \"isin;\":0x2208,\r\n  \"isinE;\":0x22f9, \"isindot;\":0x22f5,\r\n  \"isins;\":0x22f4, \"isinsv;\":0x22f3,\r\n  \"isinv;\":0x2208, \"it;\":0x2062,\r\n  \"itilde;\":0x129, \"iukcy;\":0x456,\r\n  \"iuml\":0xef, \"iuml;\":0xef,\r\n  \"jcirc;\":0x135, \"jcy;\":0x439,\r\n  \"jfr;\":[0xd835,0xdd27], \"jmath;\":0x237,\r\n  \"jopf;\":[0xd835,0xdd5b], \"jscr;\":[0xd835,0xdcbf],\r\n  \"jsercy;\":0x458, \"jukcy;\":0x454,\r\n  \"kappa;\":0x3ba, \"kappav;\":0x3f0,\r\n  \"kcedil;\":0x137, \"kcy;\":0x43a,\r\n  \"kfr;\":[0xd835,0xdd28], \"kgreen;\":0x138,\r\n  \"khcy;\":0x445, \"kjcy;\":0x45c,\r\n  \"kopf;\":[0xd835,0xdd5c], \"kscr;\":[0xd835,0xdcc0],\r\n  \"lAarr;\":0x21da, \"lArr;\":0x21d0,\r\n  \"lAtail;\":0x291b, \"lBarr;\":0x290e,\r\n  \"lE;\":0x2266, \"lEg;\":0x2a8b,\r\n  \"lHar;\":0x2962, \"lacute;\":0x13a,\r\n  \"laemptyv;\":0x29b4, \"lagran;\":0x2112,\r\n  \"lambda;\":0x3bb, \"lang;\":0x27e8,\r\n  \"langd;\":0x2991, \"langle;\":0x27e8,\r\n  \"lap;\":0x2a85, \"laquo\":0xab,\r\n  \"laquo;\":0xab, \"larr;\":0x2190,\r\n  \"larrb;\":0x21e4, \"larrbfs;\":0x291f,\r\n  \"larrfs;\":0x291d, \"larrhk;\":0x21a9,\r\n  \"larrlp;\":0x21ab, \"larrpl;\":0x2939,\r\n  \"larrsim;\":0x2973, \"larrtl;\":0x21a2,\r\n  \"lat;\":0x2aab, \"latail;\":0x2919,\r\n  \"late;\":0x2aad, \"lates;\":[0x2aad,0xfe00],\r\n  \"lbarr;\":0x290c, \"lbbrk;\":0x2772,\r\n  \"lbrace;\":0x7b, \"lbrack;\":0x5b,\r\n  \"lbrke;\":0x298b, \"lbrksld;\":0x298f,\r\n  \"lbrkslu;\":0x298d, \"lcaron;\":0x13e,\r\n  \"lcedil;\":0x13c, \"lceil;\":0x2308,\r\n  \"lcub;\":0x7b, \"lcy;\":0x43b,\r\n  \"ldca;\":0x2936, \"ldquo;\":0x201c,\r\n  \"ldquor;\":0x201e, \"ldrdhar;\":0x2967,\r\n  \"ldrushar;\":0x294b, \"ldsh;\":0x21b2,\r\n  \"le;\":0x2264, \"leftarrow;\":0x2190,\r\n  \"leftarrowtail;\":0x21a2, \"leftharpoondown;\":0x21bd,\r\n  \"leftharpoonup;\":0x21bc, \"leftleftarrows;\":0x21c7,\r\n  \"leftrightarrow;\":0x2194, \"leftrightarrows;\":0x21c6,\r\n  \"leftrightharpoons;\":0x21cb, \"leftrightsquigarrow;\":0x21ad,\r\n  \"leftthreetimes;\":0x22cb, \"leg;\":0x22da,\r\n  \"leq;\":0x2264, \"leqq;\":0x2266,\r\n  \"leqslant;\":0x2a7d, \"les;\":0x2a7d,\r\n  \"lescc;\":0x2aa8, \"lesdot;\":0x2a7f,\r\n  \"lesdoto;\":0x2a81, \"lesdotor;\":0x2a83,\r\n  \"lesg;\":[0x22da,0xfe00], \"lesges;\":0x2a93,\r\n  \"lessapprox;\":0x2a85, \"lessdot;\":0x22d6,\r\n  \"lesseqgtr;\":0x22da, \"lesseqqgtr;\":0x2a8b,\r\n  \"lessgtr;\":0x2276, \"lesssim;\":0x2272,\r\n  \"lfisht;\":0x297c, \"lfloor;\":0x230a,\r\n  \"lfr;\":[0xd835,0xdd29], \"lg;\":0x2276,\r\n  \"lgE;\":0x2a91, \"lhard;\":0x21bd,\r\n  \"lharu;\":0x21bc, \"lharul;\":0x296a,\r\n  \"lhblk;\":0x2584, \"ljcy;\":0x459,\r\n  \"ll;\":0x226a, \"llarr;\":0x21c7,\r\n  \"llcorner;\":0x231e, \"llhard;\":0x296b,\r\n  \"lltri;\":0x25fa, \"lmidot;\":0x140,\r\n  \"lmoust;\":0x23b0, \"lmoustache;\":0x23b0,\r\n  \"lnE;\":0x2268, \"lnap;\":0x2a89,\r\n  \"lnapprox;\":0x2a89, \"lne;\":0x2a87,\r\n  \"lneq;\":0x2a87, \"lneqq;\":0x2268,\r\n  \"lnsim;\":0x22e6, \"loang;\":0x27ec,\r\n  \"loarr;\":0x21fd, \"lobrk;\":0x27e6,\r\n  \"longleftarrow;\":0x27f5, \"longleftrightarrow;\":0x27f7,\r\n  \"longmapsto;\":0x27fc, \"longrightarrow;\":0x27f6,\r\n  \"looparrowleft;\":0x21ab, \"looparrowright;\":0x21ac,\r\n  \"lopar;\":0x2985, \"lopf;\":[0xd835,0xdd5d],\r\n  \"loplus;\":0x2a2d, \"lotimes;\":0x2a34,\r\n  \"lowast;\":0x2217, \"lowbar;\":0x5f,\r\n  \"loz;\":0x25ca, \"lozenge;\":0x25ca,\r\n  \"lozf;\":0x29eb, \"lpar;\":0x28,\r\n  \"lparlt;\":0x2993, \"lrarr;\":0x21c6,\r\n  \"lrcorner;\":0x231f, \"lrhar;\":0x21cb,\r\n  \"lrhard;\":0x296d, \"lrm;\":0x200e,\r\n  \"lrtri;\":0x22bf, \"lsaquo;\":0x2039,\r\n  \"lscr;\":[0xd835,0xdcc1], \"lsh;\":0x21b0,\r\n  \"lsim;\":0x2272, \"lsime;\":0x2a8d,\r\n  \"lsimg;\":0x2a8f, \"lsqb;\":0x5b,\r\n  \"lsquo;\":0x2018, \"lsquor;\":0x201a,\r\n  \"lstrok;\":0x142, \"lt\":0x3c,\r\n  \"lt;\":0x3c, \"ltcc;\":0x2aa6,\r\n  \"ltcir;\":0x2a79, \"ltdot;\":0x22d6,\r\n  \"lthree;\":0x22cb, \"ltimes;\":0x22c9,\r\n  \"ltlarr;\":0x2976, \"ltquest;\":0x2a7b,\r\n  \"ltrPar;\":0x2996, \"ltri;\":0x25c3,\r\n  \"ltrie;\":0x22b4, \"ltrif;\":0x25c2,\r\n  \"lurdshar;\":0x294a, \"luruhar;\":0x2966,\r\n  \"lvertneqq;\":[0x2268,0xfe00], \"lvnE;\":[0x2268,0xfe00],\r\n  \"mDDot;\":0x223a, \"macr\":0xaf,\r\n  \"macr;\":0xaf, \"male;\":0x2642,\r\n  \"malt;\":0x2720, \"maltese;\":0x2720,\r\n  \"map;\":0x21a6, \"mapsto;\":0x21a6,\r\n  \"mapstodown;\":0x21a7, \"mapstoleft;\":0x21a4,\r\n  \"mapstoup;\":0x21a5, \"marker;\":0x25ae,\r\n  \"mcomma;\":0x2a29, \"mcy;\":0x43c,\r\n  \"mdash;\":0x2014, \"measuredangle;\":0x2221,\r\n  \"mfr;\":[0xd835,0xdd2a], \"mho;\":0x2127,\r\n  \"micro\":0xb5, \"micro;\":0xb5,\r\n  \"mid;\":0x2223, \"midast;\":0x2a,\r\n  \"midcir;\":0x2af0, \"middot\":0xb7,\r\n  \"middot;\":0xb7, \"minus;\":0x2212,\r\n  \"minusb;\":0x229f, \"minusd;\":0x2238,\r\n  \"minusdu;\":0x2a2a, \"mlcp;\":0x2adb,\r\n  \"mldr;\":0x2026, \"mnplus;\":0x2213,\r\n  \"models;\":0x22a7, \"mopf;\":[0xd835,0xdd5e],\r\n  \"mp;\":0x2213, \"mscr;\":[0xd835,0xdcc2],\r\n  \"mstpos;\":0x223e, \"mu;\":0x3bc,\r\n  \"multimap;\":0x22b8, \"mumap;\":0x22b8,\r\n  \"nGg;\":[0x22d9,0x338], \"nGt;\":[0x226b,0x20d2],\r\n  \"nGtv;\":[0x226b,0x338], \"nLeftarrow;\":0x21cd,\r\n  \"nLeftrightarrow;\":0x21ce, \"nLl;\":[0x22d8,0x338],\r\n  \"nLt;\":[0x226a,0x20d2], \"nLtv;\":[0x226a,0x338],\r\n  \"nRightarrow;\":0x21cf, \"nVDash;\":0x22af,\r\n  \"nVdash;\":0x22ae, \"nabla;\":0x2207,\r\n  \"nacute;\":0x144, \"nang;\":[0x2220,0x20d2],\r\n  \"nap;\":0x2249, \"napE;\":[0x2a70,0x338],\r\n  \"napid;\":[0x224b,0x338], \"napos;\":0x149,\r\n  \"napprox;\":0x2249, \"natur;\":0x266e,\r\n  \"natural;\":0x266e, \"naturals;\":0x2115,\r\n  \"nbsp\":0xa0, \"nbsp;\":0xa0,\r\n  \"nbump;\":[0x224e,0x338], \"nbumpe;\":[0x224f,0x338],\r\n  \"ncap;\":0x2a43, \"ncaron;\":0x148,\r\n  \"ncedil;\":0x146, \"ncong;\":0x2247,\r\n  \"ncongdot;\":[0x2a6d,0x338], \"ncup;\":0x2a42,\r\n  \"ncy;\":0x43d, \"ndash;\":0x2013,\r\n  \"ne;\":0x2260, \"neArr;\":0x21d7,\r\n  \"nearhk;\":0x2924, \"nearr;\":0x2197,\r\n  \"nearrow;\":0x2197, \"nedot;\":[0x2250,0x338],\r\n  \"nequiv;\":0x2262, \"nesear;\":0x2928,\r\n  \"nesim;\":[0x2242,0x338], \"nexist;\":0x2204,\r\n  \"nexists;\":0x2204, \"nfr;\":[0xd835,0xdd2b],\r\n  \"ngE;\":[0x2267,0x338], \"nge;\":0x2271,\r\n  \"ngeq;\":0x2271, \"ngeqq;\":[0x2267,0x338],\r\n  \"ngeqslant;\":[0x2a7e,0x338], \"nges;\":[0x2a7e,0x338],\r\n  \"ngsim;\":0x2275, \"ngt;\":0x226f,\r\n  \"ngtr;\":0x226f, \"nhArr;\":0x21ce,\r\n  \"nharr;\":0x21ae, \"nhpar;\":0x2af2,\r\n  \"ni;\":0x220b, \"nis;\":0x22fc,\r\n  \"nisd;\":0x22fa, \"niv;\":0x220b,\r\n  \"njcy;\":0x45a, \"nlArr;\":0x21cd,\r\n  \"nlE;\":[0x2266,0x338], \"nlarr;\":0x219a,\r\n  \"nldr;\":0x2025, \"nle;\":0x2270,\r\n  \"nleftarrow;\":0x219a, \"nleftrightarrow;\":0x21ae,\r\n  \"nleq;\":0x2270, \"nleqq;\":[0x2266,0x338],\r\n  \"nleqslant;\":[0x2a7d,0x338], \"nles;\":[0x2a7d,0x338],\r\n  \"nless;\":0x226e, \"nlsim;\":0x2274,\r\n  \"nlt;\":0x226e, \"nltri;\":0x22ea,\r\n  \"nltrie;\":0x22ec, \"nmid;\":0x2224,\r\n  \"nopf;\":[0xd835,0xdd5f], \"not\":0xac,\r\n  \"not;\":0xac, \"notin;\":0x2209,\r\n  \"notinE;\":[0x22f9,0x338], \"notindot;\":[0x22f5,0x338],\r\n  \"notinva;\":0x2209, \"notinvb;\":0x22f7,\r\n  \"notinvc;\":0x22f6, \"notni;\":0x220c,\r\n  \"notniva;\":0x220c, \"notnivb;\":0x22fe,\r\n  \"notnivc;\":0x22fd, \"npar;\":0x2226,\r\n  \"nparallel;\":0x2226, \"nparsl;\":[0x2afd,0x20e5],\r\n  \"npart;\":[0x2202,0x338], \"npolint;\":0x2a14,\r\n  \"npr;\":0x2280, \"nprcue;\":0x22e0,\r\n  \"npre;\":[0x2aaf,0x338], \"nprec;\":0x2280,\r\n  \"npreceq;\":[0x2aaf,0x338], \"nrArr;\":0x21cf,\r\n  \"nrarr;\":0x219b, \"nrarrc;\":[0x2933,0x338],\r\n  \"nrarrw;\":[0x219d,0x338], \"nrightarrow;\":0x219b,\r\n  \"nrtri;\":0x22eb, \"nrtrie;\":0x22ed,\r\n  \"nsc;\":0x2281, \"nsccue;\":0x22e1,\r\n  \"nsce;\":[0x2ab0,0x338], \"nscr;\":[0xd835,0xdcc3],\r\n  \"nshortmid;\":0x2224, \"nshortparallel;\":0x2226,\r\n  \"nsim;\":0x2241, \"nsime;\":0x2244,\r\n  \"nsimeq;\":0x2244, \"nsmid;\":0x2224,\r\n  \"nspar;\":0x2226, \"nsqsube;\":0x22e2,\r\n  \"nsqsupe;\":0x22e3, \"nsub;\":0x2284,\r\n  \"nsubE;\":[0x2ac5,0x338], \"nsube;\":0x2288,\r\n  \"nsubset;\":[0x2282,0x20d2], \"nsubseteq;\":0x2288,\r\n  \"nsubseteqq;\":[0x2ac5,0x338], \"nsucc;\":0x2281,\r\n  \"nsucceq;\":[0x2ab0,0x338], \"nsup;\":0x2285,\r\n  \"nsupE;\":[0x2ac6,0x338], \"nsupe;\":0x2289,\r\n  \"nsupset;\":[0x2283,0x20d2], \"nsupseteq;\":0x2289,\r\n  \"nsupseteqq;\":[0x2ac6,0x338], \"ntgl;\":0x2279,\r\n  \"ntilde\":0xf1, \"ntilde;\":0xf1,\r\n  \"ntlg;\":0x2278, \"ntriangleleft;\":0x22ea,\r\n  \"ntrianglelefteq;\":0x22ec, \"ntriangleright;\":0x22eb,\r\n  \"ntrianglerighteq;\":0x22ed, \"nu;\":0x3bd,\r\n  \"num;\":0x23, \"numero;\":0x2116,\r\n  \"numsp;\":0x2007, \"nvDash;\":0x22ad,\r\n  \"nvHarr;\":0x2904, \"nvap;\":[0x224d,0x20d2],\r\n  \"nvdash;\":0x22ac, \"nvge;\":[0x2265,0x20d2],\r\n  \"nvgt;\":[0x3e,0x20d2], \"nvinfin;\":0x29de,\r\n  \"nvlArr;\":0x2902, \"nvle;\":[0x2264,0x20d2],\r\n  \"nvlt;\":[0x3c,0x20d2], \"nvltrie;\":[0x22b4,0x20d2],\r\n  \"nvrArr;\":0x2903, \"nvrtrie;\":[0x22b5,0x20d2],\r\n  \"nvsim;\":[0x223c,0x20d2], \"nwArr;\":0x21d6,\r\n  \"nwarhk;\":0x2923, \"nwarr;\":0x2196,\r\n  \"nwarrow;\":0x2196, \"nwnear;\":0x2927,\r\n  \"oS;\":0x24c8, \"oacute\":0xf3,\r\n  \"oacute;\":0xf3, \"oast;\":0x229b,\r\n  \"ocir;\":0x229a, \"ocirc\":0xf4,\r\n  \"ocirc;\":0xf4, \"ocy;\":0x43e,\r\n  \"odash;\":0x229d, \"odblac;\":0x151,\r\n  \"odiv;\":0x2a38, \"odot;\":0x2299,\r\n  \"odsold;\":0x29bc, \"oelig;\":0x153,\r\n  \"ofcir;\":0x29bf, \"ofr;\":[0xd835,0xdd2c],\r\n  \"ogon;\":0x2db, \"ograve\":0xf2,\r\n  \"ograve;\":0xf2, \"ogt;\":0x29c1,\r\n  \"ohbar;\":0x29b5, \"ohm;\":0x3a9,\r\n  \"oint;\":0x222e, \"olarr;\":0x21ba,\r\n  \"olcir;\":0x29be, \"olcross;\":0x29bb,\r\n  \"oline;\":0x203e, \"olt;\":0x29c0,\r\n  \"omacr;\":0x14d, \"omega;\":0x3c9,\r\n  \"omicron;\":0x3bf, \"omid;\":0x29b6,\r\n  \"ominus;\":0x2296, \"oopf;\":[0xd835,0xdd60],\r\n  \"opar;\":0x29b7, \"operp;\":0x29b9,\r\n  \"oplus;\":0x2295, \"or;\":0x2228,\r\n  \"orarr;\":0x21bb, \"ord;\":0x2a5d,\r\n  \"order;\":0x2134, \"orderof;\":0x2134,\r\n  \"ordf\":0xaa, \"ordf;\":0xaa,\r\n  \"ordm\":0xba, \"ordm;\":0xba,\r\n  \"origof;\":0x22b6, \"oror;\":0x2a56,\r\n  \"orslope;\":0x2a57, \"orv;\":0x2a5b,\r\n  \"oscr;\":0x2134, \"oslash\":0xf8,\r\n  \"oslash;\":0xf8, \"osol;\":0x2298,\r\n  \"otilde\":0xf5, \"otilde;\":0xf5,\r\n  \"otimes;\":0x2297, \"otimesas;\":0x2a36,\r\n  \"ouml\":0xf6, \"ouml;\":0xf6,\r\n  \"ovbar;\":0x233d, \"par;\":0x2225,\r\n  \"para\":0xb6, \"para;\":0xb6,\r\n  \"parallel;\":0x2225, \"parsim;\":0x2af3,\r\n  \"parsl;\":0x2afd, \"part;\":0x2202,\r\n  \"pcy;\":0x43f, \"percnt;\":0x25,\r\n  \"period;\":0x2e, \"permil;\":0x2030,\r\n  \"perp;\":0x22a5, \"pertenk;\":0x2031,\r\n  \"pfr;\":[0xd835,0xdd2d], \"phi;\":0x3c6,\r\n  \"phiv;\":0x3d5, \"phmmat;\":0x2133,\r\n  \"phone;\":0x260e, \"pi;\":0x3c0,\r\n  \"pitchfork;\":0x22d4, \"piv;\":0x3d6,\r\n  \"planck;\":0x210f, \"planckh;\":0x210e,\r\n  \"plankv;\":0x210f, \"plus;\":0x2b,\r\n  \"plusacir;\":0x2a23, \"plusb;\":0x229e,\r\n  \"pluscir;\":0x2a22, \"plusdo;\":0x2214,\r\n  \"plusdu;\":0x2a25, \"pluse;\":0x2a72,\r\n  \"plusmn\":0xb1, \"plusmn;\":0xb1,\r\n  \"plussim;\":0x2a26, \"plustwo;\":0x2a27,\r\n  \"pm;\":0xb1, \"pointint;\":0x2a15,\r\n  \"popf;\":[0xd835,0xdd61], \"pound\":0xa3,\r\n  \"pound;\":0xa3, \"pr;\":0x227a,\r\n  \"prE;\":0x2ab3, \"prap;\":0x2ab7,\r\n  \"prcue;\":0x227c, \"pre;\":0x2aaf,\r\n  \"prec;\":0x227a, \"precapprox;\":0x2ab7,\r\n  \"preccurlyeq;\":0x227c, \"preceq;\":0x2aaf,\r\n  \"precnapprox;\":0x2ab9, \"precneqq;\":0x2ab5,\r\n  \"precnsim;\":0x22e8, \"precsim;\":0x227e,\r\n  \"prime;\":0x2032, \"primes;\":0x2119,\r\n  \"prnE;\":0x2ab5, \"prnap;\":0x2ab9,\r\n  \"prnsim;\":0x22e8, \"prod;\":0x220f,\r\n  \"profalar;\":0x232e, \"profline;\":0x2312,\r\n  \"profsurf;\":0x2313, \"prop;\":0x221d,\r\n  \"propto;\":0x221d, \"prsim;\":0x227e,\r\n  \"prurel;\":0x22b0, \"pscr;\":[0xd835,0xdcc5],\r\n  \"psi;\":0x3c8, \"puncsp;\":0x2008,\r\n  \"qfr;\":[0xd835,0xdd2e], \"qint;\":0x2a0c,\r\n  \"qopf;\":[0xd835,0xdd62], \"qprime;\":0x2057,\r\n  \"qscr;\":[0xd835,0xdcc6], \"quaternions;\":0x210d,\r\n  \"quatint;\":0x2a16, \"quest;\":0x3f,\r\n  \"questeq;\":0x225f, \"quot\":0x22,\r\n  \"quot;\":0x22, \"rAarr;\":0x21db,\r\n  \"rArr;\":0x21d2, \"rAtail;\":0x291c,\r\n  \"rBarr;\":0x290f, \"rHar;\":0x2964,\r\n  \"race;\":[0x223d,0x331], \"racute;\":0x155,\r\n  \"radic;\":0x221a, \"raemptyv;\":0x29b3,\r\n  \"rang;\":0x27e9, \"rangd;\":0x2992,\r\n  \"range;\":0x29a5, \"rangle;\":0x27e9,\r\n  \"raquo\":0xbb, \"raquo;\":0xbb,\r\n  \"rarr;\":0x2192, \"rarrap;\":0x2975,\r\n  \"rarrb;\":0x21e5, \"rarrbfs;\":0x2920,\r\n  \"rarrc;\":0x2933, \"rarrfs;\":0x291e,\r\n  \"rarrhk;\":0x21aa, \"rarrlp;\":0x21ac,\r\n  \"rarrpl;\":0x2945, \"rarrsim;\":0x2974,\r\n  \"rarrtl;\":0x21a3, \"rarrw;\":0x219d,\r\n  \"ratail;\":0x291a, \"ratio;\":0x2236,\r\n  \"rationals;\":0x211a, \"rbarr;\":0x290d,\r\n  \"rbbrk;\":0x2773, \"rbrace;\":0x7d,\r\n  \"rbrack;\":0x5d, \"rbrke;\":0x298c,\r\n  \"rbrksld;\":0x298e, \"rbrkslu;\":0x2990,\r\n  \"rcaron;\":0x159, \"rcedil;\":0x157,\r\n  \"rceil;\":0x2309, \"rcub;\":0x7d,\r\n  \"rcy;\":0x440, \"rdca;\":0x2937,\r\n  \"rdldhar;\":0x2969, \"rdquo;\":0x201d,\r\n  \"rdquor;\":0x201d, \"rdsh;\":0x21b3,\r\n  \"real;\":0x211c, \"realine;\":0x211b,\r\n  \"realpart;\":0x211c, \"reals;\":0x211d,\r\n  \"rect;\":0x25ad, \"reg\":0xae,\r\n  \"reg;\":0xae, \"rfisht;\":0x297d,\r\n  \"rfloor;\":0x230b, \"rfr;\":[0xd835,0xdd2f],\r\n  \"rhard;\":0x21c1, \"rharu;\":0x21c0,\r\n  \"rharul;\":0x296c, \"rho;\":0x3c1,\r\n  \"rhov;\":0x3f1, \"rightarrow;\":0x2192,\r\n  \"rightarrowtail;\":0x21a3, \"rightharpoondown;\":0x21c1,\r\n  \"rightharpoonup;\":0x21c0, \"rightleftarrows;\":0x21c4,\r\n  \"rightleftharpoons;\":0x21cc, \"rightrightarrows;\":0x21c9,\r\n  \"rightsquigarrow;\":0x219d, \"rightthreetimes;\":0x22cc,\r\n  \"ring;\":0x2da, \"risingdotseq;\":0x2253,\r\n  \"rlarr;\":0x21c4, \"rlhar;\":0x21cc,\r\n  \"rlm;\":0x200f, \"rmoust;\":0x23b1,\r\n  \"rmoustache;\":0x23b1, \"rnmid;\":0x2aee,\r\n  \"roang;\":0x27ed, \"roarr;\":0x21fe,\r\n  \"robrk;\":0x27e7, \"ropar;\":0x2986,\r\n  \"ropf;\":[0xd835,0xdd63], \"roplus;\":0x2a2e,\r\n  \"rotimes;\":0x2a35, \"rpar;\":0x29,\r\n  \"rpargt;\":0x2994, \"rppolint;\":0x2a12,\r\n  \"rrarr;\":0x21c9, \"rsaquo;\":0x203a,\r\n  \"rscr;\":[0xd835,0xdcc7], \"rsh;\":0x21b1,\r\n  \"rsqb;\":0x5d, \"rsquo;\":0x2019,\r\n  \"rsquor;\":0x2019, \"rthree;\":0x22cc,\r\n  \"rtimes;\":0x22ca, \"rtri;\":0x25b9,\r\n  \"rtrie;\":0x22b5, \"rtrif;\":0x25b8,\r\n  \"rtriltri;\":0x29ce, \"ruluhar;\":0x2968,\r\n  \"rx;\":0x211e, \"sacute;\":0x15b,\r\n  \"sbquo;\":0x201a, \"sc;\":0x227b,\r\n  \"scE;\":0x2ab4, \"scap;\":0x2ab8,\r\n  \"scaron;\":0x161, \"sccue;\":0x227d,\r\n  \"sce;\":0x2ab0, \"scedil;\":0x15f,\r\n  \"scirc;\":0x15d, \"scnE;\":0x2ab6,\r\n  \"scnap;\":0x2aba, \"scnsim;\":0x22e9,\r\n  \"scpolint;\":0x2a13, \"scsim;\":0x227f,\r\n  \"scy;\":0x441, \"sdot;\":0x22c5,\r\n  \"sdotb;\":0x22a1, \"sdote;\":0x2a66,\r\n  \"seArr;\":0x21d8, \"searhk;\":0x2925,\r\n  \"searr;\":0x2198, \"searrow;\":0x2198,\r\n  \"sect\":0xa7, \"sect;\":0xa7,\r\n  \"semi;\":0x3b, \"seswar;\":0x2929,\r\n  \"setminus;\":0x2216, \"setmn;\":0x2216,\r\n  \"sext;\":0x2736, \"sfr;\":[0xd835,0xdd30],\r\n  \"sfrown;\":0x2322, \"sharp;\":0x266f,\r\n  \"shchcy;\":0x449, \"shcy;\":0x448,\r\n  \"shortmid;\":0x2223, \"shortparallel;\":0x2225,\r\n  \"shy\":0xad, \"shy;\":0xad,\r\n  \"sigma;\":0x3c3, \"sigmaf;\":0x3c2,\r\n  \"sigmav;\":0x3c2, \"sim;\":0x223c,\r\n  \"simdot;\":0x2a6a, \"sime;\":0x2243,\r\n  \"simeq;\":0x2243, \"simg;\":0x2a9e,\r\n  \"simgE;\":0x2aa0, \"siml;\":0x2a9d,\r\n  \"simlE;\":0x2a9f, \"simne;\":0x2246,\r\n  \"simplus;\":0x2a24, \"simrarr;\":0x2972,\r\n  \"slarr;\":0x2190, \"smallsetminus;\":0x2216,\r\n  \"smashp;\":0x2a33, \"smeparsl;\":0x29e4,\r\n  \"smid;\":0x2223, \"smile;\":0x2323,\r\n  \"smt;\":0x2aaa, \"smte;\":0x2aac,\r\n  \"smtes;\":[0x2aac,0xfe00], \"softcy;\":0x44c,\r\n  \"sol;\":0x2f, \"solb;\":0x29c4,\r\n  \"solbar;\":0x233f, \"sopf;\":[0xd835,0xdd64],\r\n  \"spades;\":0x2660, \"spadesuit;\":0x2660,\r\n  \"spar;\":0x2225, \"sqcap;\":0x2293,\r\n  \"sqcaps;\":[0x2293,0xfe00], \"sqcup;\":0x2294,\r\n  \"sqcups;\":[0x2294,0xfe00], \"sqsub;\":0x228f,\r\n  \"sqsube;\":0x2291, \"sqsubset;\":0x228f,\r\n  \"sqsubseteq;\":0x2291, \"sqsup;\":0x2290,\r\n  \"sqsupe;\":0x2292, \"sqsupset;\":0x2290,\r\n  \"sqsupseteq;\":0x2292, \"squ;\":0x25a1,\r\n  \"square;\":0x25a1, \"squarf;\":0x25aa,\r\n  \"squf;\":0x25aa, \"srarr;\":0x2192,\r\n  \"sscr;\":[0xd835,0xdcc8], \"ssetmn;\":0x2216,\r\n  \"ssmile;\":0x2323, \"sstarf;\":0x22c6,\r\n  \"star;\":0x2606, \"starf;\":0x2605,\r\n  \"straightepsilon;\":0x3f5, \"straightphi;\":0x3d5,\r\n  \"strns;\":0xaf, \"sub;\":0x2282,\r\n  \"subE;\":0x2ac5, \"subdot;\":0x2abd,\r\n  \"sube;\":0x2286, \"subedot;\":0x2ac3,\r\n  \"submult;\":0x2ac1, \"subnE;\":0x2acb,\r\n  \"subne;\":0x228a, \"subplus;\":0x2abf,\r\n  \"subrarr;\":0x2979, \"subset;\":0x2282,\r\n  \"subseteq;\":0x2286, \"subseteqq;\":0x2ac5,\r\n  \"subsetneq;\":0x228a, \"subsetneqq;\":0x2acb,\r\n  \"subsim;\":0x2ac7, \"subsub;\":0x2ad5,\r\n  \"subsup;\":0x2ad3, \"succ;\":0x227b,\r\n  \"succapprox;\":0x2ab8, \"succcurlyeq;\":0x227d,\r\n  \"succeq;\":0x2ab0, \"succnapprox;\":0x2aba,\r\n  \"succneqq;\":0x2ab6, \"succnsim;\":0x22e9,\r\n  \"succsim;\":0x227f, \"sum;\":0x2211,\r\n  \"sung;\":0x266a, \"sup1\":0xb9,\r\n  \"sup1;\":0xb9, \"sup2\":0xb2,\r\n  \"sup2;\":0xb2, \"sup3\":0xb3,\r\n  \"sup3;\":0xb3, \"sup;\":0x2283,\r\n  \"supE;\":0x2ac6, \"supdot;\":0x2abe,\r\n  \"supdsub;\":0x2ad8, \"supe;\":0x2287,\r\n  \"supedot;\":0x2ac4, \"suphsol;\":0x27c9,\r\n  \"suphsub;\":0x2ad7, \"suplarr;\":0x297b,\r\n  \"supmult;\":0x2ac2, \"supnE;\":0x2acc,\r\n  \"supne;\":0x228b, \"supplus;\":0x2ac0,\r\n  \"supset;\":0x2283, \"supseteq;\":0x2287,\r\n  \"supseteqq;\":0x2ac6, \"supsetneq;\":0x228b,\r\n  \"supsetneqq;\":0x2acc, \"supsim;\":0x2ac8,\r\n  \"supsub;\":0x2ad4, \"supsup;\":0x2ad6,\r\n  \"swArr;\":0x21d9, \"swarhk;\":0x2926,\r\n  \"swarr;\":0x2199, \"swarrow;\":0x2199,\r\n  \"swnwar;\":0x292a, \"szlig\":0xdf,\r\n  \"szlig;\":0xdf, \"target;\":0x2316,\r\n  \"tau;\":0x3c4, \"tbrk;\":0x23b4,\r\n  \"tcaron;\":0x165, \"tcedil;\":0x163,\r\n  \"tcy;\":0x442, \"tdot;\":0x20db,\r\n  \"telrec;\":0x2315, \"tfr;\":[0xd835,0xdd31],\r\n  \"there4;\":0x2234, \"therefore;\":0x2234,\r\n  \"theta;\":0x3b8, \"thetasym;\":0x3d1,\r\n  \"thetav;\":0x3d1, \"thickapprox;\":0x2248,\r\n  \"thicksim;\":0x223c, \"thinsp;\":0x2009,\r\n  \"thkap;\":0x2248, \"thksim;\":0x223c,\r\n  \"thorn\":0xfe, \"thorn;\":0xfe,\r\n  \"tilde;\":0x2dc, \"times\":0xd7,\r\n  \"times;\":0xd7, \"timesb;\":0x22a0,\r\n  \"timesbar;\":0x2a31, \"timesd;\":0x2a30,\r\n  \"tint;\":0x222d, \"toea;\":0x2928,\r\n  \"top;\":0x22a4, \"topbot;\":0x2336,\r\n  \"topcir;\":0x2af1, \"topf;\":[0xd835,0xdd65],\r\n  \"topfork;\":0x2ada, \"tosa;\":0x2929,\r\n  \"tprime;\":0x2034, \"trade;\":0x2122,\r\n  \"triangle;\":0x25b5, \"triangledown;\":0x25bf,\r\n  \"triangleleft;\":0x25c3, \"trianglelefteq;\":0x22b4,\r\n  \"triangleq;\":0x225c, \"triangleright;\":0x25b9,\r\n  \"trianglerighteq;\":0x22b5, \"tridot;\":0x25ec,\r\n  \"trie;\":0x225c, \"triminus;\":0x2a3a,\r\n  \"triplus;\":0x2a39, \"trisb;\":0x29cd,\r\n  \"tritime;\":0x2a3b, \"trpezium;\":0x23e2,\r\n  \"tscr;\":[0xd835,0xdcc9], \"tscy;\":0x446,\r\n  \"tshcy;\":0x45b, \"tstrok;\":0x167,\r\n  \"twixt;\":0x226c, \"twoheadleftarrow;\":0x219e,\r\n  \"twoheadrightarrow;\":0x21a0, \"uArr;\":0x21d1,\r\n  \"uHar;\":0x2963, \"uacute\":0xfa,\r\n  \"uacute;\":0xfa, \"uarr;\":0x2191,\r\n  \"ubrcy;\":0x45e, \"ubreve;\":0x16d,\r\n  \"ucirc\":0xfb, \"ucirc;\":0xfb,\r\n  \"ucy;\":0x443, \"udarr;\":0x21c5,\r\n  \"udblac;\":0x171, \"udhar;\":0x296e,\r\n  \"ufisht;\":0x297e, \"ufr;\":[0xd835,0xdd32],\r\n  \"ugrave\":0xf9, \"ugrave;\":0xf9,\r\n  \"uharl;\":0x21bf, \"uharr;\":0x21be,\r\n  \"uhblk;\":0x2580, \"ulcorn;\":0x231c,\r\n  \"ulcorner;\":0x231c, \"ulcrop;\":0x230f,\r\n  \"ultri;\":0x25f8, \"umacr;\":0x16b,\r\n  \"uml\":0xa8, \"uml;\":0xa8,\r\n  \"uogon;\":0x173, \"uopf;\":[0xd835,0xdd66],\r\n  \"uparrow;\":0x2191, \"updownarrow;\":0x2195,\r\n  \"upharpoonleft;\":0x21bf, \"upharpoonright;\":0x21be,\r\n  \"uplus;\":0x228e, \"upsi;\":0x3c5,\r\n  \"upsih;\":0x3d2, \"upsilon;\":0x3c5,\r\n  \"upuparrows;\":0x21c8, \"urcorn;\":0x231d,\r\n  \"urcorner;\":0x231d, \"urcrop;\":0x230e,\r\n  \"uring;\":0x16f, \"urtri;\":0x25f9,\r\n  \"uscr;\":[0xd835,0xdcca], \"utdot;\":0x22f0,\r\n  \"utilde;\":0x169, \"utri;\":0x25b5,\r\n  \"utrif;\":0x25b4, \"uuarr;\":0x21c8,\r\n  \"uuml\":0xfc, \"uuml;\":0xfc,\r\n  \"uwangle;\":0x29a7, \"vArr;\":0x21d5,\r\n  \"vBar;\":0x2ae8, \"vBarv;\":0x2ae9,\r\n  \"vDash;\":0x22a8, \"vangrt;\":0x299c,\r\n  \"varepsilon;\":0x3f5, \"varkappa;\":0x3f0,\r\n  \"varnothing;\":0x2205, \"varphi;\":0x3d5,\r\n  \"varpi;\":0x3d6, \"varpropto;\":0x221d,\r\n  \"varr;\":0x2195, \"varrho;\":0x3f1,\r\n  \"varsigma;\":0x3c2, \"varsubsetneq;\":[0x228a,0xfe00],\r\n  \"varsubsetneqq;\":[0x2acb,0xfe00], \"varsupsetneq;\":[0x228b,0xfe00],\r\n  \"varsupsetneqq;\":[0x2acc,0xfe00], \"vartheta;\":0x3d1,\r\n  \"vartriangleleft;\":0x22b2, \"vartriangleright;\":0x22b3,\r\n  \"vcy;\":0x432, \"vdash;\":0x22a2,\r\n  \"vee;\":0x2228, \"veebar;\":0x22bb,\r\n  \"veeeq;\":0x225a, \"vellip;\":0x22ee,\r\n  \"verbar;\":0x7c, \"vert;\":0x7c,\r\n  \"vfr;\":[0xd835,0xdd33], \"vltri;\":0x22b2,\r\n  \"vnsub;\":[0x2282,0x20d2], \"vnsup;\":[0x2283,0x20d2],\r\n  \"vopf;\":[0xd835,0xdd67], \"vprop;\":0x221d,\r\n  \"vrtri;\":0x22b3, \"vscr;\":[0xd835,0xdccb],\r\n  \"vsubnE;\":[0x2acb,0xfe00], \"vsubne;\":[0x228a,0xfe00],\r\n  \"vsupnE;\":[0x2acc,0xfe00], \"vsupne;\":[0x228b,0xfe00],\r\n  \"vzigzag;\":0x299a, \"wcirc;\":0x175,\r\n  \"wedbar;\":0x2a5f, \"wedge;\":0x2227,\r\n  \"wedgeq;\":0x2259, \"weierp;\":0x2118,\r\n  \"wfr;\":[0xd835,0xdd34], \"wopf;\":[0xd835,0xdd68],\r\n  \"wp;\":0x2118, \"wr;\":0x2240,\r\n  \"wreath;\":0x2240, \"wscr;\":[0xd835,0xdccc],\r\n  \"xcap;\":0x22c2, \"xcirc;\":0x25ef,\r\n  \"xcup;\":0x22c3, \"xdtri;\":0x25bd,\r\n  \"xfr;\":[0xd835,0xdd35], \"xhArr;\":0x27fa,\r\n  \"xharr;\":0x27f7, \"xi;\":0x3be,\r\n  \"xlArr;\":0x27f8, \"xlarr;\":0x27f5,\r\n  \"xmap;\":0x27fc, \"xnis;\":0x22fb,\r\n  \"xodot;\":0x2a00, \"xopf;\":[0xd835,0xdd69],\r\n  \"xoplus;\":0x2a01, \"xotime;\":0x2a02,\r\n  \"xrArr;\":0x27f9, \"xrarr;\":0x27f6,\r\n  \"xscr;\":[0xd835,0xdccd], \"xsqcup;\":0x2a06,\r\n  \"xuplus;\":0x2a04, \"xutri;\":0x25b3,\r\n  \"xvee;\":0x22c1, \"xwedge;\":0x22c0,\r\n  \"yacute\":0xfd, \"yacute;\":0xfd,\r\n  \"yacy;\":0x44f, \"ycirc;\":0x177,\r\n  \"ycy;\":0x44b, \"yen\":0xa5,\r\n  \"yen;\":0xa5, \"yfr;\":[0xd835,0xdd36],\r\n  \"yicy;\":0x457, \"yopf;\":[0xd835,0xdd6a],\r\n  \"yscr;\":[0xd835,0xdcce], \"yucy;\":0x44e,\r\n  \"yuml\":0xff, \"yuml;\":0xff,\r\n  \"zacute;\":0x17a, \"zcaron;\":0x17e,\r\n  \"zcy;\":0x437, \"zdot;\":0x17c,\r\n  \"zeetrf;\":0x2128, \"zeta;\":0x3b6,\r\n  \"zfr;\":[0xd835,0xdd37], \"zhcy;\":0x436,\r\n  \"zigrarr;\":0x21dd, \"zopf;\":[0xd835,0xdd6b],\r\n  \"zscr;\":[0xd835,0xdccf], \"zwj;\":0x200d,\r\n  \"zwnj;\":0x200c,\r\n};\r\n/*\r\n * This regexp is generated with test/tools/update-entities.js\r\n * It will always match at least one character -- but note that there\r\n * are no entities whose names are a single character long.\r\n */\r\nvar NAMEDCHARREF = /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\\s\\S]/g;\r\n\r\nvar NAMEDCHARREF_MAXLEN = 32;\r\n\r\n// Regular expression constants used by the tokenizer and parser\r\n\r\n// Note that \\r is included in all of these regexps because it will need\r\n// to be converted to LF by the scanChars() function.\r\nvar DBLQUOTEATTRVAL = /[^\\r\"&\\u0000]+/g;\r\nvar SINGLEQUOTEATTRVAL = /[^\\r'&\\u0000]+/g;\r\nvar UNQUOTEDATTRVAL = /[^\\r\\t\\n\\f &>\\u0000]+/g;\r\nvar TAGNAME = /[^\\r\\t\\n\\f \\/>A-Z\\u0000]+/g;\r\nvar ATTRNAME = /[^\\r\\t\\n\\f \\/=>A-Z\\u0000]+/g;\r\n\r\nvar CDATATEXT = /[^\\]\\r\\u0000\\uffff]*/g;\r\nvar DATATEXT = /[^&<\\r\\u0000\\uffff]*/g;\r\nvar RAWTEXT = /[^<\\r\\u0000\\uffff]*/g;\r\nvar PLAINTEXT = /[^\\r\\u0000\\uffff]*/g;\r\n// Since we don't have the 'sticky tag', add '|.' to the end of SIMPLETAG\r\n// and SIMPLEATTR so that we are guaranteed to always match.  This prevents\r\n// us from scanning past the lastIndex set. (Note that the desired matches\r\n// are always greater than 1 char long, so longest-match will ensure that .\r\n// is not matched unless the desired match fails.)\r\nvar SIMPLETAG = /(?:(\\/)?([a-z]+)>)|[\\s\\S]/g;\r\nvar SIMPLEATTR = /(?:([-a-z]+)[ \\t\\n\\f]*=[ \\t\\n\\f]*('[^'&\\r\\u0000]*'|\"[^\"&\\r\\u0000]*\"|[^\\t\\n\\r\\f \"&'\\u0000>][^&> \\t\\n\\r\\f\\u0000]*[ \\t\\n\\f]))|[\\s\\S]/g;\r\n\r\nvar NONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/;\r\nvar ALLNONWS = /[^\\x09\\x0A\\x0C\\x0D\\x20]/g; // like above, with g flag\r\nvar NONWSNONNUL = /[^\\x00\\x09\\x0A\\x0C\\x0D\\x20]/; // don't allow NUL either\r\nvar LEADINGWS = /^[\\x09\\x0A\\x0C\\x0D\\x20]+/;\r\nvar NULCHARS = /\\x00/g;\r\n\r\n/***\r\n * These are utility functions that don't use any of the parser's\r\n * internal state.\r\n */\r\nfunction buf2str(buf) {\r\n  var CHUNKSIZE=16384;\r\n  if (buf.length < CHUNKSIZE) {\r\n    return String.fromCharCode.apply(String, buf);\r\n  }\r\n  // special case for large strings, to avoid busting the stack.\r\n  var result = '';\r\n  for (var i = 0; i < buf.length; i += CHUNKSIZE) {\r\n    result += String.fromCharCode.apply(String, buf.slice(i, i+CHUNKSIZE));\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction str2buf(s) {\r\n  var result = [];\r\n  for (var i=0; i<s.length; i++) {\r\n    result[i] = s.charCodeAt(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Determine whether the element is a member of the set.\r\n// The set is an object that maps namespaces to objects. The objects\r\n// then map local tagnames to the value true if that tag is part of the set\r\nfunction isA(elt, set) {\r\n  if (typeof set === 'string') {\r\n    // convenience case for testing a particular HTML element\r\n    return elt.namespaceURI === NAMESPACE.HTML &&\r\n      elt.localName === set;\r\n  }\r\n  var tagnames = set[elt.namespaceURI];\r\n  return tagnames && tagnames[elt.localName];\r\n}\r\n\r\nfunction isMathmlTextIntegrationPoint(n) {\r\n  return isA(n, mathmlTextIntegrationPointSet);\r\n}\r\n\r\nfunction isHTMLIntegrationPoint(n) {\r\n  if (isA(n, htmlIntegrationPointSet)) return true;\r\n  if (n.namespaceURI === NAMESPACE.MATHML &&\r\n    n.localName === \"annotation-xml\") {\r\n    var encoding = n.getAttribute(\"encoding\");\r\n    if (encoding) encoding = encoding.toLowerCase();\r\n    if (encoding === \"text/html\" ||\r\n      encoding === \"application/xhtml+xml\")\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction adjustSVGTagName(name) {\r\n  if (name in svgTagNameAdjustments)\r\n    return svgTagNameAdjustments[name];\r\n  else\r\n    return name;\r\n}\r\n\r\nfunction adjustSVGAttributes(attrs) {\r\n  for(var i = 0, n = attrs.length; i < n; i++) {\r\n    if (attrs[i][0] in svgAttrAdjustments) {\r\n      attrs[i][0] = svgAttrAdjustments[attrs[i][0]];\r\n    }\r\n  }\r\n}\r\n\r\nfunction adjustMathMLAttributes(attrs) {\r\n  for(var i = 0, n = attrs.length; i < n; i++) {\r\n    if (attrs[i][0] === \"definitionurl\") {\r\n      attrs[i][0] = \"definitionURL\";\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction adjustForeignAttributes(attrs) {\r\n  for(var i = 0, n = attrs.length; i < n; i++) {\r\n    if (attrs[i][0] in foreignAttributes) {\r\n      // Attributes with namespaces get a 3rd element:\r\n      // [Qname, value, namespace]\r\n      attrs[i].push(foreignAttributes[attrs[i][0]]);\r\n    }\r\n  }\r\n}\r\n\r\n// For each attribute in attrs, if elt doesn't have an attribute\r\n// by that name, add the attribute to elt\r\n// XXX: I'm ignoring namespaces for now\r\nfunction transferAttributes(attrs, elt) {\r\n  for(var i = 0, n = attrs.length; i < n; i++) {\r\n    var name = attrs[i][0], value = attrs[i][1];\r\n    if (elt.hasAttribute(name)) continue;\r\n    elt._setAttribute(name, value);\r\n  }\r\n}\r\n\r\n/***\r\n * The ElementStack class\r\n */\r\nHTMLParser.ElementStack = function ElementStack() {\r\n  this.elements = [];\r\n  this.top = null; // stack.top is the \"current node\" in the spec\r\n};\r\n\r\n/*\r\n// This is for debugging only\r\nHTMLParser.ElementStack.prototype.toString = function(e) {\r\n  return \"STACK: \" +\r\n  this.elements.map(function(e) {return e.localName;}).join(\"-\");\r\n}\r\n*/\r\n\r\nHTMLParser.ElementStack.prototype.push = function(e) {\r\n  this.elements.push(e);\r\n  this.top = e;\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.pop = function(e) {\r\n  this.elements.pop();\r\n  this.top = this.elements[this.elements.length-1];\r\n};\r\n\r\n// Pop elements off the stack up to and including the first\r\n// element with the specified (HTML) tagname\r\nHTMLParser.ElementStack.prototype.popTag = function(tag) {\r\n  for(var i = this.elements.length-1; i > 0; i--) {\r\n    var e = this.elements[i];\r\n    if (isA(e, tag)) break;\r\n  }\r\n  this.elements.length = i;\r\n  this.top = this.elements[i-1];\r\n};\r\n\r\n// Pop elements off the stack up to and including the first\r\n// element that is an instance of the specified type\r\nHTMLParser.ElementStack.prototype.popElementType = function(type) {\r\n  for(var i = this.elements.length-1; i > 0; i--) {\r\n    if (this.elements[i] instanceof type) break;\r\n  }\r\n  this.elements.length = i;\r\n  this.top = this.elements[i-1];\r\n};\r\n\r\n// Pop elements off the stack up to and including the element e.\r\n// Note that this is very different from removeElement()\r\n// This requires that e is on the stack.\r\nHTMLParser.ElementStack.prototype.popElement = function(e) {\r\n  for(var i = this.elements.length-1; i > 0; i--) {\r\n    if (this.elements[i] === e) break;\r\n  }\r\n  this.elements.length = i;\r\n  this.top = this.elements[i-1];\r\n};\r\n\r\n// Remove a specific element from the stack.\r\n// Do nothing if the element is not on the stack\r\nHTMLParser.ElementStack.prototype.removeElement = function(e) {\r\n  if (this.top === e) this.pop();\r\n  else {\r\n    var idx = this.elements.lastIndexOf(e);\r\n    if (idx !== -1)\r\n      this.elements.splice(idx, 1);\r\n  }\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.clearToContext = function(set) {\r\n  // Note that we don't loop to 0. Never pop the <html> elt off.\r\n  for(var i = this.elements.length-1; i > 0; i--) {\r\n    if (isA(this.elements[i], set)) break;\r\n  }\r\n  this.elements.length = i+1;\r\n  this.top = this.elements[i];\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.contains = function(tag) {\r\n  return this.inSpecificScope(tag, Object.create(null));\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inSpecificScope = function(tag, set) {\r\n  for(var i = this.elements.length-1; i >= 0; i--) {\r\n    var elt = this.elements[i];\r\n    if (isA(elt, tag)) return true;\r\n    if (isA(elt, set)) return false;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Like the above, but for a specific element, not a tagname\r\nHTMLParser.ElementStack.prototype.elementInSpecificScope = function(target, set) {\r\n  for(var i = this.elements.length-1; i >= 0; i--) {\r\n    var elt = this.elements[i];\r\n    if (elt === target) return true;\r\n    if (isA(elt, set)) return false;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Like the above, but for an element interface, not a tagname\r\nHTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function(target, set) {\r\n  for(var i = this.elements.length-1; i >= 0; i--) {\r\n    var elt = this.elements[i];\r\n    if (elt instanceof target) return true;\r\n    if (isA(elt, set)) return false;\r\n  }\r\n  return false;\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inScope = function(tag) {\r\n  return this.inSpecificScope(tag, inScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.elementInScope = function(e) {\r\n  return this.elementInSpecificScope(e, inScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.elementTypeInScope = function(type) {\r\n  return this.elementTypeInSpecificScope(type, inScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inButtonScope = function(tag) {\r\n  return this.inSpecificScope(tag, inButtonScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inListItemScope = function(tag) {\r\n  return this.inSpecificScope(tag, inListItemScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inTableScope = function(tag) {\r\n  return this.inSpecificScope(tag, inTableScopeSet);\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.inSelectScope = function(tag) {\r\n  // Can't implement this one with inSpecificScope, since it involves\r\n  // a set defined by inverting another set. So implement manually.\r\n  for(var i = this.elements.length-1; i >= 0; i--) {\r\n    var elt = this.elements[i];\r\n    if (elt.namespaceURI !== NAMESPACE.HTML) return false;\r\n    var localname = elt.localName;\r\n    if (localname === tag) return true;\r\n    if (localname !== \"optgroup\" && localname !== \"option\")\r\n      return false;\r\n  }\r\n  return false;\r\n};\r\n\r\nHTMLParser.ElementStack.prototype.generateImpliedEndTags = function(butnot, thorough) {\r\n  var endTagSet = thorough ? thoroughImpliedEndTagsSet : impliedEndTagsSet;\r\n  for(var i = this.elements.length-1; i >= 0; i--) {\r\n    var e = this.elements[i];\r\n    if (butnot && isA(e, butnot)) break;\r\n    if (!isA(this.elements[i], endTagSet)) break;\r\n  }\r\n\r\n  this.elements.length = i+1;\r\n  this.top = this.elements[i];\r\n};\r\n\r\n/***\r\n * The ActiveFormattingElements class\r\n */\r\nHTMLParser.ActiveFormattingElements = function AFE() {\r\n  this.list = []; // elements\r\n  this.attrs = []; // attribute tokens for cloning\r\n};\r\n\r\nHTMLParser.ActiveFormattingElements.prototype.MARKER = { localName: \"|\" };\r\n\r\n/*\r\n// For debugging\r\nHTMLParser.ActiveFormattingElements.prototype.toString = function() {\r\n  return \"AFE: \" +\r\n  this.list.map(function(e) { return e.localName; }).join(\"-\");\r\n}\r\n*/\r\n\r\nHTMLParser.ActiveFormattingElements.prototype.insertMarker = function() {\r\n  this.list.push(this.MARKER);\r\n  this.attrs.push(this.MARKER);\r\n};\r\n\r\nHTMLParser.ActiveFormattingElements.prototype.push = function(elt, attrs) {\r\n  // Scan backwards: if there are already 3 copies of this element\r\n  // before we encounter a marker, then drop the last one\r\n  var count = 0;\r\n  for(var i = this.list.length-1; i >= 0; i--) {\r\n    if (this.list[i] === this.MARKER) break;\r\n    // equal() is defined below\r\n    if (equal(elt, this.list[i], this.attrs[i])) {\r\n      count++;\r\n      if (count === 3) {\r\n        this.list.splice(i, 1);\r\n        this.attrs.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // Now push the element onto the list\r\n  this.list.push(elt);\r\n\r\n  // Copy the attributes and push those on, too\r\n  var attrcopy = [];\r\n  for(var ii = 0; ii < attrs.length; ii++) {\r\n    attrcopy[ii] = attrs[ii];\r\n  }\r\n\r\n  this.attrs.push(attrcopy);\r\n\r\n  // This function defines equality of two elements for the purposes\r\n  // of the AFE list.  Note that it compares the new elements\r\n  // attributes to the saved array of attributes associated with\r\n  // the old element because a script could have changed the\r\n  // old element's set of attributes\r\n  function equal(newelt, oldelt, oldattrs) {\r\n    if (newelt.localName !== oldelt.localName) return false;\r\n    if (newelt._numattrs !== oldattrs.length) return false;\r\n    for(var i = 0, n = oldattrs.length; i < n; i++) {\r\n      var oldname = oldattrs[i][0];\r\n      var oldval = oldattrs[i][1];\r\n      if (!newelt.hasAttribute(oldname)) return false;\r\n      if (newelt.getAttribute(oldname) !== oldval) return false;\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\nHTMLParser.ActiveFormattingElements.prototype.clearToMarker = function() {\r\n  for(var i = this.list.length-1; i >= 0; i--) {\r\n    if (this.list[i] === this.MARKER) break;\r\n  }\r\n  if (i < 0) i = 0;\r\n  this.list.length = i;\r\n  this.attrs.length = i;\r\n};\r\n\r\n// Find and return the last element with the specified tag between the\r\n// end of the list and the last marker on the list.\r\n// Used when parsing <a> in_body_mode()\r\nHTMLParser.ActiveFormattingElements.prototype.findElementByTag = function(tag) {\r\n  for(var i = this.list.length-1; i >= 0; i--) {\r\n    var elt = this.list[i];\r\n    if (elt === this.MARKER) break;\r\n    if (elt.localName === tag) return elt;\r\n  }\r\n  return null;\r\n};\r\n\r\nHTMLParser.ActiveFormattingElements.prototype.indexOf = function(e) {\r\n  return this.list.lastIndexOf(e);\r\n};\r\n\r\n// Find the element e in the list and remove it\r\n// Used when parsing <a> in_body()\r\nHTMLParser.ActiveFormattingElements.prototype.remove = function(e) {\r\n  var idx = this.list.lastIndexOf(e);\r\n  if (idx !== -1) {\r\n    this.list.splice(idx, 1);\r\n    this.attrs.splice(idx, 1);\r\n  }\r\n};\r\n\r\n// Find element a in the list and replace it with element b\r\n// XXX: Do I need to handle attributes here?\r\nHTMLParser.ActiveFormattingElements.prototype.replace = function(a, b, attrs) {\r\n  var idx = this.list.lastIndexOf(a);\r\n  if (idx !== -1) {\r\n    this.list[idx] = b;\r\n    this.attrs[idx] = attrs;\r\n  }\r\n};\r\n\r\n// Find a in the list and insert b after it\r\n// This is only used for insert a bookmark object, so the\r\n// attrs array doesn't really matter\r\nHTMLParser.ActiveFormattingElements.prototype.insertAfter = function(a,b) {\r\n  var idx = this.list.lastIndexOf(a);\r\n  if (idx !== -1) {\r\n    this.list.splice(idx, 0, b);\r\n    this.attrs.splice(idx, 0, b);\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n/***\r\n * This is the parser factory function. It is the return value of\r\n * the outer closure that it is defined within.  Most of the parser\r\n * implementation details are inside this function.\r\n */\r\nfunction HTMLParser(address, fragmentContext, options) {\r\n  /***\r\n   * These are the parser's state variables\r\n   */\r\n  // Scanner state\r\n  var chars = null;\r\n  var numchars = 0; // Length of chars\r\n  var nextchar = 0; // Index of next char\r\n  var input_complete = false; // Becomes true when end() called.\r\n  var scanner_skip_newline = false; // If previous char was CR\r\n  var reentrant_invocations = 0;\r\n  var saved_scanner_state = [];\r\n  var leftovers = \"\";\r\n  var first_batch = true;\r\n  var paused = 0; // Becomes non-zero while loading scripts\r\n\r\n\r\n  // Tokenizer state\r\n  var tokenizer = data_state; // Current tokenizer state\r\n  var return_state;\r\n  var character_reference_code;\r\n  var tagnamebuf = \"\";\r\n  var lasttagname = \"\"; // holds the target end tag for text states\r\n  var tempbuf = [];\r\n  var attrnamebuf = \"\";\r\n  var attrvaluebuf = \"\";\r\n  var commentbuf = [];\r\n  var doctypenamebuf = [];\r\n  var doctypepublicbuf = [];\r\n  var doctypesystembuf = [];\r\n  var attributes = [];\r\n  var is_end_tag = false;\r\n\r\n  // Tree builder state\r\n  var parser = initial_mode; // Current insertion mode\r\n  var originalInsertionMode = null; // A saved insertion mode\r\n  var templateInsertionModes = []; // Stack of template insertion modes.\r\n  var stack = new HTMLParser.ElementStack(); // Stack of open elements\r\n  var afe = new HTMLParser.ActiveFormattingElements(); // mis-nested tags\r\n  var fragment = (fragmentContext!==undefined); // For innerHTML, etc.\r\n  var head_element_pointer = null;\r\n  var form_element_pointer = null;\r\n  var scripting_enabled = true;\r\n  if (fragmentContext) {\r\n\tscripting_enabled = fragmentContext.ownerDocument._scripting_enabled;\r\n  }\r\n  if (options && options.scripting_enabled === false)\r\n    scripting_enabled = false;\r\n  var frameset_ok = true;\r\n  var force_quirks = false;\r\n  var pending_table_text;\r\n  var text_integration_mode; // XXX a spec bug workaround?\r\n\r\n  // A single run of characters, buffered up to be sent to\r\n  // the parser as a single string.\r\n  var textrun = [];\r\n  var textIncludesNUL = false;\r\n  var ignore_linefeed = false;\r\n\r\n  /***\r\n   * This is the parser object that will be the return value of this\r\n   * factory function, which is some 5000 lines below.\r\n   * Note that the variable \"parser\" is the current state of the\r\n   * parser's state machine.  This variable \"htmlparser\" is the\r\n   * return value and defines the public API of the parser\r\n   */\r\n  var htmlparser = {\r\n    document: function() {\r\n      return doc;\r\n    },\r\n\r\n    // Convenience function for internal use. Can only be called once,\r\n    // as it removes the nodes from `doc` to add them to fragment.\r\n    _asDocumentFragment: function() {\r\n      var frag = doc.createDocumentFragment();\r\n      var root = doc.firstChild;\r\n      while(root.hasChildNodes()) {\r\n        frag.appendChild(root.firstChild);\r\n      }\r\n      return frag;\r\n    },\r\n\r\n    // Internal function used from HTMLScriptElement to pause the\r\n    // parser while a script is being loaded from the network\r\n    pause: function() {\r\n      // print(\"pausing parser\");\r\n      paused++;\r\n    },\r\n\r\n    // Called when a script finishes loading\r\n    resume: function() {\r\n      // print(\"resuming parser\");\r\n      paused--;\r\n      // XXX: added this to force a resumption.\r\n      // Is this the right thing to do?\r\n      this.parse(\"\");\r\n    },\r\n\r\n    // Parse the HTML text s.\r\n    // The second argument should be true if there is no more\r\n    // text to be parsed, and should be false or omitted otherwise.\r\n    // The second argument must not be set for recursive invocations\r\n    // from document.write()\r\n    parse: function(s, end, shouldPauseFunc) {\r\n      var moreToDo;\r\n\r\n      // If we're paused, remember the text to parse, but\r\n      // don't parse it now.\r\n      // (Don't invoke shouldPauseFunc because we haven't handled 'end' yet.)\r\n      if (paused > 0) {\r\n        leftovers += s;\r\n        return true; // more to do\r\n      }\r\n\r\n\r\n      if (reentrant_invocations === 0) {\r\n        // A normal, top-level invocation\r\n        if (leftovers) {\r\n          s = leftovers + s;\r\n          leftovers = \"\";\r\n        }\r\n\r\n        // Add a special marker character to the end of\r\n        // the buffer.  If the scanner is at the end of\r\n        // the buffer and input_complete is set, then this\r\n        // character will transform into an EOF token.\r\n        // Having an actual character that represents EOF\r\n        // in the character buffer makes lookahead regexp\r\n        // matching work more easily, and this is\r\n        // important for character references.\r\n        if (end) {\r\n          s += \"\\uFFFF\";\r\n          input_complete = true; // Makes scanChars() send EOF\r\n        }\r\n\r\n        chars = s;\r\n        numchars = s.length;\r\n        nextchar = 0;\r\n\r\n        if (first_batch) {\r\n          // We skip a leading Byte Order Mark (\\uFEFF)\r\n          // on first batch of text we're given\r\n          first_batch = false;\r\n          if (chars.charCodeAt(0) === 0xFEFF) nextchar = 1;\r\n        }\r\n\r\n        reentrant_invocations++;\r\n        moreToDo = scanChars(shouldPauseFunc);\r\n        leftovers = chars.substring(nextchar, numchars);\r\n        reentrant_invocations--;\r\n      }\r\n      else {\r\n        // This is the re-entrant case, which we have to\r\n        // handle a little differently.\r\n        reentrant_invocations++;\r\n\r\n        // Save current scanner state\r\n        saved_scanner_state.push(chars, numchars, nextchar);\r\n\r\n        // Set new scanner state\r\n        chars = s;\r\n        numchars = s.length;\r\n        nextchar = 0;\r\n\r\n        // Now scan as many of these new chars as we can\r\n        scanChars();\r\n        moreToDo = false;\r\n\r\n        leftovers = chars.substring(nextchar, numchars);\r\n\r\n        // restore old scanner state\r\n        nextchar = saved_scanner_state.pop();\r\n        numchars = saved_scanner_state.pop();\r\n        chars = saved_scanner_state.pop();\r\n\r\n        // If there were leftover chars from this invocation\r\n        // insert them into the pending invocation's buffer\r\n        // and trim already processed chars at the same time\r\n        if (leftovers) {\r\n          chars = leftovers + chars.substring(nextchar);\r\n          numchars = chars.length;\r\n          nextchar = 0;\r\n          leftovers = \"\";\r\n        }\r\n\r\n        // Decrement the counter\r\n        reentrant_invocations--;\r\n      }\r\n      return moreToDo;\r\n    }\r\n  };\r\n\r\n\r\n  // This is the document we'll be building up\r\n  var doc = new Document(true, address);\r\n\r\n  // The document needs to know about the parser, for document.write().\r\n  // This _parser property will be deleted when we're done parsing.\r\n  doc._parser = htmlparser;\r\n\r\n  // XXX I think that any document we use this parser on should support\r\n  // scripts. But I may need to configure that through a parser parameter\r\n  // Only documents with windows (\"browsing contexts\" to be precise)\r\n  // allow scripting.\r\n  doc._scripting_enabled = scripting_enabled;\r\n\r\n\r\n  /***\r\n   * The actual code of the HTMLParser() factory function begins here.\r\n   */\r\n\r\n  if (fragmentContext) { // for innerHTML parsing\r\n    if (fragmentContext.ownerDocument._quirks)\r\n      doc._quirks = true;\r\n    if (fragmentContext.ownerDocument._limitedQuirks)\r\n      doc._limitedQuirks = true;\r\n\r\n    // Set the initial tokenizer state\r\n    if (fragmentContext.namespaceURI === NAMESPACE.HTML) {\r\n      switch(fragmentContext.localName) {\r\n      case \"title\":\r\n      case \"textarea\":\r\n        tokenizer = rcdata_state;\r\n        break;\r\n      case \"style\":\r\n      case \"xmp\":\r\n      case \"iframe\":\r\n      case \"noembed\":\r\n      case \"noframes\":\r\n      case \"script\":\r\n      case \"plaintext\":\r\n        tokenizer = plaintext_state;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var root = doc.createElement(\"html\");\r\n    doc._appendChild(root);\r\n    stack.push(root);\r\n    if (fragmentContext instanceof impl.HTMLTemplateElement) {\r\n      templateInsertionModes.push(in_template_mode);\r\n    }\r\n    resetInsertionMode();\r\n\r\n    for(var e = fragmentContext; e !== null; e = e.parentElement) {\r\n      if (e instanceof impl.HTMLFormElement) {\r\n        form_element_pointer = e;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /***\r\n   * Scanner functions\r\n   */\r\n  // Loop through the characters in chars, and pass them one at a time\r\n  // to the tokenizer FSM. Return when no more characters can be processed\r\n  // (This may leave 1 or more characters in the buffer: like a CR\r\n  // waiting to see if the next char is LF, or for states that require\r\n  // lookahead...)\r\n  function scanChars(shouldPauseFunc) {\r\n    var codepoint, s, pattern, eof;\r\n\r\n    while(nextchar < numchars) {\r\n\r\n      // If we just tokenized a </script> tag, then the paused flag\r\n      // may have been set to tell us to stop tokenizing while\r\n      // the script is loading\r\n      if (paused > 0 || (shouldPauseFunc && shouldPauseFunc())) {\r\n        return true;\r\n      }\r\n\r\n\r\n      switch(typeof tokenizer.lookahead) {\r\n      case 'undefined':\r\n        codepoint = chars.charCodeAt(nextchar++);\r\n        if (scanner_skip_newline) {\r\n          scanner_skip_newline = false;\r\n          if (codepoint === 0x000A) {\r\n            nextchar++;\r\n            continue;\r\n          }\r\n        }\r\n        switch(codepoint) {\r\n        case 0x000D:\r\n          // CR always turns into LF, but if the next character\r\n          // is LF, then that second LF is skipped.\r\n          if (nextchar < numchars) {\r\n            if (chars.charCodeAt(nextchar) === 0x000A)\r\n              nextchar++;\r\n          }\r\n          else {\r\n            // We don't know the next char right now, so we\r\n            // can't check if it is a LF.  So set a flag\r\n            scanner_skip_newline = true;\r\n          }\r\n\r\n          // In either case, emit a LF\r\n          tokenizer(0x000A);\r\n\r\n          break;\r\n        case 0xFFFF:\r\n          if (input_complete && nextchar === numchars) {\r\n            tokenizer(EOF); // codepoint will be 0xFFFF here\r\n            break;\r\n          }\r\n          /* falls through */\r\n        default:\r\n          tokenizer(codepoint);\r\n          break;\r\n        }\r\n        break;\r\n\r\n      case 'number':\r\n        codepoint = chars.charCodeAt(nextchar);\r\n\r\n        // The only tokenizer states that require fixed lookahead\r\n        // only consume alphanum characters, so we don't have\r\n        // to worry about CR and LF in this case\r\n\r\n        // tokenizer wants n chars of lookahead\r\n        var n = tokenizer.lookahead;\r\n        var needsString = true;\r\n        if (n < 0) {\r\n          needsString = false;\r\n          n = -n;\r\n        }\r\n\r\n        if (n < numchars - nextchar) {\r\n          // If we can look ahead that far\r\n          s = needsString ? chars.substring(nextchar, nextchar+n) : null;\r\n          eof = false;\r\n        }\r\n        else { // if we don't have that many characters\r\n          if (input_complete) { // If no more are coming\r\n            // Just return what we have\r\n            s = needsString ? chars.substring(nextchar, numchars) : null;\r\n            eof = true;\r\n            if (codepoint === 0xFFFF && nextchar === numchars-1)\r\n              codepoint = EOF;\r\n          }\r\n          else {\r\n            // Return now and wait for more chars later\r\n            return true;\r\n          }\r\n        }\r\n        tokenizer(codepoint, s, eof);\r\n        break;\r\n      case 'string':\r\n        codepoint = chars.charCodeAt(nextchar);\r\n\r\n        // tokenizer wants characters up to a matching string\r\n        pattern = tokenizer.lookahead;\r\n        var pos = chars.indexOf(pattern, nextchar);\r\n        if (pos !== -1) {\r\n          s = chars.substring(nextchar, pos + pattern.length);\r\n          eof = false;\r\n        }\r\n        else {  // No match\r\n          // If more characters coming, wait for them\r\n          if (!input_complete) return true;\r\n\r\n          // Otherwise, we've got to return what we've got\r\n          s = chars.substring(nextchar, numchars);\r\n          if (codepoint === 0xFFFF && nextchar === numchars-1)\r\n            codepoint = EOF;\r\n          eof = true;\r\n        }\r\n\r\n        // The tokenizer states that require this kind of\r\n        // lookahead have to be careful to handle CR characters\r\n        // correctly\r\n        tokenizer(codepoint, s, eof);\r\n        break;\r\n      }\r\n    }\r\n    return false; // no more characters to scan!\r\n  }\r\n\r\n\r\n  /***\r\n   * Tokenizer utility functions\r\n   */\r\n  function addAttribute(name,value) {\r\n    // Make sure there isn't already an attribute with this name\r\n    // If there is, ignore this one.\r\n    for(var i = 0; i < attributes.length; i++) {\r\n      if (attributes[i][0] === name) return;\r\n    }\r\n\r\n    if (value !== undefined) {\r\n      attributes.push([name, value]);\r\n    }\r\n    else {\r\n      attributes.push([name]);\r\n    }\r\n  }\r\n\r\n  // Shortcut for simple attributes\r\n  function handleSimpleAttribute() {\r\n    SIMPLEATTR.lastIndex = nextchar-1;\r\n    var matched = SIMPLEATTR.exec(chars);\r\n    if (!matched) throw new Error(\"should never happen\");\r\n    var name = matched[1];\r\n    if (!name) return false;\r\n    var value = matched[2];\r\n    var len = value.length;\r\n    switch(value[0]) {\r\n    case '\"':\r\n    case \"'\":\r\n      value = value.substring(1, len-1);\r\n      nextchar += (matched[0].length-1);\r\n      tokenizer = after_attribute_value_quoted_state;\r\n      break;\r\n    default:\r\n      tokenizer = before_attribute_name_state;\r\n      nextchar += (matched[0].length-1);\r\n      value = value.substring(0, len-1);\r\n      break;\r\n    }\r\n\r\n    // Make sure there isn't already an attribute with this name\r\n    // If there is, ignore this one.\r\n    for(var i = 0; i < attributes.length; i++) {\r\n      if (attributes[i][0] === name) return true;\r\n    }\r\n\r\n    attributes.push([name, value]);\r\n    return true;\r\n  }\r\n\r\n  function beginTagName() {\r\n    is_end_tag = false;\r\n    tagnamebuf = \"\";\r\n    attributes.length = 0;\r\n  }\r\n  function beginEndTagName() {\r\n    is_end_tag = true;\r\n    tagnamebuf = \"\";\r\n    attributes.length = 0;\r\n  }\r\n\r\n  function beginTempBuf() { tempbuf.length = 0; }\r\n  function beginAttrName() { attrnamebuf = \"\"; }\r\n  function beginAttrValue() { attrvaluebuf = \"\"; }\r\n  function beginComment() { commentbuf.length = 0; }\r\n  function beginDoctype() {\r\n    doctypenamebuf.length = 0;\r\n    doctypepublicbuf = null;\r\n    doctypesystembuf = null;\r\n  }\r\n  function beginDoctypePublicId() { doctypepublicbuf = []; }\r\n  function beginDoctypeSystemId() { doctypesystembuf = []; }\r\n  function forcequirks() { force_quirks = true; }\r\n  function cdataAllowed() {\r\n    return stack.top &&\r\n      stack.top.namespaceURI !== \"http://www.w3.org/1999/xhtml\";\r\n  }\r\n\r\n  // Return true if the codepoints in the specified buffer match the\r\n  // characters of lasttagname\r\n  function appropriateEndTag(buf) {\r\n    return lasttagname === buf;\r\n  }\r\n\r\n  function flushText() {\r\n    if (textrun.length > 0) {\r\n      var s = buf2str(textrun);\r\n      textrun.length = 0;\r\n\r\n      if (ignore_linefeed) {\r\n        ignore_linefeed = false;\r\n        if (s[0] === \"\\n\") s = s.substring(1);\r\n        if (s.length === 0) return;\r\n      }\r\n\r\n      insertToken(TEXT, s);\r\n      textIncludesNUL = false;\r\n    }\r\n    ignore_linefeed = false;\r\n  }\r\n\r\n  // Consume chars matched by the pattern and return them as a string. Starts\r\n  // matching at the current position, so users should drop the current char\r\n  // otherwise.\r\n  function getMatchingChars(pattern) {\r\n    pattern.lastIndex = nextchar - 1;\r\n    var match = pattern.exec(chars);\r\n    if (match && match.index === nextchar - 1) {\r\n      match = match[0];\r\n      nextchar += match.length - 1;\r\n      /* Careful!  Make sure we haven't matched the EOF character! */\r\n      if (input_complete && nextchar === numchars) {\r\n        // Oops, backup one.\r\n        match = match.slice(0, -1);\r\n        nextchar--;\r\n      }\r\n      return match;\r\n    } else {\r\n      throw new Error(\"should never happen\");\r\n    }\r\n  }\r\n\r\n  // emit a string of chars that match a regexp\r\n  // Returns false if no chars matched.\r\n  function emitCharsWhile(pattern) {\r\n    pattern.lastIndex = nextchar-1;\r\n    var match = pattern.exec(chars)[0];\r\n    if (!match) return false;\r\n    emitCharString(match);\r\n    nextchar += match.length - 1;\r\n    return true;\r\n  }\r\n\r\n  // This is used by CDATA sections\r\n  function emitCharString(s) {\r\n    if (textrun.length > 0) flushText();\r\n\r\n    if (ignore_linefeed) {\r\n      ignore_linefeed = false;\r\n      if (s[0] === \"\\n\") s = s.substring(1);\r\n      if (s.length === 0) return;\r\n    }\r\n\r\n    insertToken(TEXT, s);\r\n  }\r\n\r\n  function emitTag() {\r\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf);\r\n    else {\r\n      // Remember the last open tag we emitted\r\n      var tagname = tagnamebuf;\r\n      tagnamebuf = \"\";\r\n      lasttagname = tagname;\r\n      insertToken(TAG, tagname, attributes);\r\n    }\r\n  }\r\n\r\n\r\n  // A shortcut: look ahead and if this is a open or close tag\r\n  // in lowercase with no spaces and no attributes, just emit it now.\r\n  function emitSimpleTag() {\r\n    if (nextchar === numchars) { return false; /* not even 1 char left */ }\r\n    SIMPLETAG.lastIndex = nextchar;\r\n    var matched = SIMPLETAG.exec(chars);\r\n    if (!matched) throw new Error(\"should never happen\");\r\n    var tagname = matched[2];\r\n    if (!tagname) return false;\r\n    var endtag = matched[1];\r\n    if (endtag) {\r\n      nextchar += (tagname.length+2);\r\n      insertToken(ENDTAG, tagname);\r\n    }\r\n    else {\r\n      nextchar += (tagname.length+1);\r\n      lasttagname = tagname;\r\n      insertToken(TAG, tagname, NOATTRS);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function emitSelfClosingTag() {\r\n    if (is_end_tag) insertToken(ENDTAG, tagnamebuf, null, true);\r\n    else {\r\n      insertToken(TAG, tagnamebuf, attributes, true);\r\n    }\r\n  }\r\n\r\n  function emitDoctype() {\r\n    insertToken(DOCTYPE,\r\n          buf2str(doctypenamebuf),\r\n          doctypepublicbuf ? buf2str(doctypepublicbuf) : undefined,\r\n          doctypesystembuf ? buf2str(doctypesystembuf) : undefined);\r\n  }\r\n\r\n  function emitEOF() {\r\n    flushText();\r\n    parser(EOF); // EOF never goes to insertForeignContent()\r\n    doc.modclock = 1; // Start tracking modifications\r\n  }\r\n\r\n  // Insert a token, either using the current parser insertion mode\r\n  // (for HTML stuff) or using the insertForeignToken() method.\r\n  var insertToken = htmlparser.insertToken = function insertToken(t, value, arg3, arg4) {\r\n    flushText();\r\n    var current = stack.top;\r\n\r\n    if (!current || current.namespaceURI === NAMESPACE.HTML) {\r\n      // This is the common case\r\n      parser(t, value, arg3, arg4);\r\n    }\r\n    else {\r\n      // Otherwise we may need to insert this token as foreign content\r\n      if (t !== TAG && t !== TEXT) {\r\n        insertForeignToken(t, value, arg3, arg4);\r\n      }\r\n      else {\r\n        // But in some cases we treat it as regular content\r\n        if ((isMathmlTextIntegrationPoint(current) &&\r\n           (t === TEXT ||\r\n            (t === TAG &&\r\n             value !== \"mglyph\" && value !== \"malignmark\"))) ||\r\n          (t === TAG &&\r\n           value === \"svg\" &&\r\n           current.namespaceURI === NAMESPACE.MATHML &&\r\n           current.localName === \"annotation-xml\") ||\r\n          isHTMLIntegrationPoint(current)) {\r\n\r\n          // XXX: the text_integration_mode stuff is an\r\n          // attempted bug workaround of mine\r\n          text_integration_mode = true;\r\n          parser(t, value, arg3, arg4);\r\n          text_integration_mode = false;\r\n        }\r\n        // Otherwise it is foreign content\r\n        else {\r\n          insertForeignToken(t, value, arg3, arg4);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /***\r\n   * Tree building utility functions\r\n   */\r\n  function insertComment(data) {\r\n    var parent = stack.top;\r\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\r\n      fosterParent(function(doc) { return doc.createComment(data); });\r\n    } else {\r\n      // \"If the adjusted insertion location is inside a template element,\r\n      // let it instead be inside the template element's template contents\"\r\n      if (parent instanceof impl.HTMLTemplateElement) {\r\n        parent = parent.content;\r\n      }\r\n      parent._appendChild(parent.ownerDocument.createComment(data));\r\n    }\r\n  }\r\n\r\n  function insertText(s) {\r\n    var parent = stack.top;\r\n    if (foster_parent_mode && isA(parent, tablesectionrowSet)) {\r\n      fosterParent(function(doc) { return doc.createTextNode(s); });\r\n    } else {\r\n      // \"If the adjusted insertion location is inside a template element,\r\n      // let it instead be inside the template element's template contents\"\r\n      if (parent instanceof impl.HTMLTemplateElement) {\r\n        parent = parent.content;\r\n      }\r\n      // \"If there is a Text node immediately before the adjusted insertion\r\n      // location, then append data to that Text node's data.\"\r\n      var lastChild = parent.lastChild;\r\n      if (lastChild && lastChild.nodeType === Node.TEXT_NODE) {\r\n        lastChild.appendData(s);\r\n      } else {\r\n        parent._appendChild(parent.ownerDocument.createTextNode(s));\r\n      }\r\n    }\r\n  }\r\n\r\n  function createHTMLElt(doc, name, attrs) {\r\n    // Create the element this way, rather than with\r\n    // doc.createElement because createElement() does error\r\n    // checking on the element name that we need to avoid here.\r\n    var elt = html.createElement(doc, name, null);\r\n\r\n    if (attrs) {\r\n      for(var i = 0, n = attrs.length; i < n; i++) {\r\n        // Use the _ version to avoid testing the validity\r\n        // of the attribute name\r\n        elt._setAttribute(attrs[i][0], attrs[i][1]);\r\n      }\r\n    }\r\n    // XXX\r\n    // If the element is a resettable form element,\r\n    // run its reset algorithm now\r\n    // XXX\r\n    // handle case where form-element-pointer is not null\r\n    return elt;\r\n  }\r\n\r\n  // The in_table insertion mode turns on this flag, and that makes\r\n  // insertHTMLElement use the foster parenting algorithm for elements\r\n  // tags inside a table\r\n  var foster_parent_mode = false;\r\n\r\n  function insertHTMLElement(name, attrs) {\r\n    var elt = insertElement(function(doc) {\r\n      return createHTMLElt(doc, name, attrs);\r\n    });\r\n\r\n    // XXX\r\n    // If this is a form element, set its form attribute property here\r\n    if (isA(elt, formassociatedSet)) {\r\n      elt._form = form_element_pointer;\r\n    }\r\n\r\n    return elt;\r\n  }\r\n\r\n  // Insert the element into the open element or foster parent it\r\n  function insertElement(eltFunc) {\r\n    var elt;\r\n    if (foster_parent_mode && isA(stack.top, tablesectionrowSet)) {\r\n      elt = fosterParent(eltFunc);\r\n    }\r\n    else if (stack.top instanceof impl.HTMLTemplateElement) {\r\n      // \"If the adjusted insertion location is inside a template element,\r\n      // let it instead be inside the template element's template contents\"\r\n      elt = eltFunc(stack.top.content.ownerDocument);\r\n      stack.top.content._appendChild(elt);\r\n    } else {\r\n      elt = eltFunc(stack.top.ownerDocument);\r\n      stack.top._appendChild(elt);\r\n    }\r\n\r\n    stack.push(elt);\r\n    return elt;\r\n  }\r\n\r\n  function insertForeignElement(name, attrs, ns) {\r\n    return insertElement(function(doc) {\r\n      // We need to prevent createElementNS from trying to parse `name` as a\r\n      // `qname`, so use an internal Document#_createElementNS() interface.\r\n      var elt = doc._createElementNS(name, ns, null);\r\n      if (attrs) {\r\n        for(var i = 0, n = attrs.length; i < n; i++) {\r\n          var attr = attrs[i];\r\n          if (attr.length === 2)\r\n            elt._setAttribute(attr[0], attr[1]);\r\n          else {\r\n            elt._setAttributeNS(attr[2], attr[0], attr[1]);\r\n          }\r\n        }\r\n      }\r\n      return elt;\r\n    });\r\n  }\r\n\r\n  function lastElementOfType(type) {\r\n    for(var i = stack.elements.length-1; i >= 0; i--) {\r\n      if (stack.elements[i] instanceof type) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function fosterParent(eltFunc) {\r\n    var parent, before, lastTable = -1, lastTemplate = -1, elt;\r\n\r\n    lastTable = lastElementOfType(impl.HTMLTableElement);\r\n    lastTemplate = lastElementOfType(impl.HTMLTemplateElement);\r\n\r\n    if (lastTemplate >= 0 && (lastTable < 0 || lastTemplate > lastTable)) {\r\n      parent = stack.elements[lastTemplate];\r\n    } else if (lastTable >= 0) {\r\n      parent = stack.elements[lastTable].parentNode;\r\n      if (parent) {\r\n        before = stack.elements[lastTable];\r\n      } else {\r\n        parent = stack.elements[lastTable - 1];\r\n      }\r\n    }\r\n    if (!parent) parent = stack.elements[0]; // the `html` element.\r\n\r\n    // \"If the adjusted insertion location is inside a template element,\r\n    // let it instead be inside the template element's template contents\"\r\n    if (parent instanceof impl.HTMLTemplateElement) {\r\n      parent = parent.content;\r\n    }\r\n    // Create element in the appropriate document.\r\n    elt = eltFunc(parent.ownerDocument);\r\n\r\n    if (elt.nodeType === Node.TEXT_NODE) {\r\n      var prev;\r\n      if (before) prev = before.previousSibling;\r\n      else prev = parent.lastChild;\r\n      if (prev && prev.nodeType === Node.TEXT_NODE) {\r\n        prev.appendData(elt.data);\r\n        return elt;\r\n      }\r\n    }\r\n    if (before)\r\n      parent.insertBefore(elt, before);\r\n    else\r\n      parent._appendChild(elt);\r\n    return elt;\r\n  }\r\n\r\n\r\n  function resetInsertionMode() {\r\n    var last = false;\r\n    for(var i = stack.elements.length-1; i >= 0; i--) {\r\n      var node = stack.elements[i];\r\n      if (i === 0) {\r\n        last = true;\r\n        if (fragment) {\r\n          node = fragmentContext;\r\n        }\r\n      }\r\n      if (node.namespaceURI === NAMESPACE.HTML) {\r\n        var tag = node.localName;\r\n        switch(tag) {\r\n        case \"select\":\r\n          for(var j = i; j > 0; ) {\r\n            var ancestor = stack.elements[--j];\r\n            if (ancestor instanceof impl.HTMLTemplateElement) {\r\n              break;\r\n            } else if (ancestor instanceof impl.HTMLTableElement) {\r\n              parser = in_select_in_table_mode;\r\n              return;\r\n            }\r\n          }\r\n          parser = in_select_mode;\r\n          return;\r\n        case \"tr\":\r\n          parser = in_row_mode;\r\n          return;\r\n        case \"tbody\":\r\n        case \"tfoot\":\r\n        case \"thead\":\r\n          parser = in_table_body_mode;\r\n          return;\r\n        case \"caption\":\r\n          parser = in_caption_mode;\r\n          return;\r\n        case \"colgroup\":\r\n          parser = in_column_group_mode;\r\n          return;\r\n        case \"table\":\r\n          parser = in_table_mode;\r\n          return;\r\n        case \"template\":\r\n          parser = templateInsertionModes[templateInsertionModes.length-1];\r\n          return;\r\n        case \"body\":\r\n          parser = in_body_mode;\r\n          return;\r\n        case \"frameset\":\r\n          parser = in_frameset_mode;\r\n          return;\r\n        case \"html\":\r\n          if (head_element_pointer === null) {\r\n            parser = before_head_mode;\r\n          } else {\r\n            parser = after_head_mode;\r\n          }\r\n          return;\r\n        default:\r\n          if (!last) {\r\n            if (tag === \"head\") {\r\n              parser = in_head_mode;\r\n              return;\r\n            }\r\n            if (tag === \"td\" || tag === \"th\") {\r\n              parser = in_cell_mode;\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (last) {\r\n        parser = in_body_mode;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function parseRawText(name, attrs) {\r\n    insertHTMLElement(name, attrs);\r\n    tokenizer = rawtext_state;\r\n    originalInsertionMode = parser;\r\n    parser = text_mode;\r\n  }\r\n\r\n  function parseRCDATA(name, attrs) {\r\n    insertHTMLElement(name, attrs);\r\n    tokenizer = rcdata_state;\r\n    originalInsertionMode = parser;\r\n    parser = text_mode;\r\n  }\r\n\r\n  // Make a copy of element i on the list of active formatting\r\n  // elements, using its original attributes, not current\r\n  // attributes (which may have been modified by a script)\r\n  function afeclone(doc, i) {\r\n    return {\r\n      elt: createHTMLElt(doc, afe.list[i].localName, afe.attrs[i]),\r\n      attrs: afe.attrs[i],\r\n    };\r\n  }\r\n\r\n\r\n  function afereconstruct() {\r\n    if (afe.list.length === 0) return;\r\n    var entry = afe.list[afe.list.length-1];\r\n    // If the last is a marker , do nothing\r\n    if (entry === afe.MARKER) return;\r\n    // Or if it is an open element, do nothing\r\n    if (stack.elements.lastIndexOf(entry) !== -1) return;\r\n\r\n    // Loop backward through the list until we find a marker or an\r\n    // open element, and then move forward one from there.\r\n    for(var i = afe.list.length-2; i >= 0; i--) {\r\n      entry = afe.list[i];\r\n      if (entry === afe.MARKER) break;\r\n      if (stack.elements.lastIndexOf(entry) !== -1) break;\r\n    }\r\n\r\n    // Now loop forward, starting from the element after the current\r\n    // one, recreating formatting elements and pushing them back onto\r\n    // the list of open elements\r\n    for(i = i+1; i < afe.list.length; i++) {\r\n      var newelt = insertElement(function(doc) { return afeclone(doc, i).elt; });\r\n      afe.list[i] = newelt;\r\n    }\r\n  }\r\n\r\n  // Used by the adoptionAgency() function\r\n  var BOOKMARK = {localName:\"BM\"};\r\n\r\n  function adoptionAgency(tag) {\r\n    // If the current node is an HTML element whose tag name is subject,\r\n    // and the current node is not in the list of active formatting\r\n    // elements, then pop the current node off the stack of open\r\n    // elements and abort these steps.\r\n    if (isA(stack.top, tag) && afe.indexOf(stack.top) === -1) {\r\n      stack.pop();\r\n      return true; // no more handling required\r\n    }\r\n\r\n    // Let outer loop counter be zero.\r\n    var outer = 0;\r\n\r\n    // Outer loop: If outer loop counter is greater than or\r\n    // equal to eight, then abort these steps.\r\n    while(outer < 8) {\r\n      // Increment outer loop counter by one.\r\n      outer++;\r\n\r\n      // Let the formatting element be the last element in the list\r\n      // of active formatting elements that: is between the end of\r\n      // the list and the last scope marker in the list, if any, or\r\n      // the start of the list otherwise, and has the same tag name\r\n      // as the token.\r\n      var fmtelt = afe.findElementByTag(tag);\r\n\r\n      // If there is no such node, then abort these steps and instead\r\n      // act as described in the \"any other end tag\" entry below.\r\n      if (!fmtelt) {\r\n        return false; // false means handle by the default case\r\n      }\r\n\r\n      // Otherwise, if there is such a node, but that node is not in\r\n      // the stack of open elements, then this is a parse error;\r\n      // remove the element from the list, and abort these steps.\r\n      var index = stack.elements.lastIndexOf(fmtelt);\r\n      if (index === -1) {\r\n        afe.remove(fmtelt);\r\n        return true;   // true means no more handling required\r\n      }\r\n\r\n      // Otherwise, if there is such a node, and that node is also in\r\n      // the stack of open elements, but the element is not in scope,\r\n      // then this is a parse error; ignore the token, and abort\r\n      // these steps.\r\n      if (!stack.elementInScope(fmtelt)) {\r\n        return true;\r\n      }\r\n\r\n      // Let the furthest block be the topmost node in the stack of\r\n      // open elements that is lower in the stack than the formatting\r\n      // element, and is an element in the special category. There\r\n      // might not be one.\r\n      var furthestblock = null, furthestblockindex;\r\n      for(var i = index+1; i < stack.elements.length; i++) {\r\n        if (isA(stack.elements[i], specialSet)) {\r\n          furthestblock = stack.elements[i];\r\n          furthestblockindex = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If there is no furthest block, then the UA must skip the\r\n      // subsequent steps and instead just pop all the nodes from the\r\n      // bottom of the stack of open elements, from the current node\r\n      // up to and including the formatting element, and remove the\r\n      // formatting element from the list of active formatting\r\n      // elements.\r\n      if (!furthestblock) {\r\n        stack.popElement(fmtelt);\r\n        afe.remove(fmtelt);\r\n        return true;\r\n      }\r\n      else {\r\n        // Let the common ancestor be the element immediately above\r\n        // the formatting element in the stack of open elements.\r\n        var ancestor = stack.elements[index-1];\r\n\r\n        // Let a bookmark note the position of the formatting\r\n        // element in the list of active formatting elements\r\n        // relative to the elements on either side of it in the\r\n        // list.\r\n        afe.insertAfter(fmtelt, BOOKMARK);\r\n\r\n        // Let node and last node be the furthest block.\r\n        var node = furthestblock;\r\n        var lastnode = furthestblock;\r\n        var nodeindex = furthestblockindex;\r\n        var nodeafeindex;\r\n\r\n        // Let inner loop counter be zero.\r\n        var inner = 0;\r\n\r\n        while (true) {\r\n\r\n          // Increment inner loop counter by one.\r\n          inner++;\r\n\r\n          // Let node be the element immediately above node in\r\n          // the stack of open elements, or if node is no longer\r\n          // in the stack of open elements (e.g. because it got\r\n          // removed by this algorithm), the element that was\r\n          // immediately above node in the stack of open elements\r\n          // before node was removed.\r\n          node = stack.elements[--nodeindex];\r\n\r\n          // If node is the formatting element, then go\r\n          // to the next step in the overall algorithm.\r\n          if (node === fmtelt) break;\r\n\r\n          // If the inner loop counter is greater than three and node\r\n          // is in the list of active formatting elements, then remove\r\n          // node from the list of active formatting elements.\r\n          nodeafeindex = afe.indexOf(node);\r\n          if (inner > 3 && nodeafeindex !== -1) {\r\n            afe.remove(node);\r\n            nodeafeindex = -1;\r\n          }\r\n\r\n          // If node is not in the list of active formatting\r\n          // elements, then remove node from the stack of open\r\n          // elements and then go back to the step labeled inner\r\n          // loop.\r\n          if (nodeafeindex === -1) {\r\n            stack.removeElement(node);\r\n            continue;\r\n          }\r\n\r\n          // Create an element for the token for which the\r\n          // element node was created with common ancestor as\r\n          // the intended parent, replace the entry for node\r\n          // in the list of active formatting elements with an\r\n          // entry for the new element, replace the entry for\r\n          // node in the stack of open elements with an entry for\r\n          // the new element, and let node be the new element.\r\n          var newelt = afeclone(ancestor.ownerDocument, nodeafeindex);\r\n          afe.replace(node, newelt.elt, newelt.attrs);\r\n          stack.elements[nodeindex] = newelt.elt;\r\n          node = newelt.elt;\r\n\r\n          // If last node is the furthest block, then move the\r\n          // aforementioned bookmark to be immediately after the\r\n          // new node in the list of active formatting elements.\r\n          if (lastnode === furthestblock) {\r\n            afe.remove(BOOKMARK);\r\n            afe.insertAfter(newelt.elt, BOOKMARK);\r\n          }\r\n\r\n          // Insert last node into node, first removing it from\r\n          // its previous parent node if any.\r\n          node._appendChild(lastnode);\r\n\r\n          // Let last node be node.\r\n          lastnode = node;\r\n        }\r\n\r\n        // If the common ancestor node is a table, tbody, tfoot,\r\n        // thead, or tr element, then, foster parent whatever last\r\n        // node ended up being in the previous step, first removing\r\n        // it from its previous parent node if any.\r\n        if (foster_parent_mode && isA(ancestor, tablesectionrowSet)) {\r\n          fosterParent(function() { return lastnode; });\r\n        }\r\n        // Otherwise, append whatever last node ended up being in\r\n        // the previous step to the common ancestor node, first\r\n        // removing it from its previous parent node if any.\r\n        else if (ancestor instanceof impl.HTMLTemplateElement) {\r\n          ancestor.content._appendChild(lastnode);\r\n        } else {\r\n          ancestor._appendChild(lastnode);\r\n        }\r\n\r\n        // Create an element for the token for which the\r\n        // formatting element was created, with furthest block\r\n        // as the intended parent.\r\n        var newelt2 = afeclone(furthestblock.ownerDocument, afe.indexOf(fmtelt));\r\n\r\n        // Take all of the child nodes of the furthest block and\r\n        // append them to the element created in the last step.\r\n        while(furthestblock.hasChildNodes()) {\r\n          newelt2.elt._appendChild(furthestblock.firstChild);\r\n        }\r\n\r\n        // Append that new element to the furthest block.\r\n        furthestblock._appendChild(newelt2.elt);\r\n\r\n        // Remove the formatting element from the list of active\r\n        // formatting elements, and insert the new element into the\r\n        // list of active formatting elements at the position of\r\n        // the aforementioned bookmark.\r\n        afe.remove(fmtelt);\r\n        afe.replace(BOOKMARK, newelt2.elt, newelt2.attrs);\r\n\r\n        // Remove the formatting element from the stack of open\r\n        // elements, and insert the new element into the stack of\r\n        // open elements immediately below the position of the\r\n        // furthest block in that stack.\r\n        stack.removeElement(fmtelt);\r\n        var pos = stack.elements.lastIndexOf(furthestblock);\r\n        stack.elements.splice(pos+1, 0, newelt2.elt);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // We do this when we get /script in in_text_mode\r\n  function handleScriptEnd() {\r\n    // XXX:\r\n    // This is just a stub implementation right now and doesn't run scripts.\r\n    // Getting this method right involves the event loop, URL resolution\r\n    // script fetching etc. For now I just want to be able to parse\r\n    // documents and test the parser.\r\n\r\n    //var script = stack.top;\r\n    stack.pop();\r\n    parser = originalInsertionMode;\r\n    //script._prepare();\r\n    return;\r\n\r\n    // XXX: here is what this method is supposed to do\r\n\r\n    // Provide a stable state.\r\n\r\n    // Let script be the current node (which will be a script\r\n    // element).\r\n\r\n    // Pop the current node off the stack of open elements.\r\n\r\n    // Switch the insertion mode to the original insertion mode.\r\n\r\n    // Let the old insertion point have the same value as the current\r\n    // insertion point. Let the insertion point be just before the\r\n    // next input character.\r\n\r\n    // Increment the parser's script nesting level by one.\r\n\r\n    // Prepare the script. This might cause some script to execute,\r\n    // which might cause new characters to be inserted into the\r\n    // tokenizer, and might cause the tokenizer to output more tokens,\r\n    // resulting in a reentrant invocation of the parser.\r\n\r\n    // Decrement the parser's script nesting level by one. If the\r\n    // parser's script nesting level is zero, then set the parser\r\n    // pause flag to false.\r\n\r\n    // Let the insertion point have the value of the old insertion\r\n    // point. (In other words, restore the insertion point to its\r\n    // previous value. This value might be the \"undefined\" value.)\r\n\r\n    // At this stage, if there is a pending parsing-blocking script,\r\n    // then:\r\n\r\n    // If the script nesting level is not zero:\r\n\r\n    //   Set the parser pause flag to true, and abort the processing\r\n    //   of any nested invocations of the tokenizer, yielding\r\n    //   control back to the caller. (Tokenization will resume when\r\n    //   the caller returns to the \"outer\" tree construction stage.)\r\n\r\n    //   The tree construction stage of this particular parser is\r\n    //   being called reentrantly, say from a call to\r\n    //   document.write().\r\n\r\n    // Otherwise:\r\n\r\n    //     Run these steps:\r\n\r\n    //       Let the script be the pending parsing-blocking\r\n    //       script. There is no longer a pending\r\n    //       parsing-blocking script.\r\n\r\n    //       Block the tokenizer for this instance of the HTML\r\n    //       parser, such that the event loop will not run tasks\r\n    //       that invoke the tokenizer.\r\n\r\n    //       If the parser's Document has a style sheet that is\r\n    //       blocking scripts or the script's \"ready to be\r\n    //       parser-executed\" flag is not set: spin the event\r\n    //       loop until the parser's Document has no style sheet\r\n    //       that is blocking scripts and the script's \"ready to\r\n    //       be parser-executed\" flag is set.\r\n\r\n    //       Unblock the tokenizer for this instance of the HTML\r\n    //       parser, such that tasks that invoke the tokenizer\r\n    //       can again be run.\r\n\r\n    //       Let the insertion point be just before the next\r\n    //       input character.\r\n\r\n    //       Increment the parser's script nesting level by one\r\n    //       (it should be zero before this step, so this sets\r\n    //       it to one).\r\n\r\n    //       Execute the script.\r\n\r\n    //       Decrement the parser's script nesting level by\r\n    //       one. If the parser's script nesting level is zero\r\n    //       (which it always should be at this point), then set\r\n    //       the parser pause flag to false.\r\n\r\n    //       Let the insertion point be undefined again.\r\n\r\n    //       If there is once again a pending parsing-blocking\r\n    //       script, then repeat these steps from step 1.\r\n\r\n\r\n  }\r\n\r\n  function stopParsing() {\r\n    // XXX This is just a temporary implementation to get the parser working.\r\n    // A full implementation involves scripts and events and the event loop.\r\n\r\n    // Remove the link from document to parser.\r\n    // This is instead of \"set the insertion point to undefined\".\r\n    // It means that document.write() can't write into the doc anymore.\r\n    delete doc._parser;\r\n\r\n    stack.elements.length = 0; // pop everything off\r\n\r\n    // If there is a window object associated with the document\r\n    // then trigger an load event on it\r\n    if (doc.defaultView) {\r\n      doc.defaultView.dispatchEvent(new impl.Event(\"load\",{}));\r\n    }\r\n\r\n  }\r\n\r\n  /****\r\n   * Tokenizer states\r\n   */\r\n\r\n  /**\r\n   * This file was partially mechanically generated from\r\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html\r\n   *\r\n   * After mechanical conversion, it was further converted from\r\n   * prose to JS by hand, but the intent is that it is a very\r\n   * faithful rendering of the HTML tokenization spec in\r\n   * JavaScript.\r\n   *\r\n   * It is not a goal of this tokenizer to detect or report\r\n   * parse errors.\r\n   *\r\n   * XXX The tokenizer is supposed to work with straight UTF32\r\n   * codepoints. But I don't think it has any dependencies on\r\n   * any character outside of the BMP so I think it is safe to\r\n   * pass it UTF16 characters. I don't think it will ever change\r\n   * state in the middle of a surrogate pair.\r\n   */\r\n\r\n  /*\r\n   * Each state is represented by a function.  For most states, the\r\n   * scanner simply passes the next character (as an integer\r\n   * codepoint) to the current state function and automatically\r\n   * consumes the character.  If the state function can't process\r\n   * the character it can call pushback() to push it back to the\r\n   * scanner.\r\n   *\r\n   * Some states require lookahead, though.  If a state function has\r\n   * a lookahead property, then it is invoked differently.  In this\r\n   * case, the scanner invokes the function with 3 arguments: 1) the\r\n   * next codepoint 2) a string of lookahead text 3) a boolean that\r\n   * is true if the lookahead goes all the way to the EOF. (XXX\r\n   * actually maybe this third is not necessary... the lookahead\r\n   * could just include \\uFFFF?)\r\n   *\r\n   * If the lookahead property of a state function is an integer, it\r\n   * specifies the number of characters required. If it is a string,\r\n   * then the scanner will scan for that string and return all\r\n   * characters up to and including that sequence, or up to EOF.  If\r\n   * the lookahead property is a regexp, then the scanner will match\r\n   * the regexp at the current point and return the matching string.\r\n   *\r\n   * States that require lookahead are responsible for explicitly\r\n   * consuming the characters they process. They do this by\r\n   * incrementing nextchar by the number of processed characters.\r\n   */\r\n  function reconsume(c, new_state) {\r\n    tokenizer = new_state;\r\n    nextchar--; // pushback\r\n  }\r\n\r\n  function data_state(c) {\r\n    switch(c) {\r\n    case 0x0026: // AMPERSAND\r\n      return_state = data_state;\r\n      tokenizer = character_reference_state;\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      if (emitSimpleTag()) // Shortcut for <p>, <dl>, </div> etc.\r\n        break;\r\n      tokenizer = tag_open_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      // Usually null characters emitted by the tokenizer will be\r\n      // ignored by the tree builder, but sometimes they'll be\r\n      // converted to \\uFFFD.  I don't want to have the search every\r\n      // string emitted to replace NULs, so I'll set a flag\r\n      // if I've emitted a NUL.\r\n      textrun.push(c);\r\n      textIncludesNUL = true;\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      // Instead of just pushing a single character and then\r\n      // coming back to the very same place, lookahead and\r\n      // emit everything we can at once.\r\n      /*jshint -W030 */\r\n      emitCharsWhile(DATATEXT) || textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function rcdata_state(c) {\r\n    // Save the open tag so we can find a matching close tag\r\n    switch(c) {\r\n    case 0x0026: // AMPERSAND\r\n      return_state = rcdata_state;\r\n      tokenizer = character_reference_state;\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = rcdata_less_than_sign_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      textIncludesNUL = true;\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function rawtext_state(c) {\r\n    switch(c) {\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = rawtext_less_than_sign_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      /*jshint -W030 */\r\n      emitCharsWhile(RAWTEXT) || textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_state(c) {\r\n    switch(c) {\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_less_than_sign_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      /*jshint -W030 */\r\n      emitCharsWhile(RAWTEXT) || textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function plaintext_state(c) {\r\n    switch(c) {\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      /*jshint -W030 */\r\n      emitCharsWhile(PLAINTEXT) || textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function tag_open_state(c) {\r\n    switch(c) {\r\n    case 0x0021: // EXCLAMATION MARK\r\n      tokenizer = markup_declaration_open_state;\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      tokenizer = end_tag_open_state;\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginTagName();\r\n      reconsume(c, tag_name_state);\r\n      break;\r\n    case 0x003F: // QUESTION MARK\r\n      reconsume(c, bogus_comment_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, data_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function end_tag_open_state(c) {\r\n    switch(c) {\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginEndTagName();\r\n      reconsume(c, tag_name_state);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      break;\r\n    case -1: // EOF\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x002F); // SOLIDUS\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      reconsume(c, bogus_comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function tag_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = before_attribute_name_state;\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      tokenizer = self_closing_start_tag_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitTag();\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      tagnamebuf += String.fromCharCode(c + 0x0020);\r\n      break;\r\n    case 0x0000: // NULL\r\n      tagnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tagnamebuf += getMatchingChars(TAGNAME);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function rcdata_less_than_sign_state(c) {\r\n    /* identical to the RAWTEXT less-than sign state, except s/RAWTEXT/RCDATA/g */\r\n    if (c === 0x002F) {  // SOLIDUS\r\n      beginTempBuf();\r\n      tokenizer = rcdata_end_tag_open_state;\r\n    }\r\n    else {\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, rcdata_state);\r\n    }\r\n  }\r\n\r\n  function rcdata_end_tag_open_state(c) {\r\n    /* identical to the RAWTEXT (and Script data) end tag open state, except s/RAWTEXT/RCDATA/g */\r\n    switch(c) {\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginEndTagName();\r\n      reconsume(c, rcdata_end_tag_name_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x002F); // SOLIDUS\r\n      reconsume(c, rcdata_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function rcdata_end_tag_name_state(c) {\r\n    /* identical to the RAWTEXT (and Script data) end tag name state, except s/RAWTEXT/RCDATA/g */\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = before_attribute_name_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = self_closing_start_tag_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = data_state;\r\n        emitTag();\r\n        return;\r\n      }\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n\r\n      tagnamebuf += String.fromCharCode(c + 0x0020);\r\n      tempbuf.push(c);\r\n      return;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n\r\n      tagnamebuf += String.fromCharCode(c);\r\n      tempbuf.push(c);\r\n      return;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    // If we don't return in one of the cases above, then this was not\r\n    // an appropriately matching close tag, so back out by emitting all\r\n    // the characters as text\r\n    textrun.push(0x003C); // LESS-THAN SIGN\r\n    textrun.push(0x002F); // SOLIDUS\r\n    pushAll(textrun, tempbuf);\r\n    reconsume(c, rcdata_state);\r\n  }\r\n\r\n  function rawtext_less_than_sign_state(c) {\r\n    /* identical to the RCDATA less-than sign state, except s/RCDATA/RAWTEXT/g\r\n     */\r\n    if (c === 0x002F) { // SOLIDUS\r\n      beginTempBuf();\r\n      tokenizer = rawtext_end_tag_open_state;\r\n    }\r\n    else {\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, rawtext_state);\r\n    }\r\n  }\r\n\r\n  function rawtext_end_tag_open_state(c) {\r\n    /* identical to the RCDATA (and Script data) end tag open state, except s/RCDATA/RAWTEXT/g */\r\n    switch(c) {\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginEndTagName();\r\n      reconsume(c, rawtext_end_tag_name_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x002F); // SOLIDUS\r\n      reconsume(c, rawtext_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function rawtext_end_tag_name_state(c) {\r\n    /* identical to the RCDATA (and Script data) end tag name state, except s/RCDATA/RAWTEXT/g */\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = before_attribute_name_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = self_closing_start_tag_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = data_state;\r\n        emitTag();\r\n        return;\r\n      }\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      tagnamebuf += String.fromCharCode(c + 0x0020);\r\n      tempbuf.push(c);\r\n      return;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      tagnamebuf += String.fromCharCode(c);\r\n      tempbuf.push(c);\r\n      return;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    // If we don't return in one of the cases above, then this was not\r\n    // an appropriately matching close tag, so back out by emitting all\r\n    // the characters as text\r\n    textrun.push(0x003C); // LESS-THAN SIGN\r\n    textrun.push(0x002F); // SOLIDUS\r\n    pushAll(textrun,tempbuf);\r\n    reconsume(c, rawtext_state);\r\n  }\r\n\r\n  function script_data_less_than_sign_state(c) {\r\n    switch(c) {\r\n    case 0x002F: // SOLIDUS\r\n      beginTempBuf();\r\n      tokenizer = script_data_end_tag_open_state;\r\n      break;\r\n    case 0x0021: // EXCLAMATION MARK\r\n      tokenizer = script_data_escape_start_state;\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x0021); // EXCLAMATION MARK\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, script_data_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_end_tag_open_state(c) {\r\n    /* identical to the RCDATA (and RAWTEXT) end tag open state, except s/RCDATA/Script data/g */\r\n    switch(c) {\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginEndTagName();\r\n      reconsume(c, script_data_end_tag_name_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x002F); // SOLIDUS\r\n      reconsume(c, script_data_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_end_tag_name_state(c) {\r\n    /* identical to the RCDATA (and RAWTEXT) end tag name state, except s/RCDATA/Script data/g */\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = before_attribute_name_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = self_closing_start_tag_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = data_state;\r\n        emitTag();\r\n        return;\r\n      }\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n\r\n      tagnamebuf += String.fromCharCode(c + 0x0020);\r\n      tempbuf.push(c);\r\n      return;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n\r\n      tagnamebuf += String.fromCharCode(c);\r\n      tempbuf.push(c);\r\n      return;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    // If we don't return in one of the cases above, then this was not\r\n    // an appropriately matching close tag, so back out by emitting all\r\n    // the characters as text\r\n    textrun.push(0x003C); // LESS-THAN SIGN\r\n    textrun.push(0x002F); // SOLIDUS\r\n    pushAll(textrun,tempbuf);\r\n    reconsume(c, script_data_state);\r\n  }\r\n\r\n  function script_data_escape_start_state(c) {\r\n    if (c === 0x002D) { // HYPHEN-MINUS\r\n      tokenizer = script_data_escape_start_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n    }\r\n    else {\r\n      reconsume(c, script_data_state);\r\n    }\r\n  }\r\n\r\n  function script_data_escape_start_dash_state(c) {\r\n    if (c === 0x002D) { // HYPHEN-MINUS\r\n      tokenizer = script_data_escaped_dash_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n    }\r\n    else {\r\n      reconsume(c, script_data_state);\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = script_data_escaped_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_escaped_less_than_sign_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = script_data_escaped_dash_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_escaped_less_than_sign_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      tokenizer = script_data_escaped_state;\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tokenizer = script_data_escaped_state;\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_dash_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_escaped_less_than_sign_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = script_data_state;\r\n      textrun.push(0x003E); // GREATER-THAN SIGN\r\n      break;\r\n    case 0x0000: // NULL\r\n      tokenizer = script_data_escaped_state;\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tokenizer = script_data_escaped_state;\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_less_than_sign_state(c) {\r\n    switch(c) {\r\n    case 0x002F: // SOLIDUS\r\n      beginTempBuf();\r\n      tokenizer = script_data_escaped_end_tag_open_state;\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginTempBuf();\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, script_data_double_escape_start_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      reconsume(c, script_data_escaped_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_end_tag_open_state(c) {\r\n    switch(c) {\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      beginEndTagName();\r\n      reconsume(c, script_data_escaped_end_tag_name_state);\r\n      break;\r\n    default:\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      textrun.push(0x002F); // SOLIDUS\r\n      reconsume(c, script_data_escaped_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_escaped_end_tag_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = before_attribute_name_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = self_closing_start_tag_state;\r\n        return;\r\n      }\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (appropriateEndTag(tagnamebuf)) {\r\n        tokenizer = data_state;\r\n        emitTag();\r\n        return;\r\n      }\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      tagnamebuf += String.fromCharCode(c + 0x0020);\r\n      tempbuf.push(c);\r\n      return;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      tagnamebuf += String.fromCharCode(c);\r\n      tempbuf.push(c);\r\n      return;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    // We get here in the default case, and if the closing tagname\r\n    // is not an appropriate tagname.\r\n    textrun.push(0x003C); // LESS-THAN SIGN\r\n    textrun.push(0x002F); // SOLIDUS\r\n    pushAll(textrun,tempbuf);\r\n    reconsume(c, script_data_escaped_state);\r\n  }\r\n\r\n  function script_data_double_escape_start_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n    case 0x002F: // SOLIDUS\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (buf2str(tempbuf) === \"script\") {\r\n        tokenizer = script_data_double_escaped_state;\r\n      }\r\n      else {\r\n        tokenizer = script_data_escaped_state;\r\n      }\r\n      textrun.push(c);\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      tempbuf.push(c + 0x0020);\r\n      textrun.push(c);\r\n      break;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      tempbuf.push(c);\r\n      textrun.push(c);\r\n      break;\r\n    default:\r\n      reconsume(c, script_data_escaped_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_double_escaped_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = script_data_double_escaped_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_double_escaped_less_than_sign_state;\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      break;\r\n    case 0x0000: // NULL\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_double_escaped_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = script_data_double_escaped_dash_dash_state;\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_double_escaped_less_than_sign_state;\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      break;\r\n    case 0x0000: // NULL\r\n      tokenizer = script_data_double_escaped_state;\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tokenizer = script_data_double_escaped_state;\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_double_escaped_dash_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      textrun.push(0x002D); // HYPHEN-MINUS\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      tokenizer = script_data_double_escaped_less_than_sign_state;\r\n      textrun.push(0x003C); // LESS-THAN SIGN\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = script_data_state;\r\n      textrun.push(0x003E); // GREATER-THAN SIGN\r\n      break;\r\n    case 0x0000: // NULL\r\n      tokenizer = script_data_double_escaped_state;\r\n      textrun.push(0xFFFD); // REPLACEMENT CHARACTER\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tokenizer = script_data_double_escaped_state;\r\n      textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function script_data_double_escaped_less_than_sign_state(c) {\r\n    if (c === 0x002F) { // SOLIDUS\r\n      beginTempBuf();\r\n      tokenizer = script_data_double_escape_end_state;\r\n      textrun.push(0x002F); // SOLIDUS\r\n    }\r\n    else {\r\n      reconsume(c, script_data_double_escaped_state);\r\n    }\r\n  }\r\n\r\n  function script_data_double_escape_end_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n    case 0x002F: // SOLIDUS\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      if (buf2str(tempbuf) === \"script\") {\r\n        tokenizer = script_data_escaped_state;\r\n      }\r\n      else {\r\n        tokenizer = script_data_double_escaped_state;\r\n      }\r\n      textrun.push(c);\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      tempbuf.push(c + 0x0020);\r\n      textrun.push(c);\r\n      break;\r\n    case 0x0061:  // [a-z]\r\n    case 0x0062:case 0x0063:case 0x0064:case 0x0065:case 0x0066:\r\n    case 0x0067:case 0x0068:case 0x0069:case 0x006A:case 0x006B:\r\n    case 0x006C:case 0x006D:case 0x006E:case 0x006F:case 0x0070:\r\n    case 0x0071:case 0x0072:case 0x0073:case 0x0074:case 0x0075:\r\n    case 0x0076:case 0x0077:case 0x0078:case 0x0079:case 0x007A:\r\n      tempbuf.push(c);\r\n      textrun.push(c);\r\n      break;\r\n    default:\r\n      reconsume(c, script_data_double_escaped_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function before_attribute_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    // For SOLIDUS, GREATER-THAN SIGN, and EOF, spec says \"reconsume in\r\n    // the after attribute name state\", but in our implementation that\r\n    // state always has an active attribute in attrnamebuf.  Just clone\r\n    // the rules here, without the addAttribute business.\r\n    case 0x002F: // SOLIDUS\r\n      tokenizer = self_closing_start_tag_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitTag();\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    case 0x003D: // EQUALS SIGN\r\n      beginAttrName();\r\n      attrnamebuf += String.fromCharCode(c);\r\n      tokenizer = attribute_name_state;\r\n      break;\r\n    default:\r\n      if (handleSimpleAttribute()) break;\r\n      beginAttrName();\r\n      reconsume(c, attribute_name_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // beginAttrName() must have been called before this point\r\n  // There is an active attribute in attrnamebuf (but not attrvaluebuf)\r\n  function attribute_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n    case 0x002F: // SOLIDUS\r\n    case 0x003E: // GREATER-THAN SIGN\r\n    case -1: // EOF\r\n      reconsume(c, after_attribute_name_state);\r\n      break;\r\n    case 0x003D: // EQUALS SIGN\r\n      tokenizer = before_attribute_value_state;\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      attrnamebuf += String.fromCharCode(c + 0x0020);\r\n      break;\r\n    case 0x0000: // NULL\r\n      attrnamebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n    case 0x0027: // APOSTROPHE\r\n    case 0x003C: // LESS-THAN SIGN\r\n      /* falls through */\r\n    default:\r\n      attrnamebuf += getMatchingChars(ATTRNAME);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // There is an active attribute in attrnamebuf, but not yet in attrvaluebuf.\r\n  function after_attribute_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      // Keep in sync with before_attribute_name_state.\r\n      addAttribute(attrnamebuf);\r\n      tokenizer = self_closing_start_tag_state;\r\n      break;\r\n    case 0x003D: // EQUALS SIGN\r\n      tokenizer = before_attribute_value_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      // Keep in sync with before_attribute_name_state.\r\n      tokenizer = data_state;\r\n      addAttribute(attrnamebuf);\r\n      emitTag();\r\n      break;\r\n    case -1: // EOF\r\n      // Keep in sync with before_attribute_name_state.\r\n      addAttribute(attrnamebuf);\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      addAttribute(attrnamebuf);\r\n      beginAttrName();\r\n      reconsume(c, attribute_name_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function before_attribute_value_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginAttrValue();\r\n      tokenizer = attribute_value_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginAttrValue();\r\n      tokenizer = attribute_value_single_quoted_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      /* falls through */\r\n    default:\r\n      beginAttrValue();\r\n      reconsume(c, attribute_value_unquoted_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function attribute_value_double_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0022: // QUOTATION MARK\r\n      addAttribute(attrnamebuf, attrvaluebuf);\r\n      tokenizer = after_attribute_value_quoted_state;\r\n      break;\r\n    case 0x0026: // AMPERSAND\r\n      return_state = attribute_value_double_quoted_state;\r\n      tokenizer = character_reference_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    case 0x000A: // LF\r\n      // this could be a converted \\r, so don't use getMatchingChars\r\n      attrvaluebuf += String.fromCharCode(c);\r\n      break;\r\n    default:\r\n      attrvaluebuf += getMatchingChars(DBLQUOTEATTRVAL);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function attribute_value_single_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0027: // APOSTROPHE\r\n      addAttribute(attrnamebuf, attrvaluebuf);\r\n      tokenizer = after_attribute_value_quoted_state;\r\n      break;\r\n    case 0x0026: // AMPERSAND\r\n      return_state = attribute_value_single_quoted_state;\r\n      tokenizer = character_reference_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    case 0x000A: // LF\r\n      // this could be a converted \\r, so don't use getMatchingChars\r\n      attrvaluebuf += String.fromCharCode(c);\r\n      break;\r\n    default:\r\n      attrvaluebuf += getMatchingChars(SINGLEQUOTEATTRVAL);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function attribute_value_unquoted_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      addAttribute(attrnamebuf, attrvaluebuf);\r\n      tokenizer = before_attribute_name_state;\r\n      break;\r\n    case 0x0026: // AMPERSAND\r\n      return_state = attribute_value_unquoted_state;\r\n      tokenizer = character_reference_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      addAttribute(attrnamebuf, attrvaluebuf);\r\n      tokenizer = data_state;\r\n      emitTag();\r\n      break;\r\n    case 0x0000: // NULL\r\n      attrvaluebuf += String.fromCharCode(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      nextchar--; // pushback\r\n      tokenizer = data_state;\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n    case 0x0027: // APOSTROPHE\r\n    case 0x003C: // LESS-THAN SIGN\r\n    case 0x003D: // EQUALS SIGN\r\n    case 0x0060: // GRAVE ACCENT\r\n      /* falls through */\r\n    default:\r\n      attrvaluebuf += getMatchingChars(UNQUOTEDATTRVAL);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function after_attribute_value_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = before_attribute_name_state;\r\n      break;\r\n    case 0x002F: // SOLIDUS\r\n      tokenizer = self_closing_start_tag_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitTag();\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      reconsume(c, before_attribute_name_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function self_closing_start_tag_state(c) {\r\n    switch(c) {\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      // Set the <i>self-closing flag</i> of the current tag token.\r\n      tokenizer = data_state;\r\n      emitSelfClosingTag(true);\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      reconsume(c, before_attribute_name_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function bogus_comment_state(c, lookahead, eof) {\r\n    var len = lookahead.length;\r\n\r\n    if (eof) {\r\n      nextchar += len-1; // don't consume the eof\r\n    }\r\n    else {\r\n      nextchar += len;\r\n    }\r\n\r\n    var comment = lookahead.substring(0, len-1);\r\n\r\n    comment = comment.replace(/\\u0000/g,\"\\uFFFD\");\r\n    comment = comment.replace(/\\u000D\\u000A/g,\"\\u000A\");\r\n    comment = comment.replace(/\\u000D/g,\"\\u000A\");\r\n\r\n    insertToken(COMMENT, comment);\r\n    tokenizer = data_state;\r\n  }\r\n  bogus_comment_state.lookahead = \">\";\r\n\r\n  function markup_declaration_open_state(c, lookahead, eof) {\r\n    if (lookahead[0] === \"-\" && lookahead[1] === \"-\") {\r\n      nextchar += 2;\r\n      beginComment();\r\n      tokenizer = comment_start_state;\r\n      return;\r\n    }\r\n\r\n    if (lookahead.toUpperCase() === \"DOCTYPE\") {\r\n      nextchar += 7;\r\n      tokenizer = doctype_state;\r\n    }\r\n    else if (lookahead === \"[CDATA[\" && cdataAllowed()) {\r\n      nextchar += 7;\r\n      tokenizer = cdata_section_state;\r\n    }\r\n    else {\r\n      tokenizer = bogus_comment_state;\r\n    }\r\n  }\r\n  markup_declaration_open_state.lookahead = 7;\r\n\r\n  function comment_start_state(c) {\r\n    beginComment();\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_start_dash_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      break; /* see comment in comment end state */\r\n    default:\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_start_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_end_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      break;\r\n    case -1: // EOF\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      emitEOF();\r\n      break; /* see comment in comment end state */\r\n    default:\r\n      commentbuf.push(0x002D /* HYPHEN-MINUS */);\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_state(c) {\r\n    switch(c) {\r\n    case 0x003C: // LESS-THAN SIGN\r\n      commentbuf.push(c);\r\n      tokenizer = comment_less_than_sign_state;\r\n      break;\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_end_dash_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      commentbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      emitEOF();\r\n      break; /* see comment in comment end state */\r\n    default:\r\n      commentbuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_less_than_sign_state(c) {\r\n    switch(c) {\r\n    case 0x0021: // EXCLAMATION MARK\r\n      commentbuf.push(c);\r\n      tokenizer = comment_less_than_sign_bang_state;\r\n      break;\r\n    case 0x003C: // LESS-THAN SIGN\r\n      commentbuf.push(c);\r\n      break;\r\n    default:\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_less_than_sign_bang_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_less_than_sign_bang_dash_state;\r\n      break;\r\n    default:\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_less_than_sign_bang_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_less_than_sign_bang_dash_dash_state;\r\n      break;\r\n    default:\r\n      reconsume(c, comment_end_dash_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_less_than_sign_bang_dash_dash_state(c) {\r\n    switch(c) {\r\n    case 0x003E: // GREATER-THAN SIGN\r\n    case -1: // EOF\r\n      reconsume(c, comment_end_state);\r\n      break;\r\n    default:\r\n      // parse error\r\n      reconsume(c, comment_end_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_end_dash_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      tokenizer = comment_end_state;\r\n      break;\r\n    case -1: // EOF\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      emitEOF();\r\n      break; /* see comment in comment end state */\r\n    default:\r\n      commentbuf.push(0x002D /* HYPHEN-MINUS */);\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_end_state(c) {\r\n    switch(c) {\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      break;\r\n    case 0x0021: // EXCLAMATION MARK\r\n      tokenizer = comment_end_bang_state;\r\n      break;\r\n    case 0x002D: // HYPHEN-MINUS\r\n      commentbuf.push(0x002D);\r\n      break;\r\n    case -1: // EOF\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      emitEOF();\r\n      break; /* For security reasons: otherwise, hostile user could put a script in a comment e.g. in a blog comment and then DOS the server so that the end tag isn't read, and then the commented script tag would be treated as live code */\r\n    default:\r\n      commentbuf.push(0x002D);\r\n      commentbuf.push(0x002D);\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function comment_end_bang_state(c) {\r\n    switch(c) {\r\n    case 0x002D: // HYPHEN-MINUS\r\n      commentbuf.push(0x002D);\r\n      commentbuf.push(0x002D);\r\n      commentbuf.push(0x0021);\r\n      tokenizer = comment_end_dash_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      break;\r\n    case -1: // EOF\r\n      insertToken(COMMENT, buf2str(commentbuf));\r\n      emitEOF();\r\n      break; /* see comment in comment end state */\r\n    default:\r\n      commentbuf.push(0x002D);\r\n      commentbuf.push(0x002D);\r\n      commentbuf.push(0x0021);\r\n      reconsume(c, comment_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = before_doctype_name_state;\r\n      break;\r\n    case -1: // EOF\r\n      beginDoctype();\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      reconsume(c, before_doctype_name_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function before_doctype_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      beginDoctype();\r\n      doctypenamebuf.push(c + 0x0020);\r\n      tokenizer = doctype_name_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      beginDoctype();\r\n      doctypenamebuf.push(0xFFFD);\r\n      tokenizer = doctype_name_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      beginDoctype();\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      beginDoctype();\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      beginDoctype();\r\n      doctypenamebuf.push(c);\r\n      tokenizer = doctype_name_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_name_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = after_doctype_name_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case 0x0041:  // [A-Z]\r\n    case 0x0042:case 0x0043:case 0x0044:case 0x0045:case 0x0046:\r\n    case 0x0047:case 0x0048:case 0x0049:case 0x004A:case 0x004B:\r\n    case 0x004C:case 0x004D:case 0x004E:case 0x004F:case 0x0050:\r\n    case 0x0051:case 0x0052:case 0x0053:case 0x0054:case 0x0055:\r\n    case 0x0056:case 0x0057:case 0x0058:case 0x0059:case 0x005A:\r\n      doctypenamebuf.push(c + 0x0020);\r\n      break;\r\n    case 0x0000: // NULL\r\n      doctypenamebuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      doctypenamebuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function after_doctype_name_state(c, lookahead, eof) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      nextchar += 1;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      nextchar += 1;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      lookahead = lookahead.toUpperCase();\r\n      if (lookahead === \"PUBLIC\") {\r\n        nextchar += 6;\r\n        tokenizer = after_doctype_public_keyword_state;\r\n      }\r\n      else if (lookahead === \"SYSTEM\") {\r\n        nextchar += 6;\r\n        tokenizer = after_doctype_system_keyword_state;\r\n      }\r\n      else {\r\n        forcequirks();\r\n        tokenizer = bogus_doctype_state;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  after_doctype_name_state.lookahead = 6;\r\n\r\n  function after_doctype_public_keyword_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = before_doctype_public_identifier_state;\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypePublicId();\r\n      tokenizer = doctype_public_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypePublicId();\r\n      tokenizer = doctype_public_identifier_single_quoted_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function before_doctype_public_identifier_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypePublicId();\r\n      tokenizer = doctype_public_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypePublicId();\r\n      tokenizer = doctype_public_identifier_single_quoted_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_public_identifier_double_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0022: // QUOTATION MARK\r\n      tokenizer = after_doctype_public_identifier_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      doctypepublicbuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_public_identifier_single_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0027: // APOSTROPHE\r\n      tokenizer = after_doctype_public_identifier_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      doctypepublicbuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      doctypepublicbuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function after_doctype_public_identifier_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = between_doctype_public_and_system_identifiers_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_single_quoted_state;\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function between_doctype_public_and_system_identifiers_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE Ignore the character.\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_single_quoted_state;\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function after_doctype_system_keyword_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      tokenizer = before_doctype_system_identifier_state;\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_single_quoted_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function before_doctype_system_identifier_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE Ignore the character.\r\n      break;\r\n    case 0x0022: // QUOTATION MARK\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_double_quoted_state;\r\n      break;\r\n    case 0x0027: // APOSTROPHE\r\n      beginDoctypeSystemId();\r\n      tokenizer = doctype_system_identifier_single_quoted_state;\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      forcequirks();\r\n      tokenizer = bogus_doctype_state;\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_system_identifier_double_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0022: // QUOTATION MARK\r\n      tokenizer = after_doctype_system_identifier_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      doctypesystembuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function doctype_system_identifier_single_quoted_state(c) {\r\n    switch(c) {\r\n    case 0x0027: // APOSTROPHE\r\n      tokenizer = after_doctype_system_identifier_state;\r\n      break;\r\n    case 0x0000: // NULL\r\n      doctypesystembuf.push(0xFFFD /* REPLACEMENT CHARACTER */);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      forcequirks();\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      doctypesystembuf.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function after_doctype_system_identifier_state(c) {\r\n    switch(c) {\r\n    case 0x0009: // CHARACTER TABULATION (tab)\r\n    case 0x000A: // LINE FEED (LF)\r\n    case 0x000C: // FORM FEED (FF)\r\n    case 0x0020: // SPACE\r\n      /* Ignore the character. */\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      forcequirks();\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      tokenizer = bogus_doctype_state;\r\n      /* This does *not* set the DOCTYPE token's force-quirks flag. */\r\n      break;\r\n    }\r\n  }\r\n\r\n  function bogus_doctype_state(c) {\r\n    switch(c) {\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      tokenizer = data_state;\r\n      emitDoctype();\r\n      break;\r\n    case -1: // EOF\r\n      emitDoctype();\r\n      emitEOF();\r\n      break;\r\n    default:\r\n      /* Ignore the character. */\r\n      break;\r\n    }\r\n  }\r\n\r\n  function cdata_section_state(c) {\r\n    switch(c) {\r\n    case 0x005D: // RIGHT SQUARE BRACKET\r\n      tokenizer = cdata_section_bracket_state;\r\n      break;\r\n    case -1: // EOF\r\n      emitEOF();\r\n      break;\r\n    case 0x0000: // NULL\r\n      textIncludesNUL = true;\r\n      /* fall through */\r\n    default:\r\n      // Instead of just pushing a single character and then\r\n      // coming back to the very same place, lookahead and\r\n      // emit everything we can at once.\r\n      /*jshint -W030 */\r\n      emitCharsWhile(CDATATEXT) || textrun.push(c);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function cdata_section_bracket_state(c) {\r\n    switch(c) {\r\n    case 0x005D: // RIGHT SQUARE BRACKET\r\n      tokenizer = cdata_section_end_state;\r\n      break;\r\n    default:\r\n      textrun.push(0x005D);\r\n      reconsume(c, cdata_section_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function cdata_section_end_state(c) {\r\n    switch(c) {\r\n    case 0x005D: // RIGHT SQUARE BRACKET\r\n      textrun.push(0x005D);\r\n      break;\r\n    case 0x003E: // GREATER-THAN SIGN\r\n      flushText();\r\n      tokenizer = data_state;\r\n      break;\r\n    default:\r\n      textrun.push(0x005D);\r\n      textrun.push(0x005D);\r\n      reconsume(c, cdata_section_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function character_reference_state(c) {\r\n    beginTempBuf();\r\n    tempbuf.push(0x0026);\r\n    switch(c) {\r\n    case 0x0009: // TAB\r\n    case 0x000A: // LINE FEED\r\n    case 0x000C: // FORM FEED\r\n    case 0x0020: // SPACE\r\n    case 0x003C: // LESS-THAN SIGN\r\n    case 0x0026: // AMPERSAND\r\n    case -1: // EOF\r\n      reconsume(c, character_reference_end_state);\r\n      break;\r\n    case 0x0023: // NUMBER SIGN\r\n      tempbuf.push(c);\r\n      tokenizer = numeric_character_reference_state;\r\n      break;\r\n    default:\r\n      reconsume(c, named_character_reference_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function named_character_reference_state(c) {\r\n    NAMEDCHARREF.lastIndex = nextchar; // w/ lookahead no char has been consumed\r\n    var matched = NAMEDCHARREF.exec(chars);\r\n    if (!matched) throw new Error(\"should never happen\");\r\n    var name = matched[1];\r\n    if (!name) {\r\n      // If no match can be made, switch to the character reference end state\r\n      tokenizer = character_reference_end_state;\r\n      return;\r\n    }\r\n\r\n    // Consume the matched characters and append them to temporary buffer\r\n    nextchar += name.length;\r\n    pushAll(tempbuf, str2buf(name));\r\n\r\n    switch(return_state) {\r\n    case attribute_value_double_quoted_state:\r\n    case attribute_value_single_quoted_state:\r\n    case attribute_value_unquoted_state:\r\n      // If the character reference was consumed as part of an attribute...\r\n      if (name[name.length-1] !== ';') { // ...and the last char is not ;\r\n        if (/[=A-Za-z0-9]/.test(chars[nextchar])) {\r\n          tokenizer = character_reference_end_state;\r\n          return;\r\n        }\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n    }\r\n\r\n    beginTempBuf();\r\n    var rv = namedCharRefs[name];\r\n    if (typeof rv === 'number') {\r\n      tempbuf.push(rv);\r\n    } else {\r\n      pushAll(tempbuf, rv);\r\n    }\r\n    tokenizer = character_reference_end_state;\r\n  }\r\n  // We might need to pause tokenization until we have enough characters\r\n  // in the buffer for longest possible character reference.\r\n  named_character_reference_state.lookahead = -NAMEDCHARREF_MAXLEN;\r\n\r\n  function numeric_character_reference_state(c) {\r\n    character_reference_code = 0;\r\n    switch(c) {\r\n    case 0x0078: // x\r\n    case 0x0058: // X\r\n      tempbuf.push(c);\r\n      tokenizer = hexadecimal_character_reference_start_state;\r\n      break;\r\n    default:\r\n      reconsume(c, decimal_character_reference_start_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function hexadecimal_character_reference_start_state(c) {\r\n    switch(c) {\r\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\r\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\r\n    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:\r\n    case 0x0046: // [A-F]\r\n    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:\r\n    case 0x0066: // [a-f]\r\n      reconsume(c, hexadecimal_character_reference_state);\r\n      break;\r\n    default:\r\n      reconsume(c, character_reference_end_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function decimal_character_reference_start_state(c) {\r\n    switch(c) {\r\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\r\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\r\n      reconsume(c, decimal_character_reference_state);\r\n      break;\r\n    default:\r\n      reconsume(c, character_reference_end_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function hexadecimal_character_reference_state(c) {\r\n    switch(c) {\r\n    case 0x0041: case 0x0042: case 0x0043: case 0x0044: case 0x0045:\r\n    case 0x0046: // [A-F]\r\n      character_reference_code *= 16;\r\n      character_reference_code += (c - 0x0037);\r\n      break;\r\n    case 0x0061: case 0x0062: case 0x0063: case 0x0064: case 0x0065:\r\n    case 0x0066: // [a-f]\r\n      character_reference_code *= 16;\r\n      character_reference_code += (c - 0x0057);\r\n      break;\r\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\r\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\r\n      character_reference_code *= 16;\r\n      character_reference_code += (c - 0x0030);\r\n      break;\r\n    case 0x003B: // SEMICOLON\r\n      tokenizer = numeric_character_reference_end_state;\r\n      break;\r\n    default:\r\n      reconsume(c, numeric_character_reference_end_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function decimal_character_reference_state(c) {\r\n    switch(c) {\r\n    case 0x0030: case 0x0031: case 0x0032: case 0x0033: case 0x0034:\r\n    case 0x0035: case 0x0036: case 0x0037: case 0x0038: case 0x0039: // [0-9]\r\n      character_reference_code *= 10;\r\n      character_reference_code += (c - 0x0030);\r\n      break;\r\n    case 0x003B: // SEMICOLON\r\n      tokenizer = numeric_character_reference_end_state;\r\n      break;\r\n    default:\r\n      reconsume(c, numeric_character_reference_end_state);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function numeric_character_reference_end_state(c) {\r\n    if (character_reference_code in numericCharRefReplacements) {\r\n      character_reference_code = numericCharRefReplacements[character_reference_code];\r\n    } else if (character_reference_code > 0x10FFFF || (character_reference_code >= 0xD800 && character_reference_code < 0xE000)) {\r\n      character_reference_code = 0xFFFD;\r\n    }\r\n\r\n    beginTempBuf();\r\n    if (character_reference_code <= 0xFFFF) {\r\n      tempbuf.push(character_reference_code);\r\n    } else {\r\n      character_reference_code = character_reference_code - 0x10000;\r\n      /* jshint bitwise: false */\r\n      tempbuf.push(0xD800 + (character_reference_code >> 10));\r\n      tempbuf.push(0xDC00 + (character_reference_code & 0x03FF));\r\n    }\r\n    reconsume(c, character_reference_end_state);\r\n  }\r\n\r\n  function character_reference_end_state(c) {\r\n    switch(return_state) {\r\n    case attribute_value_double_quoted_state:\r\n    case attribute_value_single_quoted_state:\r\n    case attribute_value_unquoted_state:\r\n      // append each character to the current attribute's value\r\n      attrvaluebuf += buf2str(tempbuf);\r\n      break;\r\n    default:\r\n      pushAll(textrun, tempbuf);\r\n      break;\r\n    }\r\n    reconsume(c, return_state);\r\n  }\r\n\r\n  /***\r\n   * The tree builder insertion modes\r\n   */\r\n\r\n  // 11.2.5.4.1 The \"initial\" insertion mode\r\n  function initial_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      value = value.replace(LEADINGWS, \"\"); // Ignore spaces\r\n      if (value.length === 0) return; // Are we done?\r\n      break; // Handle anything non-space text below\r\n    case 4: // COMMENT\r\n      doc._appendChild(doc.createComment(value));\r\n      return;\r\n    case 5: // DOCTYPE\r\n      var name = value;\r\n      var publicid = arg3;\r\n      var systemid = arg4;\r\n      // Use the constructor directly instead of\r\n      // implementation.createDocumentType because the create\r\n      // function throws errors on invalid characters, and\r\n      // we don't want the parser to throw them.\r\n      doc.appendChild(new DocumentType(doc, name, publicid, systemid));\r\n\r\n      // Note that there is no public API for setting quirks mode We can\r\n      // do this here because we have access to implementation details\r\n      if (force_quirks ||\r\n        name.toLowerCase() !== \"html\" ||\r\n        quirkyPublicIds.test(publicid) ||\r\n        (systemid && systemid.toLowerCase() === quirkySystemId) ||\r\n        (systemid === undefined &&\r\n         conditionallyQuirkyPublicIds.test(publicid)))\r\n        doc._quirks = true;\r\n      else if (limitedQuirkyPublicIds.test(publicid) ||\r\n           (systemid !== undefined &&\r\n            conditionallyQuirkyPublicIds.test(publicid)))\r\n        doc._limitedQuirks = true;\r\n      parser = before_html_mode;\r\n      return;\r\n    }\r\n\r\n    // tags or non-whitespace text\r\n    doc._quirks = true;\r\n    parser = before_html_mode;\r\n    parser(t,value,arg3,arg4);\r\n  }\r\n\r\n  // 11.2.5.4.2 The \"before html\" insertion mode\r\n  function before_html_mode(t,value,arg3,arg4) {\r\n    var elt;\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      value = value.replace(LEADINGWS, \"\"); // Ignore spaces\r\n      if (value.length === 0) return; // Are we done?\r\n      break; // Handle anything non-space text below\r\n    case 5: // DOCTYPE\r\n      /* ignore the token */\r\n      return;\r\n    case 4: // COMMENT\r\n      doc._appendChild(doc.createComment(value));\r\n      return;\r\n    case 2: // TAG\r\n      if (value === \"html\") {\r\n        elt = createHTMLElt(doc, value, arg3);\r\n        stack.push(elt);\r\n        doc.appendChild(elt);\r\n        // XXX: handle application cache here\r\n        parser = before_head_mode;\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"html\":\r\n      case \"head\":\r\n      case \"body\":\r\n      case \"br\":\r\n        break;  // fall through on these\r\n      default:\r\n        return; // ignore most end tags\r\n      }\r\n    }\r\n\r\n    // Anything that didn't get handled above is handled like this:\r\n    elt = createHTMLElt(doc, \"html\", null);\r\n    stack.push(elt);\r\n    doc.appendChild(elt);\r\n    // XXX: handle application cache here\r\n    parser = before_head_mode;\r\n    parser(t,value,arg3,arg4);\r\n  }\r\n\r\n  // 11.2.5.4.3 The \"before head\" insertion mode\r\n  function before_head_mode(t,value,arg3,arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      value = value.replace(LEADINGWS, \"\");  // Ignore spaces\r\n      if (value.length === 0) return; // Are we done?\r\n      break;  // Handle anything non-space text below\r\n    case 5: // DOCTYPE\r\n      /* ignore the token */\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t,value,arg3,arg4);\r\n        return;\r\n      case \"head\":\r\n        var elt = insertHTMLElement(value, arg3);\r\n        head_element_pointer = elt;\r\n        parser = in_head_mode;\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"html\":\r\n      case \"head\":\r\n      case \"body\":\r\n      case \"br\":\r\n        break;\r\n      default:\r\n        return; // ignore most end tags\r\n      }\r\n    }\r\n\r\n    // If not handled explicitly above\r\n    before_head_mode(TAG, \"head\", null); // create a head tag\r\n    parser(t, value, arg3, arg4); // then try again with this token\r\n  }\r\n\r\n  function in_head_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      var ws = value.match(LEADINGWS);\r\n      if (ws) {\r\n        insertText(ws[0]);\r\n        value = value.substring(ws[0].length);\r\n      }\r\n      if (value.length === 0) return;\r\n      break; // Handle non-whitespace below\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"meta\":\r\n        // XXX:\r\n        // May need to change the encoding based on this tag\r\n        /* falls through */\r\n      case \"base\":\r\n      case \"basefont\":\r\n      case \"bgsound\":\r\n      case \"link\":\r\n        insertHTMLElement(value, arg3);\r\n        stack.pop();\r\n        return;\r\n      case \"title\":\r\n        parseRCDATA(value, arg3);\r\n        return;\r\n      case \"noscript\":\r\n        if (!scripting_enabled) {\r\n          insertHTMLElement(value, arg3);\r\n          parser = in_head_noscript_mode;\r\n          return;\r\n        }\r\n        // Otherwise, if scripting is enabled...\r\n        /* falls through */\r\n      case \"noframes\":\r\n      case \"style\":\r\n        parseRawText(value,arg3);\r\n        return;\r\n      case \"script\":\r\n        insertElement(function(doc) {\r\n          var elt = createHTMLElt(doc, value, arg3);\r\n          elt._parser_inserted = true;\r\n          elt._force_async = false;\r\n          if (fragment) elt._already_started = true;\r\n          flushText();\r\n          return elt;\r\n        });\r\n        tokenizer = script_data_state;\r\n        originalInsertionMode = parser;\r\n        parser = text_mode;\r\n        return;\r\n      case \"template\":\r\n        insertHTMLElement(value, arg3);\r\n        afe.insertMarker();\r\n        frameset_ok = false;\r\n        parser = in_template_mode;\r\n        templateInsertionModes.push(parser);\r\n        return;\r\n      case \"head\":\r\n        return; // ignore it\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"head\":\r\n        stack.pop();\r\n        parser = after_head_mode;\r\n        return;\r\n      case \"body\":\r\n      case \"html\":\r\n      case \"br\":\r\n        break; // handle these at the bottom of the function\r\n      case \"template\":\r\n        if (!stack.contains(\"template\")) {\r\n          return;\r\n        }\r\n        stack.generateImpliedEndTags(null, \"thorough\");\r\n        stack.popTag(\"template\");\r\n        afe.clearToMarker();\r\n        templateInsertionModes.pop();\r\n        resetInsertionMode();\r\n        return;\r\n      default:\r\n        // ignore any other end tag\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // If not handled above\r\n    in_head_mode(ENDTAG, \"head\", null);   // synthetic </head>\r\n    parser(t, value, arg3, arg4);   // Then redo this one\r\n  }\r\n\r\n  // 13.2.5.4.5 The \"in head noscript\" insertion mode\r\n  function in_head_noscript_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 4: // COMMENT\r\n      in_head_mode(t, value);\r\n      return;\r\n    case 1: // TEXT\r\n      var ws = value.match(LEADINGWS);\r\n      if (ws) {\r\n        in_head_mode(t, ws[0]);\r\n        value = value.substring(ws[0].length);\r\n      }\r\n      if (value.length === 0) return; // no more text\r\n      break; // Handle non-whitespace below\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"basefont\":\r\n      case \"bgsound\":\r\n      case \"link\":\r\n      case \"meta\":\r\n      case \"noframes\":\r\n      case \"style\":\r\n        in_head_mode(t, value, arg3);\r\n        return;\r\n      case \"head\":\r\n      case \"noscript\":\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"noscript\":\r\n        stack.pop();\r\n        parser = in_head_mode;\r\n        return;\r\n      case \"br\":\r\n        break;  // goes to the outer default\r\n      default:\r\n        return; // ignore other end tags\r\n      }\r\n      break;\r\n    }\r\n\r\n    // If not handled above\r\n    in_head_noscript_mode(ENDTAG, \"noscript\", null);\r\n    parser(t, value, arg3, arg4);\r\n  }\r\n\r\n  function after_head_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      var ws = value.match(LEADINGWS);\r\n      if (ws) {\r\n        insertText(ws[0]);\r\n        value = value.substring(ws[0].length);\r\n      }\r\n      if (value.length === 0) return;\r\n      break; // Handle non-whitespace below\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"body\":\r\n        insertHTMLElement(value, arg3);\r\n        frameset_ok = false;\r\n        parser = in_body_mode;\r\n        return;\r\n      case \"frameset\":\r\n        insertHTMLElement(value, arg3);\r\n        parser = in_frameset_mode;\r\n        return;\r\n      case \"base\":\r\n      case \"basefont\":\r\n      case \"bgsound\":\r\n      case \"link\":\r\n      case \"meta\":\r\n      case \"noframes\":\r\n      case \"script\":\r\n      case \"style\":\r\n      case \"template\":\r\n      case \"title\":\r\n        stack.push(head_element_pointer);\r\n        in_head_mode(TAG, value, arg3);\r\n        stack.removeElement(head_element_pointer);\r\n        return;\r\n      case \"head\":\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"template\":\r\n        return in_head_mode(t, value, arg3, arg4);\r\n      case \"body\":\r\n      case \"html\":\r\n      case \"br\":\r\n        break;\r\n      default:\r\n        return;  // ignore any other end tag\r\n      }\r\n      break;\r\n    }\r\n\r\n    after_head_mode(TAG, \"body\", null);\r\n    frameset_ok = true;\r\n    parser(t, value, arg3, arg4);\r\n  }\r\n\r\n  // 13.2.5.4.7 The \"in body\" insertion mode\r\n  function in_body_mode(t,value,arg3,arg4) {\r\n    var body, i, node, elt;\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      if (textIncludesNUL) {\r\n        value = value.replace(NULCHARS, \"\");\r\n        if (value.length === 0) return;\r\n      }\r\n      // If any non-space characters\r\n      if (frameset_ok && NONWS.test(value))\r\n        frameset_ok = false;\r\n      afereconstruct();\r\n      insertText(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case -1: // EOF\r\n      if (templateInsertionModes.length) {\r\n        return in_template_mode(t);\r\n      }\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        if (stack.contains(\"template\")) {\r\n          return;\r\n        }\r\n        transferAttributes(arg3, stack.elements[0]);\r\n        return;\r\n      case \"base\":\r\n      case \"basefont\":\r\n      case \"bgsound\":\r\n      case \"link\":\r\n      case \"meta\":\r\n      case \"noframes\":\r\n      case \"script\":\r\n      case \"style\":\r\n      case \"template\":\r\n      case \"title\":\r\n        in_head_mode(TAG, value, arg3);\r\n        return;\r\n      case \"body\":\r\n        body = stack.elements[1];\r\n        if (!body || !(body instanceof impl.HTMLBodyElement) ||\r\n            stack.contains(\"template\"))\r\n          return;\r\n        frameset_ok = false;\r\n        transferAttributes(arg3, body);\r\n        return;\r\n      case \"frameset\":\r\n        if (!frameset_ok) return;\r\n        body = stack.elements[1];\r\n        if (!body || !(body instanceof impl.HTMLBodyElement))\r\n          return;\r\n        if (body.parentNode) body.parentNode.removeChild(body);\r\n        while(!(stack.top instanceof impl.HTMLHtmlElement))\r\n          stack.pop();\r\n        insertHTMLElement(value, arg3);\r\n        parser = in_frameset_mode;\r\n        return;\r\n\r\n      case \"address\":\r\n      case \"article\":\r\n      case \"aside\":\r\n      case \"blockquote\":\r\n      case \"center\":\r\n      case \"details\":\r\n      case \"dialog\":\r\n      case \"dir\":\r\n      case \"div\":\r\n      case \"dl\":\r\n      case \"fieldset\":\r\n      case \"figcaption\":\r\n      case \"figure\":\r\n      case \"footer\":\r\n      case \"header\":\r\n      case \"hgroup\":\r\n      case \"main\":\r\n      case \"nav\":\r\n      case \"ol\":\r\n      case \"p\":\r\n      case \"section\":\r\n      case \"summary\":\r\n      case \"ul\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"menu\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        if (isA(stack.top, 'menuitem')) {\r\n          stack.pop();\r\n        }\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"h1\":\r\n      case \"h2\":\r\n      case \"h3\":\r\n      case \"h4\":\r\n      case \"h5\":\r\n      case \"h6\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        if (stack.top instanceof impl.HTMLHeadingElement)\r\n          stack.pop();\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"pre\":\r\n      case \"listing\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        insertHTMLElement(value, arg3);\r\n        ignore_linefeed = true;\r\n        frameset_ok = false;\r\n        return;\r\n\r\n      case \"form\":\r\n        if (form_element_pointer && !stack.contains(\"template\")) return;\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        elt = insertHTMLElement(value, arg3);\r\n        if (!stack.contains(\"template\"))\r\n          form_element_pointer = elt;\r\n        return;\r\n\r\n      case \"li\":\r\n        frameset_ok = false;\r\n        for(i = stack.elements.length-1; i >= 0; i--) {\r\n          node = stack.elements[i];\r\n          if (node instanceof impl.HTMLLIElement) {\r\n            in_body_mode(ENDTAG, \"li\");\r\n            break;\r\n          }\r\n          if (isA(node, specialSet) && !isA(node, addressdivpSet))\r\n            break;\r\n        }\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"dd\":\r\n      case \"dt\":\r\n        frameset_ok = false;\r\n        for(i = stack.elements.length-1; i >= 0; i--) {\r\n          node = stack.elements[i];\r\n          if (isA(node, dddtSet)) {\r\n            in_body_mode(ENDTAG, node.localName);\r\n            break;\r\n          }\r\n          if (isA(node, specialSet) && !isA(node, addressdivpSet))\r\n            break;\r\n        }\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"plaintext\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        insertHTMLElement(value, arg3);\r\n        tokenizer = plaintext_state;\r\n        return;\r\n\r\n      case \"button\":\r\n        if (stack.inScope(\"button\")) {\r\n          in_body_mode(ENDTAG, \"button\");\r\n          parser(t, value, arg3, arg4);\r\n        }\r\n        else {\r\n          afereconstruct();\r\n          insertHTMLElement(value, arg3);\r\n          frameset_ok = false;\r\n        }\r\n        return;\r\n\r\n      case \"a\":\r\n        var activeElement = afe.findElementByTag(\"a\");\r\n        if (activeElement) {\r\n          in_body_mode(ENDTAG, value);\r\n          afe.remove(activeElement);\r\n          stack.removeElement(activeElement);\r\n        }\r\n        /* falls through */\r\n      case \"b\":\r\n      case \"big\":\r\n      case \"code\":\r\n      case \"em\":\r\n      case \"font\":\r\n      case \"i\":\r\n      case \"s\":\r\n      case \"small\":\r\n      case \"strike\":\r\n      case \"strong\":\r\n      case \"tt\":\r\n      case \"u\":\r\n        afereconstruct();\r\n        afe.push(insertHTMLElement(value,arg3), arg3);\r\n        return;\r\n\r\n      case \"nobr\":\r\n        afereconstruct();\r\n\r\n        if (stack.inScope(value)) {\r\n          in_body_mode(ENDTAG, value);\r\n          afereconstruct();\r\n        }\r\n        afe.push(insertHTMLElement(value,arg3), arg3);\r\n        return;\r\n\r\n      case \"applet\":\r\n      case \"marquee\":\r\n      case \"object\":\r\n        afereconstruct();\r\n        insertHTMLElement(value,arg3);\r\n        afe.insertMarker();\r\n        frameset_ok = false;\r\n        return;\r\n\r\n      case \"table\":\r\n        if (!doc._quirks && stack.inButtonScope(\"p\")) {\r\n          in_body_mode(ENDTAG, \"p\");\r\n        }\r\n        insertHTMLElement(value,arg3);\r\n        frameset_ok = false;\r\n        parser = in_table_mode;\r\n        return;\r\n\r\n      case \"area\":\r\n      case \"br\":\r\n      case \"embed\":\r\n      case \"img\":\r\n      case \"keygen\":\r\n      case \"wbr\":\r\n        afereconstruct();\r\n        insertHTMLElement(value,arg3);\r\n        stack.pop();\r\n        frameset_ok = false;\r\n        return;\r\n\r\n      case \"input\":\r\n        afereconstruct();\r\n        elt = insertHTMLElement(value,arg3);\r\n        stack.pop();\r\n        var type = elt.getAttribute(\"type\");\r\n        if (!type || type.toLowerCase() !== \"hidden\")\r\n          frameset_ok = false;\r\n        return;\r\n\r\n      case \"param\":\r\n      case \"source\":\r\n      case \"track\":\r\n        insertHTMLElement(value,arg3);\r\n        stack.pop();\r\n        return;\r\n\r\n      case \"hr\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        if (isA(stack.top, 'menuitem')) {\r\n          stack.pop();\r\n        }\r\n        insertHTMLElement(value,arg3);\r\n        stack.pop();\r\n        frameset_ok = false;\r\n        return;\r\n\r\n      case \"image\":\r\n        in_body_mode(TAG, \"img\", arg3, arg4);\r\n        return;\r\n\r\n      case \"textarea\":\r\n        insertHTMLElement(value,arg3);\r\n        ignore_linefeed = true;\r\n        frameset_ok = false;\r\n        tokenizer = rcdata_state;\r\n        originalInsertionMode = parser;\r\n        parser = text_mode;\r\n        return;\r\n\r\n      case \"xmp\":\r\n        if (stack.inButtonScope(\"p\")) in_body_mode(ENDTAG, \"p\");\r\n        afereconstruct();\r\n        frameset_ok = false;\r\n        parseRawText(value, arg3);\r\n        return;\r\n\r\n      case \"iframe\":\r\n        frameset_ok = false;\r\n        parseRawText(value, arg3);\r\n        return;\r\n\r\n      case \"noembed\":\r\n        parseRawText(value,arg3);\r\n        return;\r\n\r\n      case \"select\":\r\n        afereconstruct();\r\n        insertHTMLElement(value,arg3);\r\n        frameset_ok = false;\r\n        if (parser === in_table_mode ||\r\n          parser === in_caption_mode ||\r\n          parser === in_table_body_mode ||\r\n          parser === in_row_mode ||\r\n          parser === in_cell_mode)\r\n          parser = in_select_in_table_mode;\r\n        else\r\n          parser = in_select_mode;\r\n        return;\r\n\r\n      case \"optgroup\":\r\n      case \"option\":\r\n        if (stack.top instanceof impl.HTMLOptionElement) {\r\n          in_body_mode(ENDTAG, \"option\");\r\n        }\r\n        afereconstruct();\r\n        insertHTMLElement(value,arg3);\r\n        return;\r\n\r\n      case \"menuitem\":\r\n        if (isA(stack.top, 'menuitem')) {\r\n          stack.pop();\r\n        }\r\n        afereconstruct();\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n\r\n      case \"rb\":\r\n      case \"rtc\":\r\n        if (stack.inScope(\"ruby\")) {\r\n          stack.generateImpliedEndTags();\r\n        }\r\n        insertHTMLElement(value,arg3);\r\n        return;\r\n\r\n      case \"rp\":\r\n      case \"rt\":\r\n        if (stack.inScope(\"ruby\")) {\r\n          stack.generateImpliedEndTags(\"rtc\");\r\n        }\r\n        insertHTMLElement(value,arg3);\r\n        return;\r\n\r\n      case \"math\":\r\n        afereconstruct();\r\n        adjustMathMLAttributes(arg3);\r\n        adjustForeignAttributes(arg3);\r\n        insertForeignElement(value, arg3, NAMESPACE.MATHML);\r\n        if (arg4) // self-closing flag\r\n          stack.pop();\r\n        return;\r\n\r\n      case \"svg\":\r\n        afereconstruct();\r\n        adjustSVGAttributes(arg3);\r\n        adjustForeignAttributes(arg3);\r\n        insertForeignElement(value, arg3, NAMESPACE.SVG);\r\n        if (arg4) // self-closing flag\r\n          stack.pop();\r\n        return;\r\n\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"frame\":\r\n      case \"head\":\r\n      case \"tbody\":\r\n      case \"td\":\r\n      case \"tfoot\":\r\n      case \"th\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        // Ignore table tags if we're not in_table mode\r\n        return;\r\n      }\r\n\r\n      // Handle any other start tag here\r\n      // (and also noscript tags when scripting is disabled)\r\n      afereconstruct();\r\n      insertHTMLElement(value,arg3);\r\n      return;\r\n\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"template\":\r\n        in_head_mode(ENDTAG, value, arg3);\r\n        return;\r\n      case \"body\":\r\n        if (!stack.inScope(\"body\")) return;\r\n        parser = after_body_mode;\r\n        return;\r\n      case \"html\":\r\n        if (!stack.inScope(\"body\")) return;\r\n        parser = after_body_mode;\r\n        parser(t, value, arg3);\r\n        return;\r\n\r\n      case \"address\":\r\n      case \"article\":\r\n      case \"aside\":\r\n      case \"blockquote\":\r\n      case \"button\":\r\n      case \"center\":\r\n      case \"details\":\r\n      case \"dialog\":\r\n      case \"dir\":\r\n      case \"div\":\r\n      case \"dl\":\r\n      case \"fieldset\":\r\n      case \"figcaption\":\r\n      case \"figure\":\r\n      case \"footer\":\r\n      case \"header\":\r\n      case \"hgroup\":\r\n      case \"listing\":\r\n      case \"main\":\r\n      case \"menu\":\r\n      case \"nav\":\r\n      case \"ol\":\r\n      case \"pre\":\r\n      case \"section\":\r\n      case \"summary\":\r\n      case \"ul\":\r\n        // Ignore if there is not a matching open tag\r\n        if (!stack.inScope(value)) return;\r\n        stack.generateImpliedEndTags();\r\n        stack.popTag(value);\r\n        return;\r\n\r\n      case \"form\":\r\n        if (!stack.contains(\"template\")) {\r\n          var openform = form_element_pointer;\r\n          form_element_pointer = null;\r\n          if (!openform || !stack.elementInScope(openform)) return;\r\n          stack.generateImpliedEndTags();\r\n          stack.removeElement(openform);\r\n        } else {\r\n          if (!stack.inScope(\"form\")) return;\r\n          stack.generateImpliedEndTags();\r\n          stack.popTag(\"form\");\r\n        }\r\n        return;\r\n\r\n      case \"p\":\r\n        if (!stack.inButtonScope(value)) {\r\n          in_body_mode(TAG, value, null);\r\n          parser(t, value, arg3, arg4);\r\n        }\r\n        else {\r\n          stack.generateImpliedEndTags(value);\r\n          stack.popTag(value);\r\n        }\r\n        return;\r\n\r\n      case \"li\":\r\n        if (!stack.inListItemScope(value)) return;\r\n        stack.generateImpliedEndTags(value);\r\n        stack.popTag(value);\r\n        return;\r\n\r\n      case \"dd\":\r\n      case \"dt\":\r\n        if (!stack.inScope(value)) return;\r\n        stack.generateImpliedEndTags(value);\r\n        stack.popTag(value);\r\n        return;\r\n\r\n      case \"h1\":\r\n      case \"h2\":\r\n      case \"h3\":\r\n      case \"h4\":\r\n      case \"h5\":\r\n      case \"h6\":\r\n        if (!stack.elementTypeInScope(impl.HTMLHeadingElement)) return;\r\n        stack.generateImpliedEndTags();\r\n        stack.popElementType(impl.HTMLHeadingElement);\r\n        return;\r\n\r\n      case \"sarcasm\":\r\n        // Take a deep breath, and then:\r\n        break;\r\n\r\n      case \"a\":\r\n      case \"b\":\r\n      case \"big\":\r\n      case \"code\":\r\n      case \"em\":\r\n      case \"font\":\r\n      case \"i\":\r\n      case \"nobr\":\r\n      case \"s\":\r\n      case \"small\":\r\n      case \"strike\":\r\n      case \"strong\":\r\n      case \"tt\":\r\n      case \"u\":\r\n        var result = adoptionAgency(value);\r\n        if (result) return;  // If we did something we're done\r\n        break;         // Go to the \"any other end tag\" case\r\n\r\n      case \"applet\":\r\n      case \"marquee\":\r\n      case \"object\":\r\n        if (!stack.inScope(value)) return;\r\n        stack.generateImpliedEndTags();\r\n        stack.popTag(value);\r\n        afe.clearToMarker();\r\n        return;\r\n\r\n      case \"br\":\r\n        in_body_mode(TAG, value, null);  // Turn </br> into <br>\r\n        return;\r\n      }\r\n\r\n      // Any other end tag goes here\r\n      for(i = stack.elements.length-1; i >= 0; i--) {\r\n        node = stack.elements[i];\r\n        if (isA(node, value)) {\r\n          stack.generateImpliedEndTags(value);\r\n          stack.popElement(node);\r\n          break;\r\n        }\r\n        else if (isA(node, specialSet)) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  function text_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      insertText(value);\r\n      return;\r\n    case -1: // EOF\r\n      if (stack.top instanceof impl.HTMLScriptElement)\r\n        stack.top._already_started = true;\r\n      stack.pop();\r\n      parser = originalInsertionMode;\r\n      parser(t);\r\n      return;\r\n    case 3: // ENDTAG\r\n      if (value === \"script\") {\r\n        handleScriptEnd();\r\n      }\r\n      else {\r\n        stack.pop();\r\n        parser = originalInsertionMode;\r\n      }\r\n      return;\r\n    default:\r\n      // We should never get any other token types\r\n      return;\r\n    }\r\n  }\r\n\r\n  function in_table_mode(t, value, arg3, arg4) {\r\n    function getTypeAttr(attrs) {\r\n      for(var i = 0, n = attrs.length; i < n; i++) {\r\n        if (attrs[i][0] === \"type\")\r\n          return attrs[i][1].toLowerCase();\r\n      }\r\n      return null;\r\n    }\r\n\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // XXX the text_integration_mode stuff is\r\n      // just a hack I made up\r\n      if (text_integration_mode) {\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      else if (isA(stack.top, tablesectionrowSet)) {\r\n        pending_table_text = [];\r\n        originalInsertionMode = parser;\r\n        parser = in_table_text_mode;\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"caption\":\r\n        stack.clearToContext(tableContextSet);\r\n        afe.insertMarker();\r\n        insertHTMLElement(value,arg3);\r\n        parser = in_caption_mode;\r\n        return;\r\n      case \"colgroup\":\r\n        stack.clearToContext(tableContextSet);\r\n        insertHTMLElement(value,arg3);\r\n        parser = in_column_group_mode;\r\n        return;\r\n      case \"col\":\r\n        in_table_mode(TAG, \"colgroup\", null);\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n        stack.clearToContext(tableContextSet);\r\n        insertHTMLElement(value,arg3);\r\n        parser = in_table_body_mode;\r\n        return;\r\n      case \"td\":\r\n      case \"th\":\r\n      case \"tr\":\r\n        in_table_mode(TAG, \"tbody\", null);\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n\r\n      case \"table\":\r\n        if (!stack.inTableScope(value)) {\r\n          return; // Ignore the token\r\n        }\r\n        in_table_mode(ENDTAG, value);\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n\r\n      case \"style\":\r\n      case \"script\":\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n\r\n      case \"input\":\r\n        var type = getTypeAttr(arg3);\r\n        if (type !== \"hidden\") break;  // to the anything else case\r\n        insertHTMLElement(value,arg3);\r\n        stack.pop();\r\n        return;\r\n\r\n      case \"form\":\r\n        if (form_element_pointer || stack.contains(\"template\")) return;\r\n        form_element_pointer = insertHTMLElement(value, arg3);\r\n        stack.popElement(form_element_pointer);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"table\":\r\n        if (!stack.inTableScope(value)) return;\r\n        stack.popTag(value);\r\n        resetInsertionMode();\r\n        return;\r\n      case \"body\":\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"html\":\r\n      case \"tbody\":\r\n      case \"td\":\r\n      case \"tfoot\":\r\n      case \"th\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        return;\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n\r\n      break;\r\n    case -1: // EOF\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    }\r\n\r\n    // This is the anything else case\r\n    foster_parent_mode = true;\r\n    in_body_mode(t, value, arg3, arg4);\r\n    foster_parent_mode = false;\r\n  }\r\n\r\n  function in_table_text_mode(t, value, arg3, arg4) {\r\n    if (t === TEXT) {\r\n      if (textIncludesNUL) {\r\n        value = value.replace(NULCHARS, \"\");\r\n        if (value.length === 0) return;\r\n      }\r\n      pending_table_text.push(value);\r\n    }\r\n    else {\r\n      var s = pending_table_text.join(\"\");\r\n      pending_table_text.length = 0;\r\n      if (NONWS.test(s)) { // If any non-whitespace characters\r\n        // This must be the same code as the \"anything else\"\r\n        // case of the in_table mode above.\r\n        foster_parent_mode = true;\r\n        in_body_mode(TEXT, s);\r\n        foster_parent_mode = false;\r\n      }\r\n      else {\r\n        insertText(s);\r\n      }\r\n      parser = originalInsertionMode;\r\n      parser(t, value, arg3, arg4);\r\n    }\r\n  }\r\n\r\n\r\n  function in_caption_mode(t, value, arg3, arg4) {\r\n    function end_caption() {\r\n      if (!stack.inTableScope(\"caption\")) return false;\r\n      stack.generateImpliedEndTags();\r\n      stack.popTag(\"caption\");\r\n      afe.clearToMarker();\r\n      parser = in_table_mode;\r\n      return true;\r\n    }\r\n\r\n    switch(t) {\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"tbody\":\r\n      case \"td\":\r\n      case \"tfoot\":\r\n      case \"th\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        if (end_caption()) parser(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"caption\":\r\n        end_caption();\r\n        return;\r\n      case \"table\":\r\n        if (end_caption()) parser(t, value, arg3, arg4);\r\n        return;\r\n      case \"body\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"html\":\r\n      case \"tbody\":\r\n      case \"td\":\r\n      case \"tfoot\":\r\n      case \"th\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // The Anything Else case\r\n    in_body_mode(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_column_group_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      var ws = value.match(LEADINGWS);\r\n      if (ws) {\r\n        insertText(ws[0]);\r\n        value = value.substring(ws[0].length);\r\n      }\r\n      if (value.length === 0) return;\r\n      break; // Handle non-whitespace below\r\n\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"col\":\r\n        insertHTMLElement(value, arg3);\r\n        stack.pop();\r\n        return;\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"colgroup\":\r\n        if (!isA(stack.top, 'colgroup')) {\r\n          return; // Ignore the token.\r\n        }\r\n        stack.pop();\r\n        parser = in_table_mode;\r\n        return;\r\n      case \"col\":\r\n        return;\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case -1: // EOF\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    }\r\n\r\n    // Anything else\r\n    if (!isA(stack.top, 'colgroup')) {\r\n      return; // Ignore the token.\r\n    }\r\n    in_column_group_mode(ENDTAG, \"colgroup\");\r\n    parser(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_table_body_mode(t, value, arg3, arg4) {\r\n    function endsect() {\r\n      if (!stack.inTableScope(\"tbody\") &&\r\n        !stack.inTableScope(\"thead\") &&\r\n        !stack.inTableScope(\"tfoot\"))\r\n        return;\r\n      stack.clearToContext(tableBodyContextSet);\r\n      in_table_body_mode(ENDTAG, stack.top.localName, null);\r\n      parser(t, value, arg3, arg4);\r\n    }\r\n\r\n    switch(t) {\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"tr\":\r\n        stack.clearToContext(tableBodyContextSet);\r\n        insertHTMLElement(value, arg3);\r\n        parser = in_row_mode;\r\n        return;\r\n      case \"th\":\r\n      case \"td\":\r\n        in_table_body_mode(TAG, \"tr\", null);\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n        endsect();\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"table\":\r\n        endsect();\r\n        return;\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n        if (stack.inTableScope(value)) {\r\n          stack.clearToContext(tableBodyContextSet);\r\n          stack.pop();\r\n          parser = in_table_mode;\r\n        }\r\n        return;\r\n      case \"body\":\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"html\":\r\n      case \"td\":\r\n      case \"th\":\r\n      case \"tr\":\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // Anything else:\r\n    in_table_mode(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_row_mode(t, value, arg3, arg4) {\r\n    function endrow() {\r\n      if (!stack.inTableScope(\"tr\")) return false;\r\n      stack.clearToContext(tableRowContextSet);\r\n      stack.pop();\r\n      parser = in_table_body_mode;\r\n      return true;\r\n    }\r\n\r\n    switch(t) {\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"th\":\r\n      case \"td\":\r\n        stack.clearToContext(tableRowContextSet);\r\n        insertHTMLElement(value, arg3);\r\n        parser = in_cell_mode;\r\n        afe.insertMarker();\r\n        return;\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        if (endrow()) parser(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"tr\":\r\n        endrow();\r\n        return;\r\n      case \"table\":\r\n        if (endrow()) parser(t, value, arg3, arg4);\r\n        return;\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n        if (stack.inTableScope(value)) {\r\n          if (endrow()) parser(t, value, arg3, arg4);\r\n        }\r\n        return;\r\n      case \"body\":\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"html\":\r\n      case \"td\":\r\n      case \"th\":\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // anything else\r\n    in_table_mode(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_cell_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"tbody\":\r\n      case \"td\":\r\n      case \"tfoot\":\r\n      case \"th\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        if (stack.inTableScope(\"td\")) {\r\n          in_cell_mode(ENDTAG, \"td\");\r\n          parser(t, value, arg3, arg4);\r\n        }\r\n        else if (stack.inTableScope(\"th\")) {\r\n          in_cell_mode(ENDTAG, \"th\");\r\n          parser(t, value, arg3, arg4);\r\n        }\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"td\":\r\n      case \"th\":\r\n        if (!stack.inTableScope(value)) return;\r\n        stack.generateImpliedEndTags();\r\n        stack.popTag(value);\r\n        afe.clearToMarker();\r\n        parser = in_row_mode;\r\n        return;\r\n\r\n      case \"body\":\r\n      case \"caption\":\r\n      case \"col\":\r\n      case \"colgroup\":\r\n      case \"html\":\r\n        return;\r\n\r\n      case \"table\":\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n      case \"tr\":\r\n        if (!stack.inTableScope(value)) return;\r\n        in_cell_mode(ENDTAG, stack.inTableScope(\"td\") ? \"td\" : \"th\");\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // anything else\r\n    in_body_mode(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_select_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      if (textIncludesNUL) {\r\n        value = value.replace(NULCHARS, \"\");\r\n        if (value.length === 0) return;\r\n      }\r\n      insertText(value);\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case -1: // EOF\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"option\":\r\n        if (stack.top instanceof impl.HTMLOptionElement)\r\n          in_select_mode(ENDTAG, value);\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n      case \"optgroup\":\r\n        if (stack.top instanceof impl.HTMLOptionElement)\r\n          in_select_mode(ENDTAG, \"option\");\r\n        if (stack.top instanceof impl.HTMLOptGroupElement)\r\n          in_select_mode(ENDTAG, value);\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n      case \"select\":\r\n        in_select_mode(ENDTAG, value); // treat it as a close tag\r\n        return;\r\n\r\n      case \"input\":\r\n      case \"keygen\":\r\n      case \"textarea\":\r\n        if (!stack.inSelectScope(\"select\")) return;\r\n        in_select_mode(ENDTAG, \"select\");\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n\r\n      case \"script\":\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"optgroup\":\r\n        if (stack.top instanceof impl.HTMLOptionElement &&\r\n          stack.elements[stack.elements.length-2] instanceof\r\n          impl.HTMLOptGroupElement) {\r\n          in_select_mode(ENDTAG, \"option\");\r\n        }\r\n        if (stack.top instanceof impl.HTMLOptGroupElement)\r\n          stack.pop();\r\n\r\n        return;\r\n\r\n      case \"option\":\r\n        if (stack.top instanceof impl.HTMLOptionElement)\r\n          stack.pop();\r\n        return;\r\n\r\n      case \"select\":\r\n        if (!stack.inSelectScope(value)) return;\r\n        stack.popTag(value);\r\n        resetInsertionMode();\r\n        return;\r\n\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    // anything else: just ignore the token\r\n  }\r\n\r\n  function in_select_in_table_mode(t, value, arg3, arg4) {\r\n    switch(value) {\r\n    case \"caption\":\r\n    case \"table\":\r\n    case \"tbody\":\r\n    case \"tfoot\":\r\n    case \"thead\":\r\n    case \"tr\":\r\n    case \"td\":\r\n    case \"th\":\r\n      switch(t) {\r\n      case 2: // TAG\r\n        in_select_in_table_mode(ENDTAG, \"select\");\r\n        parser(t, value, arg3, arg4);\r\n        return;\r\n      case 3: // ENDTAG\r\n        if (stack.inTableScope(value)) {\r\n          in_select_in_table_mode(ENDTAG, \"select\");\r\n          parser(t, value, arg3, arg4);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    // anything else\r\n    in_select_mode(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_template_mode(t, value, arg3, arg4) {\r\n    function switchModeAndReprocess(mode) {\r\n      parser = mode;\r\n      templateInsertionModes[templateInsertionModes.length-1] = parser;\r\n      parser(t, value, arg3, arg4);\r\n    }\r\n    switch(t) {\r\n    case 1: // TEXT\r\n    case 4: // COMMENT\r\n    case 5: // DOCTYPE\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case -1: // EOF\r\n      if (!stack.contains(\"template\")) {\r\n        stopParsing();\r\n      } else {\r\n        stack.popTag(\"template\");\r\n        afe.clearToMarker();\r\n        templateInsertionModes.pop();\r\n        resetInsertionMode();\r\n        parser(t, value, arg3, arg4);\r\n      }\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"base\":\r\n      case \"basefont\":\r\n      case \"bgsound\":\r\n      case \"link\":\r\n      case \"meta\":\r\n      case \"noframes\":\r\n      case \"script\":\r\n      case \"style\":\r\n      case \"template\":\r\n      case \"title\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"caption\":\r\n      case \"colgroup\":\r\n      case \"tbody\":\r\n      case \"tfoot\":\r\n      case \"thead\":\r\n        switchModeAndReprocess(in_table_mode);\r\n        return;\r\n      case \"col\":\r\n        switchModeAndReprocess(in_column_group_mode);\r\n        return;\r\n      case \"tr\":\r\n        switchModeAndReprocess(in_table_body_mode);\r\n        return;\r\n      case \"td\":\r\n      case \"th\":\r\n        switchModeAndReprocess(in_row_mode);\r\n        return;\r\n      }\r\n      switchModeAndReprocess(in_body_mode);\r\n      return;\r\n    case 3: // ENDTAG\r\n      switch(value) {\r\n      case \"template\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      default:\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  function after_body_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // If any non-space chars, handle below\r\n      if (NONWS.test(value)) break;\r\n      in_body_mode(t, value);\r\n      return;\r\n    case 4: // COMMENT\r\n      // Append it to the <html> element\r\n      stack.elements[0]._appendChild(doc.createComment(value));\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case -1: // EOF\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      if (value === \"html\") {\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break; // for any other tags\r\n    case 3: // ENDTAG\r\n      if (value === \"html\") {\r\n        if (fragment) return;\r\n        parser = after_after_body_mode;\r\n        return;\r\n      }\r\n      break; // for any other tags\r\n    }\r\n\r\n    // anything else\r\n    parser = in_body_mode;\r\n    parser(t, value, arg3, arg4);\r\n  }\r\n\r\n  function in_frameset_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // Ignore any non-space characters\r\n      value = value.replace(ALLNONWS, \"\");\r\n      if (value.length > 0) insertText(value);\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case -1: // EOF\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"frameset\":\r\n        insertHTMLElement(value, arg3);\r\n        return;\r\n      case \"frame\":\r\n        insertHTMLElement(value, arg3);\r\n        stack.pop();\r\n        return;\r\n      case \"noframes\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      if (value === \"frameset\") {\r\n        if (fragment && stack.top instanceof impl.HTMLHtmlElement)\r\n          return;\r\n        stack.pop();\r\n        if (!fragment &&\r\n          !(stack.top instanceof impl.HTMLFrameSetElement))\r\n          parser = after_frameset_mode;\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // ignore anything else\r\n  }\r\n\r\n  function after_frameset_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // Ignore any non-space characters\r\n      value = value.replace(ALLNONWS, \"\");\r\n      if (value.length > 0) insertText(value);\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      return;\r\n    case -1: // EOF\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"noframes\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    case 3: // ENDTAG\r\n      if (value === \"html\") {\r\n        parser = after_after_frameset_mode;\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // ignore anything else\r\n  }\r\n\r\n  function after_after_body_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // If any non-space chars, handle below\r\n      if (NONWS.test(value)) break;\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case 4: // COMMENT\r\n      doc._appendChild(doc.createComment(value));\r\n      return;\r\n    case 5: // DOCTYPE\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case -1: // EOF\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      if (value === \"html\") {\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // anything else\r\n    parser = in_body_mode;\r\n    parser(t, value, arg3, arg4);\r\n  }\r\n\r\n  function after_after_frameset_mode(t, value, arg3, arg4) {\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // Ignore any non-space characters\r\n      value = value.replace(ALLNONWS, \"\");\r\n      if (value.length > 0)\r\n        in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case 4: // COMMENT\r\n      doc._appendChild(doc.createComment(value));\r\n      return;\r\n    case 5: // DOCTYPE\r\n      in_body_mode(t, value, arg3, arg4);\r\n      return;\r\n    case -1: // EOF\r\n      stopParsing();\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"html\":\r\n        in_body_mode(t, value, arg3, arg4);\r\n        return;\r\n      case \"noframes\":\r\n        in_head_mode(t, value, arg3, arg4);\r\n        return;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // ignore anything else\r\n  }\r\n\r\n\r\n  // 13.2.5.5 The rules for parsing tokens in foreign content\r\n  //\r\n  // This is like one of the insertion modes above, but is\r\n  // invoked somewhat differently when the current token is not HTML.\r\n  // See the insertToken() function.\r\n  function insertForeignToken(t, value, arg3, arg4) {\r\n    // A <font> tag is an HTML font tag if it has a color, font, or size\r\n    // attribute.  Otherwise we assume it is foreign content\r\n    function isHTMLFont(attrs) {\r\n      for(var i = 0, n = attrs.length; i < n; i++) {\r\n        switch(attrs[i][0]) {\r\n        case \"color\":\r\n        case \"face\":\r\n        case \"size\":\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    var current;\r\n\r\n    switch(t) {\r\n    case 1: // TEXT\r\n      // If any non-space, non-nul characters\r\n      if (frameset_ok && NONWSNONNUL.test(value))\r\n        frameset_ok = false;\r\n      if (textIncludesNUL) {\r\n        value = value.replace(NULCHARS, \"\\uFFFD\");\r\n      }\r\n      insertText(value);\r\n      return;\r\n    case 4: // COMMENT\r\n      insertComment(value);\r\n      return;\r\n    case 5: // DOCTYPE\r\n      // ignore it\r\n      return;\r\n    case 2: // TAG\r\n      switch(value) {\r\n      case \"font\":\r\n        if (!isHTMLFont(arg3)) break;\r\n        /* falls through */\r\n      case \"b\":\r\n      case \"big\":\r\n      case \"blockquote\":\r\n      case \"body\":\r\n      case \"br\":\r\n      case \"center\":\r\n      case \"code\":\r\n      case \"dd\":\r\n      case \"div\":\r\n      case \"dl\":\r\n      case \"dt\":\r\n      case \"em\":\r\n      case \"embed\":\r\n      case \"h1\":\r\n      case \"h2\":\r\n      case \"h3\":\r\n      case \"h4\":\r\n      case \"h5\":\r\n      case \"h6\":\r\n      case \"head\":\r\n      case \"hr\":\r\n      case \"i\":\r\n      case \"img\":\r\n      case \"li\":\r\n      case \"listing\":\r\n      case \"menu\":\r\n      case \"meta\":\r\n      case \"nobr\":\r\n      case \"ol\":\r\n      case \"p\":\r\n      case \"pre\":\r\n      case \"ruby\":\r\n      case \"s\":\r\n      case \"small\":\r\n      case \"span\":\r\n      case \"strong\":\r\n      case \"strike\":\r\n      case \"sub\":\r\n      case \"sup\":\r\n      case \"table\":\r\n      case \"tt\":\r\n      case \"u\":\r\n      case \"ul\":\r\n      case \"var\":\r\n        if (fragment) {\r\n          break;\r\n        }\r\n        do {\r\n          stack.pop();\r\n          current = stack.top;\r\n        } while(current.namespaceURI !== NAMESPACE.HTML &&\r\n            !isMathmlTextIntegrationPoint(current) &&\r\n            !isHTMLIntegrationPoint(current));\r\n\r\n        insertToken(t, value, arg3, arg4);  // reprocess\r\n        return;\r\n      }\r\n\r\n      // Any other start tag case goes here\r\n      current = (stack.elements.length===1 && fragment) ? fragmentContext :\r\n        stack.top;\r\n      if (current.namespaceURI === NAMESPACE.MATHML) {\r\n        adjustMathMLAttributes(arg3);\r\n      }\r\n      else if (current.namespaceURI === NAMESPACE.SVG) {\r\n        value = adjustSVGTagName(value);\r\n        adjustSVGAttributes(arg3);\r\n      }\r\n      adjustForeignAttributes(arg3);\r\n\r\n      insertForeignElement(value, arg3, current.namespaceURI);\r\n      if (arg4) { // the self-closing flag\r\n        if (value === 'script' && current.namespaceURI === NAMESPACE.SVG) {\r\n          // XXX deal with SVG scripts here\r\n        }\r\n        stack.pop();\r\n      }\r\n      return;\r\n\r\n    case 3: // ENDTAG\r\n      current = stack.top;\r\n      if (value === \"script\" &&\r\n        current.namespaceURI === NAMESPACE.SVG &&\r\n        current.localName === \"script\") {\r\n\r\n        stack.pop();\r\n\r\n        // XXX\r\n        // Deal with SVG scripts here\r\n      }\r\n      else {\r\n        // The any other end tag case\r\n        var i = stack.elements.length-1;\r\n        var node = stack.elements[i];\r\n        for(;;) {\r\n          if (node.localName.toLowerCase() === value) {\r\n            stack.popElement(node);\r\n            break;\r\n          }\r\n          node = stack.elements[--i];\r\n          // If non-html, keep looping\r\n          if (node.namespaceURI !== NAMESPACE.HTML)\r\n            continue;\r\n          // Otherwise process the end tag as html\r\n          parser(t, value, arg3, arg4);\r\n          break;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  /***\r\n   * Finally, this is the end of the HTMLParser() factory function.\r\n   * It returns the htmlparser object with the append() and end() methods.\r\n   */\r\n\r\n  // Sneak another method into the htmlparser object to allow us to run\r\n  // tokenizer tests.  This can be commented out in production code.\r\n  // This is a hook for testing the tokenizer. It has to be here\r\n  // because the tokenizer details are all hidden away within the closure.\r\n  // It should return an array of tokens generated while parsing the\r\n  // input string.\r\n  htmlparser.testTokenizer = function(input, initialState, lastStartTag, charbychar) {\r\n    var tokens = [];\r\n\r\n    switch(initialState) {\r\n    case \"PCDATA state\":\r\n      tokenizer = data_state;\r\n      break;\r\n    case \"RCDATA state\":\r\n      tokenizer = rcdata_state;\r\n      break;\r\n    case \"RAWTEXT state\":\r\n      tokenizer = rawtext_state;\r\n      break;\r\n    case \"PLAINTEXT state\":\r\n      tokenizer = plaintext_state;\r\n      break;\r\n    }\r\n\r\n    if (lastStartTag) {\r\n      lasttagname = lastStartTag;\r\n    }\r\n\r\n    insertToken = function(t, value, arg3, arg4) {\r\n      flushText();\r\n      switch(t) {\r\n      case 1: // TEXT\r\n        if (tokens.length > 0 &&\r\n          tokens[tokens.length-1][0] === \"Character\") {\r\n          tokens[tokens.length-1][1] += value;\r\n        }\r\n        else tokens.push([\"Character\", value]);\r\n        break;\r\n      case 4: // COMMENT\r\n        tokens.push([\"Comment\", value]);\r\n        break;\r\n      case 5: // DOCTYPE\r\n        tokens.push([\"DOCTYPE\", value,\r\n               arg3 === undefined ? null : arg3,\r\n               arg4 === undefined ? null : arg4,\r\n               !force_quirks]);\r\n        break;\r\n      case 2: // TAG\r\n        var attrs = Object.create(null);\r\n        for(var i = 0; i < arg3.length; i++) {\r\n          // XXX: does attribute order matter?\r\n          var a = arg3[i];\r\n          if (a.length === 1) {\r\n            attrs[a[0]] = \"\";\r\n          }\r\n          else {\r\n            attrs[a[0]] = a[1];\r\n          }\r\n        }\r\n        var token = [\"StartTag\", value, attrs];\r\n        if (arg4) token.push(true);\r\n        tokens.push(token);\r\n        break;\r\n      case 3: // ENDTAG\r\n        tokens.push([\"EndTag\", value]);\r\n        break;\r\n      case -1: // EOF\r\n        break;\r\n      }\r\n    };\r\n\r\n    if (!charbychar) {\r\n      this.parse(input, true);\r\n    }\r\n    else {\r\n      for(var i = 0; i < input.length; i++) {\r\n        this.parse(input[i]);\r\n      }\r\n      this.parse(\"\", true);\r\n    }\r\n    return tokens;\r\n  };\r\n\r\n  // Return the parser object from the HTMLParser() factory function\r\n  return htmlparser;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/HTMLParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Leaf.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Leaf.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Leaf;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeList = __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar HierarchyRequestError = utils.HierarchyRequestError;\r\nvar NotFoundError = utils.NotFoundError;\r\n\r\n// This class defines common functionality for node subtypes that\r\n// can never have children\r\nfunction Leaf() {\r\n  Node.call(this);\r\n}\r\n\r\nLeaf.prototype = Object.create(Node.prototype, {\r\n  hasChildNodes: { value: function() { return false; }},\r\n  firstChild: { value: null },\r\n  lastChild: { value: null },\r\n  insertBefore: { value: function(node, child) {\r\n    if (!node.nodeType) throw new TypeError('not a node');\r\n    HierarchyRequestError();\r\n  }},\r\n  replaceChild: { value: function(node, child) {\r\n    if (!node.nodeType) throw new TypeError('not a node');\r\n    HierarchyRequestError();\r\n  }},\r\n  removeChild: { value: function(node) {\r\n    if (!node.nodeType) throw new TypeError('not a node');\r\n    NotFoundError();\r\n  }},\r\n  removeChildren: { value: function() { /* no op */ }},\r\n  childNodes: { get: function() {\r\n    if (!this._childNodes) this._childNodes = new NodeList();\r\n    return this._childNodes;\r\n  }}\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9MZWFmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixlQUFlLG1CQUFPLENBQUMsMkVBQVk7QUFDbkMsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQixnQkFBZ0I7QUFDdkQsZ0JBQWdCLGFBQWE7QUFDN0IsZUFBZSxhQUFhO0FBQzVCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsSUFBSTtBQUNKLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsSUFBSTtBQUNKLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsSUFBSTtBQUNKLG9CQUFvQixvQkFBb0IsY0FBYztBQUN0RCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL0xlYWYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gTGVhZjtcclxuXHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcbnZhciBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QnKTtcclxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG52YXIgSGllcmFyY2h5UmVxdWVzdEVycm9yID0gdXRpbHMuSGllcmFyY2h5UmVxdWVzdEVycm9yO1xyXG52YXIgTm90Rm91bmRFcnJvciA9IHV0aWxzLk5vdEZvdW5kRXJyb3I7XHJcblxyXG4vLyBUaGlzIGNsYXNzIGRlZmluZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIG5vZGUgc3VidHlwZXMgdGhhdFxyXG4vLyBjYW4gbmV2ZXIgaGF2ZSBjaGlsZHJlblxyXG5mdW5jdGlvbiBMZWFmKCkge1xyXG4gIE5vZGUuY2FsbCh0aGlzKTtcclxufVxyXG5cclxuTGVhZi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlLCB7XHJcbiAgaGFzQ2hpbGROb2RlczogeyB2YWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfX0sXHJcbiAgZmlyc3RDaGlsZDogeyB2YWx1ZTogbnVsbCB9LFxyXG4gIGxhc3RDaGlsZDogeyB2YWx1ZTogbnVsbCB9LFxyXG4gIGluc2VydEJlZm9yZTogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSwgY2hpbGQpIHtcclxuICAgIGlmICghbm9kZS5ub2RlVHlwZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgbm9kZScpO1xyXG4gICAgSGllcmFyY2h5UmVxdWVzdEVycm9yKCk7XHJcbiAgfX0sXHJcbiAgcmVwbGFjZUNoaWxkOiB7IHZhbHVlOiBmdW5jdGlvbihub2RlLCBjaGlsZCkge1xyXG4gICAgaWYgKCFub2RlLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XHJcbiAgICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3IoKTtcclxuICB9fSxcclxuICByZW1vdmVDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgaWYgKCFub2RlLm5vZGVUeXBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBub2RlJyk7XHJcbiAgICBOb3RGb3VuZEVycm9yKCk7XHJcbiAgfX0sXHJcbiAgcmVtb3ZlQ2hpbGRyZW46IHsgdmFsdWU6IGZ1bmN0aW9uKCkgeyAvKiBubyBvcCAqLyB9fSxcclxuICBjaGlsZE5vZGVzOiB7IGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMuX2NoaWxkTm9kZXMpIHRoaXMuX2NoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcclxuICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzO1xyXG4gIH19XHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Leaf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/LinkedList.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/LinkedList.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nvar LinkedList = module.exports = {\r\n    // basic validity tests on a circular linked list a\r\n    valid: function(a) {\r\n        utils.assert(a, \"list falsy\");\r\n        utils.assert(a._previousSibling, \"previous falsy\");\r\n        utils.assert(a._nextSibling, \"next falsy\");\r\n        // xxx check that list is actually circular\r\n        return true;\r\n    },\r\n    // insert a before b\r\n    insertBefore: function(a, b) {\r\n        utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\r\n        var a_first = a, a_last = a._previousSibling;\r\n        var b_first = b, b_last = b._previousSibling;\r\n        a_first._previousSibling = b_last;\r\n        a_last._nextSibling = b_first;\r\n        b_last._nextSibling = a_first;\r\n        b_first._previousSibling = a_last;\r\n        utils.assert(LinkedList.valid(a) && LinkedList.valid(b));\r\n    },\r\n    // replace a single node a with a list b (which could be null)\r\n    replace: function(a, b) {\r\n        utils.assert(LinkedList.valid(a) && (b===null || LinkedList.valid(b)));\r\n        if (b!==null) {\r\n            LinkedList.insertBefore(b, a);\r\n        }\r\n        LinkedList.remove(a);\r\n        utils.assert(LinkedList.valid(a) && (b===null || LinkedList.valid(b)));\r\n    },\r\n    // remove single node a from its list\r\n    remove: function(a) {\r\n        utils.assert(LinkedList.valid(a));\r\n        var prev = a._previousSibling;\r\n        if (prev === a) { return; }\r\n        var next = a._nextSibling;\r\n        prev._nextSibling = next;\r\n        next._previousSibling = prev;\r\n        a._previousSibling = a._nextSibling = a;\r\n        utils.assert(LinkedList.valid(a));\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9MaW5rZWRMaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvTGlua2VkTGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5cclxudmFyIExpbmtlZExpc3QgPSBtb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIC8vIGJhc2ljIHZhbGlkaXR5IHRlc3RzIG9uIGEgY2lyY3VsYXIgbGlua2VkIGxpc3QgYVxyXG4gICAgdmFsaWQ6IGZ1bmN0aW9uKGEpIHtcclxuICAgICAgICB1dGlscy5hc3NlcnQoYSwgXCJsaXN0IGZhbHN5XCIpO1xyXG4gICAgICAgIHV0aWxzLmFzc2VydChhLl9wcmV2aW91c1NpYmxpbmcsIFwicHJldmlvdXMgZmFsc3lcIik7XHJcbiAgICAgICAgdXRpbHMuYXNzZXJ0KGEuX25leHRTaWJsaW5nLCBcIm5leHQgZmFsc3lcIik7XHJcbiAgICAgICAgLy8geHh4IGNoZWNrIHRoYXQgbGlzdCBpcyBhY3R1YWxseSBjaXJjdWxhclxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIC8vIGluc2VydCBhIGJlZm9yZSBiXHJcbiAgICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICB1dGlscy5hc3NlcnQoTGlua2VkTGlzdC52YWxpZChhKSAmJiBMaW5rZWRMaXN0LnZhbGlkKGIpKTtcclxuICAgICAgICB2YXIgYV9maXJzdCA9IGEsIGFfbGFzdCA9IGEuX3ByZXZpb3VzU2libGluZztcclxuICAgICAgICB2YXIgYl9maXJzdCA9IGIsIGJfbGFzdCA9IGIuX3ByZXZpb3VzU2libGluZztcclxuICAgICAgICBhX2ZpcnN0Ll9wcmV2aW91c1NpYmxpbmcgPSBiX2xhc3Q7XHJcbiAgICAgICAgYV9sYXN0Ll9uZXh0U2libGluZyA9IGJfZmlyc3Q7XHJcbiAgICAgICAgYl9sYXN0Ll9uZXh0U2libGluZyA9IGFfZmlyc3Q7XHJcbiAgICAgICAgYl9maXJzdC5fcHJldmlvdXNTaWJsaW5nID0gYV9sYXN0O1xyXG4gICAgICAgIHV0aWxzLmFzc2VydChMaW5rZWRMaXN0LnZhbGlkKGEpICYmIExpbmtlZExpc3QudmFsaWQoYikpO1xyXG4gICAgfSxcclxuICAgIC8vIHJlcGxhY2UgYSBzaW5nbGUgbm9kZSBhIHdpdGggYSBsaXN0IGIgKHdoaWNoIGNvdWxkIGJlIG51bGwpXHJcbiAgICByZXBsYWNlOiBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkgJiYgKGI9PT1udWxsIHx8IExpbmtlZExpc3QudmFsaWQoYikpKTtcclxuICAgICAgICBpZiAoYiE9PW51bGwpIHtcclxuICAgICAgICAgICAgTGlua2VkTGlzdC5pbnNlcnRCZWZvcmUoYiwgYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIExpbmtlZExpc3QucmVtb3ZlKGEpO1xyXG4gICAgICAgIHV0aWxzLmFzc2VydChMaW5rZWRMaXN0LnZhbGlkKGEpICYmIChiPT09bnVsbCB8fCBMaW5rZWRMaXN0LnZhbGlkKGIpKSk7XHJcbiAgICB9LFxyXG4gICAgLy8gcmVtb3ZlIHNpbmdsZSBub2RlIGEgZnJvbSBpdHMgbGlzdFxyXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihhKSB7XHJcbiAgICAgICAgdXRpbHMuYXNzZXJ0KExpbmtlZExpc3QudmFsaWQoYSkpO1xyXG4gICAgICAgIHZhciBwcmV2ID0gYS5fcHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgIGlmIChwcmV2ID09PSBhKSB7IHJldHVybjsgfVxyXG4gICAgICAgIHZhciBuZXh0ID0gYS5fbmV4dFNpYmxpbmc7XHJcbiAgICAgICAgcHJldi5fbmV4dFNpYmxpbmcgPSBuZXh0O1xyXG4gICAgICAgIG5leHQuX3ByZXZpb3VzU2libGluZyA9IHByZXY7XHJcbiAgICAgICAgYS5fcHJldmlvdXNTaWJsaW5nID0gYS5fbmV4dFNpYmxpbmcgPSBhO1xyXG4gICAgICAgIHV0aWxzLmFzc2VydChMaW5rZWRMaXN0LnZhbGlkKGEpKTtcclxuICAgIH1cclxufTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/LinkedList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Location.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Location.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/URL.js\");\r\nvar URLUtils = __webpack_require__(/*! ./URLUtils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/URLUtils.js\");\r\n\r\nmodule.exports = Location;\r\n\r\nfunction Location(window, href) {\r\n  this._window = window;\r\n  this._href = href;\r\n}\r\n\r\nLocation.prototype = Object.create(URLUtils.prototype, {\r\n  constructor: { value: Location },\r\n\r\n  // Special behavior when href is set\r\n  href: {\r\n    get: function() { return this._href; },\r\n    set: function(v) { this.assign(v); }\r\n  },\r\n\r\n  assign: { value: function(url) {\r\n    // Resolve the new url against the current one\r\n    // XXX:\r\n    // This is not actually correct. It should be resolved against\r\n    // the URL of the document of the script. For now, though, I only\r\n    // support a single window and there is only one base url.\r\n    // So this is good enough for now.\r\n    var current = new URL(this._href);\r\n    var newurl = current.resolve(url);\r\n\r\n    // Save the new url\r\n    this._href = newurl;\r\n\r\n    // Start loading the new document!\r\n    // XXX\r\n    // This is just something hacked together.\r\n    // The real algorithm is: http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#navigate\r\n  }},\r\n\r\n  replace: { value: function(url) {\r\n    // XXX\r\n    // Since we aren't tracking history yet, replace is the same as assign\r\n    this.assign(url);\r\n  }},\r\n\r\n  reload: { value: function() {\r\n    // XXX:\r\n    // Actually, the spec is a lot more complicated than this\r\n    this.assign(this.href);\r\n  }},\r\n\r\n  toString: { value: function() {\r\n    return this.href;\r\n  }}\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Mb2NhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLFVBQVUsbUJBQU8sQ0FBQyxpRUFBTztBQUN6QixlQUFlLG1CQUFPLENBQUMsMkVBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0JBQW9CO0FBQzFDLHVCQUF1QjtBQUN2QixHQUFHO0FBQ0g7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvTG9jYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBVUkwgPSByZXF1aXJlKCcuL1VSTCcpO1xyXG52YXIgVVJMVXRpbHMgPSByZXF1aXJlKCcuL1VSTFV0aWxzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IExvY2F0aW9uO1xyXG5cclxuZnVuY3Rpb24gTG9jYXRpb24od2luZG93LCBocmVmKSB7XHJcbiAgdGhpcy5fd2luZG93ID0gd2luZG93O1xyXG4gIHRoaXMuX2hyZWYgPSBocmVmO1xyXG59XHJcblxyXG5Mb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFVSTFV0aWxzLnByb3RvdHlwZSwge1xyXG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBMb2NhdGlvbiB9LFxyXG5cclxuICAvLyBTcGVjaWFsIGJlaGF2aW9yIHdoZW4gaHJlZiBpcyBzZXRcclxuICBocmVmOiB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5faHJlZjsgfSxcclxuICAgIHNldDogZnVuY3Rpb24odikgeyB0aGlzLmFzc2lnbih2KTsgfVxyXG4gIH0sXHJcblxyXG4gIGFzc2lnbjogeyB2YWx1ZTogZnVuY3Rpb24odXJsKSB7XHJcbiAgICAvLyBSZXNvbHZlIHRoZSBuZXcgdXJsIGFnYWluc3QgdGhlIGN1cnJlbnQgb25lXHJcbiAgICAvLyBYWFg6XHJcbiAgICAvLyBUaGlzIGlzIG5vdCBhY3R1YWxseSBjb3JyZWN0LiBJdCBzaG91bGQgYmUgcmVzb2x2ZWQgYWdhaW5zdFxyXG4gICAgLy8gdGhlIFVSTCBvZiB0aGUgZG9jdW1lbnQgb2YgdGhlIHNjcmlwdC4gRm9yIG5vdywgdGhvdWdoLCBJIG9ubHlcclxuICAgIC8vIHN1cHBvcnQgYSBzaW5nbGUgd2luZG93IGFuZCB0aGVyZSBpcyBvbmx5IG9uZSBiYXNlIHVybC5cclxuICAgIC8vIFNvIHRoaXMgaXMgZ29vZCBlbm91Z2ggZm9yIG5vdy5cclxuICAgIHZhciBjdXJyZW50ID0gbmV3IFVSTCh0aGlzLl9ocmVmKTtcclxuICAgIHZhciBuZXd1cmwgPSBjdXJyZW50LnJlc29sdmUodXJsKTtcclxuXHJcbiAgICAvLyBTYXZlIHRoZSBuZXcgdXJsXHJcbiAgICB0aGlzLl9ocmVmID0gbmV3dXJsO1xyXG5cclxuICAgIC8vIFN0YXJ0IGxvYWRpbmcgdGhlIG5ldyBkb2N1bWVudCFcclxuICAgIC8vIFhYWFxyXG4gICAgLy8gVGhpcyBpcyBqdXN0IHNvbWV0aGluZyBoYWNrZWQgdG9nZXRoZXIuXHJcbiAgICAvLyBUaGUgcmVhbCBhbGdvcml0aG0gaXM6IGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2hpc3RvcnkuaHRtbCNuYXZpZ2F0ZVxyXG4gIH19LFxyXG5cclxuICByZXBsYWNlOiB7IHZhbHVlOiBmdW5jdGlvbih1cmwpIHtcclxuICAgIC8vIFhYWFxyXG4gICAgLy8gU2luY2Ugd2UgYXJlbid0IHRyYWNraW5nIGhpc3RvcnkgeWV0LCByZXBsYWNlIGlzIHRoZSBzYW1lIGFzIGFzc2lnblxyXG4gICAgdGhpcy5hc3NpZ24odXJsKTtcclxuICB9fSxcclxuXHJcbiAgcmVsb2FkOiB7IHZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgIC8vIFhYWDpcclxuICAgIC8vIEFjdHVhbGx5LCB0aGUgc3BlYyBpcyBhIGxvdCBtb3JlIGNvbXBsaWNhdGVkIHRoYW4gdGhpc1xyXG4gICAgdGhpcy5hc3NpZ24odGhpcy5ocmVmKTtcclxuICB9fSxcclxuXHJcbiAgdG9TdHJpbmc6IHsgdmFsdWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaHJlZjtcclxuICB9fVxyXG5cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Location.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/MouseEvent.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/MouseEvent.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar UIEvent = __webpack_require__(/*! ./UIEvent */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/UIEvent.js\");\r\n\r\nmodule.exports = MouseEvent;\r\n\r\nfunction MouseEvent() {\r\n  // Just use the superclass constructor to initialize\r\n  UIEvent.call(this);\r\n\r\n  this.screenX = this.screenY = this.clientX = this.clientY = 0;\r\n  this.ctrlKey = this.altKey = this.shiftKey = this.metaKey = false;\r\n  this.button = 0;\r\n  this.buttons = 1;\r\n  this.relatedTarget = null;\r\n}\r\nMouseEvent.prototype = Object.create(UIEvent.prototype, {\r\n  constructor: { value: MouseEvent },\r\n  initMouseEvent: { value: function(type, bubbles, cancelable,\r\n    view, detail,\r\n    screenX, screenY, clientX, clientY,\r\n    ctrlKey, altKey, shiftKey, metaKey,\r\n    button, relatedTarget) {\r\n\r\n    this.initEvent(type, bubbles, cancelable, view, detail);\r\n    this.screenX = screenX;\r\n    this.screenY = screenY;\r\n    this.clientX = clientX;\r\n    this.clientY = clientY;\r\n    this.ctrlKey = ctrlKey;\r\n    this.altKey = altKey;\r\n    this.shiftKey = shiftKey;\r\n    this.metaKey = metaKey;\r\n    this.button = button;\r\n    switch(button) {\r\n    case 0: this.buttons = 1; break;\r\n    case 1: this.buttons = 4; break;\r\n    case 2: this.buttons = 2; break;\r\n    default: this.buttons = 0; break;\r\n    }\r\n    this.relatedTarget = relatedTarget;\r\n  }},\r\n\r\n  getModifierState: { value: function(key) {\r\n    switch(key) {\r\n    case \"Alt\": return this.altKey;\r\n    case \"Control\": return this.ctrlKey;\r\n    case \"Shift\": return this.shiftKey;\r\n    case \"Meta\": return this.metaKey;\r\n    default: return false;\r\n    }\r\n  }}\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Nb3VzZUV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsY0FBYyxtQkFBTyxDQUFDLHlFQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvTW91c2VFdmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIFVJRXZlbnQgPSByZXF1aXJlKCcuL1VJRXZlbnQnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTW91c2VFdmVudDtcclxuXHJcbmZ1bmN0aW9uIE1vdXNlRXZlbnQoKSB7XHJcbiAgLy8gSnVzdCB1c2UgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IgdG8gaW5pdGlhbGl6ZVxyXG4gIFVJRXZlbnQuY2FsbCh0aGlzKTtcclxuXHJcbiAgdGhpcy5zY3JlZW5YID0gdGhpcy5zY3JlZW5ZID0gdGhpcy5jbGllbnRYID0gdGhpcy5jbGllbnRZID0gMDtcclxuICB0aGlzLmN0cmxLZXkgPSB0aGlzLmFsdEtleSA9IHRoaXMuc2hpZnRLZXkgPSB0aGlzLm1ldGFLZXkgPSBmYWxzZTtcclxuICB0aGlzLmJ1dHRvbiA9IDA7XHJcbiAgdGhpcy5idXR0b25zID0gMTtcclxuICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSBudWxsO1xyXG59XHJcbk1vdXNlRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShVSUV2ZW50LnByb3RvdHlwZSwge1xyXG4gIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBNb3VzZUV2ZW50IH0sXHJcbiAgaW5pdE1vdXNlRXZlbnQ6IHsgdmFsdWU6IGZ1bmN0aW9uKHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsXHJcbiAgICB2aWV3LCBkZXRhaWwsXHJcbiAgICBzY3JlZW5YLCBzY3JlZW5ZLCBjbGllbnRYLCBjbGllbnRZLFxyXG4gICAgY3RybEtleSwgYWx0S2V5LCBzaGlmdEtleSwgbWV0YUtleSxcclxuICAgIGJ1dHRvbiwgcmVsYXRlZFRhcmdldCkge1xyXG5cclxuICAgIHRoaXMuaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIHZpZXcsIGRldGFpbCk7XHJcbiAgICB0aGlzLnNjcmVlblggPSBzY3JlZW5YO1xyXG4gICAgdGhpcy5zY3JlZW5ZID0gc2NyZWVuWTtcclxuICAgIHRoaXMuY2xpZW50WCA9IGNsaWVudFg7XHJcbiAgICB0aGlzLmNsaWVudFkgPSBjbGllbnRZO1xyXG4gICAgdGhpcy5jdHJsS2V5ID0gY3RybEtleTtcclxuICAgIHRoaXMuYWx0S2V5ID0gYWx0S2V5O1xyXG4gICAgdGhpcy5zaGlmdEtleSA9IHNoaWZ0S2V5O1xyXG4gICAgdGhpcy5tZXRhS2V5ID0gbWV0YUtleTtcclxuICAgIHRoaXMuYnV0dG9uID0gYnV0dG9uO1xyXG4gICAgc3dpdGNoKGJ1dHRvbikge1xyXG4gICAgY2FzZSAwOiB0aGlzLmJ1dHRvbnMgPSAxOyBicmVhaztcclxuICAgIGNhc2UgMTogdGhpcy5idXR0b25zID0gNDsgYnJlYWs7XHJcbiAgICBjYXNlIDI6IHRoaXMuYnV0dG9ucyA9IDI7IGJyZWFrO1xyXG4gICAgZGVmYXVsdDogdGhpcy5idXR0b25zID0gMDsgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlbGF0ZWRUYXJnZXQgPSByZWxhdGVkVGFyZ2V0O1xyXG4gIH19LFxyXG5cclxuICBnZXRNb2RpZmllclN0YXRlOiB7IHZhbHVlOiBmdW5jdGlvbihrZXkpIHtcclxuICAgIHN3aXRjaChrZXkpIHtcclxuICAgIGNhc2UgXCJBbHRcIjogcmV0dXJuIHRoaXMuYWx0S2V5O1xyXG4gICAgY2FzZSBcIkNvbnRyb2xcIjogcmV0dXJuIHRoaXMuY3RybEtleTtcclxuICAgIGNhc2UgXCJTaGlmdFwiOiByZXR1cm4gdGhpcy5zaGlmdEtleTtcclxuICAgIGNhc2UgXCJNZXRhXCI6IHJldHVybiB0aGlzLm1ldGFLZXk7XHJcbiAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfX1cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/MouseEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/MutationConstants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/MutationConstants.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = {\r\n  VALUE: 1, // The value of a Text, Comment or PI node changed\r\n  ATTR: 2, // A new attribute was added or an attribute value and/or prefix changed\r\n  REMOVE_ATTR: 3, // An attribute was removed\r\n  REMOVE: 4, // A node was removed\r\n  MOVE: 5, // A node was moved\r\n  INSERT: 6 // A node (or a subtree of nodes) was inserted\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9NdXRhdGlvbkNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9NdXRhdGlvbkNvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgVkFMVUU6IDEsIC8vIFRoZSB2YWx1ZSBvZiBhIFRleHQsIENvbW1lbnQgb3IgUEkgbm9kZSBjaGFuZ2VkXHJcbiAgQVRUUjogMiwgLy8gQSBuZXcgYXR0cmlidXRlIHdhcyBhZGRlZCBvciBhbiBhdHRyaWJ1dGUgdmFsdWUgYW5kL29yIHByZWZpeCBjaGFuZ2VkXHJcbiAgUkVNT1ZFX0FUVFI6IDMsIC8vIEFuIGF0dHJpYnV0ZSB3YXMgcmVtb3ZlZFxyXG4gIFJFTU9WRTogNCwgLy8gQSBub2RlIHdhcyByZW1vdmVkXHJcbiAgTU9WRTogNSwgLy8gQSBub2RlIHdhcyBtb3ZlZFxyXG4gIElOU0VSVDogNiAvLyBBIG5vZGUgKG9yIGEgc3VidHJlZSBvZiBub2Rlcykgd2FzIGluc2VydGVkXHJcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/MutationConstants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NamedNodeMap.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NamedNodeMap.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = NamedNodeMap;\r\n\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\n/* This is a hacky implementation of NamedNodeMap, intended primarily to\r\n * satisfy clients (like dompurify and the web-platform-tests) which check\r\n * to ensure that Node#attributes instanceof NamedNodeMap. */\r\n\r\nfunction NamedNodeMap(element) {\r\n  this.element = element;\r\n}\r\nObject.defineProperties(NamedNodeMap.prototype, {\r\n  length: { get: utils.shouldOverride },\r\n  item: { value: utils.shouldOverride },\r\n\r\n  getNamedItem: { value: function getNamedItem(qualifiedName) {\r\n    return this.element.getAttributeNode(qualifiedName);\r\n  } },\r\n  getNamedItemNS: { value: function getNamedItemNS(namespace, localName) {\r\n    return this.element.getAttributeNodeNS(namespace, localName);\r\n  } },\r\n  setNamedItem: { value: utils.nyi },\r\n  setNamedItemNS: { value: utils.nyi },\r\n  removeNamedItem: { value: function removeNamedItem(qualifiedName) {\r\n    var attr = this.element.getAttributeNode(qualifiedName);\r\n    if (attr) {\r\n      this.element.removeAttribute(qualifiedName);\r\n      return attr;\r\n    }\r\n    utils.NotFoundError();\r\n  } },\r\n  removeNamedItemNS: { value: function removeNamedItemNS(ns, lname) {\r\n    var attr = this.element.getAttributeNodeNS(ns, lname);\r\n    if (attr) {\r\n      this.element.removeAttributeNS(ns, lname);\r\n      return attr;\r\n    }\r\n    utils.NotFoundError();\r\n  } },\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9OYW1lZE5vZGVNYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkJBQTJCO0FBQ3ZDLFVBQVUsNkJBQTZCO0FBQ3ZDO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsS0FBSztBQUNMLG9CQUFvQjtBQUNwQjtBQUNBLEtBQUs7QUFDTCxrQkFBa0Isa0JBQWtCO0FBQ3BDLG9CQUFvQixrQkFBa0I7QUFDdEMscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9OYW1lZE5vZGVNYXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gTmFtZWROb2RlTWFwO1xyXG5cclxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5cclxuLyogVGhpcyBpcyBhIGhhY2t5IGltcGxlbWVudGF0aW9uIG9mIE5hbWVkTm9kZU1hcCwgaW50ZW5kZWQgcHJpbWFyaWx5IHRvXHJcbiAqIHNhdGlzZnkgY2xpZW50cyAobGlrZSBkb21wdXJpZnkgYW5kIHRoZSB3ZWItcGxhdGZvcm0tdGVzdHMpIHdoaWNoIGNoZWNrXHJcbiAqIHRvIGVuc3VyZSB0aGF0IE5vZGUjYXR0cmlidXRlcyBpbnN0YW5jZW9mIE5hbWVkTm9kZU1hcC4gKi9cclxuXHJcbmZ1bmN0aW9uIE5hbWVkTm9kZU1hcChlbGVtZW50KSB7XHJcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhOYW1lZE5vZGVNYXAucHJvdG90eXBlLCB7XHJcbiAgbGVuZ3RoOiB7IGdldDogdXRpbHMuc2hvdWxkT3ZlcnJpZGUgfSxcclxuICBpdGVtOiB7IHZhbHVlOiB1dGlscy5zaG91bGRPdmVycmlkZSB9LFxyXG5cclxuICBnZXROYW1lZEl0ZW06IHsgdmFsdWU6IGZ1bmN0aW9uIGdldE5hbWVkSXRlbShxdWFsaWZpZWROYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUocXVhbGlmaWVkTmFtZSk7XHJcbiAgfSB9LFxyXG4gIGdldE5hbWVkSXRlbU5TOiB7IHZhbHVlOiBmdW5jdGlvbiBnZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2UsIGxvY2FsTmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlTlMobmFtZXNwYWNlLCBsb2NhbE5hbWUpO1xyXG4gIH0gfSxcclxuICBzZXROYW1lZEl0ZW06IHsgdmFsdWU6IHV0aWxzLm55aSB9LFxyXG4gIHNldE5hbWVkSXRlbU5TOiB7IHZhbHVlOiB1dGlscy5ueWkgfSxcclxuICByZW1vdmVOYW1lZEl0ZW06IHsgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZU5hbWVkSXRlbShxdWFsaWZpZWROYW1lKSB7XHJcbiAgICB2YXIgYXR0ciA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKHF1YWxpZmllZE5hbWUpO1xyXG4gICAgaWYgKGF0dHIpIHtcclxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShxdWFsaWZpZWROYW1lKTtcclxuICAgICAgcmV0dXJuIGF0dHI7XHJcbiAgICB9XHJcbiAgICB1dGlscy5Ob3RGb3VuZEVycm9yKCk7XHJcbiAgfSB9LFxyXG4gIHJlbW92ZU5hbWVkSXRlbU5TOiB7IHZhbHVlOiBmdW5jdGlvbiByZW1vdmVOYW1lZEl0ZW1OUyhucywgbG5hbWUpIHtcclxuICAgIHZhciBhdHRyID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZU5vZGVOUyhucywgbG5hbWUpO1xyXG4gICAgaWYgKGF0dHIpIHtcclxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZU5TKG5zLCBsbmFtZSk7XHJcbiAgICAgIHJldHVybiBhdHRyO1xyXG4gICAgfVxyXG4gICAgdXRpbHMuTm90Rm91bmRFcnJvcigpO1xyXG4gIH0gfSxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NamedNodeMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NavigatorID.js":
/*!************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NavigatorID.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#navigatorid\r\nvar NavigatorID = Object.create(null, {\r\n  appCodeName: { value: \"Mozilla\" },\r\n  appName: { value: \"Netscape\" },\r\n  appVersion: { value: \"4.0\" },\r\n  platform: { value: \"\" },\r\n  product: { value: \"Gecko\" },\r\n  productSub: { value: \"20100101\" },\r\n  userAgent: { value: \"\" },\r\n  vendor: { value: \"\" },\r\n  vendorSub: { value: \"\" },\r\n  taintEnabled: { value: function() { return false; } }\r\n});\r\n\r\nmodule.exports = NavigatorID;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9OYXZpZ2F0b3JJRC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkMsYUFBYSxtQkFBbUI7QUFDaEMsZ0JBQWdCLGNBQWM7QUFDOUIsY0FBYyxXQUFXO0FBQ3pCLGFBQWEsZ0JBQWdCO0FBQzdCLGdCQUFnQixtQkFBbUI7QUFDbkMsZUFBZSxXQUFXO0FBQzFCLFlBQVksV0FBVztBQUN2QixlQUFlLFdBQVc7QUFDMUIsa0JBQWtCLG9CQUFvQjtBQUN0QyxDQUFDO0FBQ0Q7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL05hdmlnYXRvcklELmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI25hdmlnYXRvcmlkXHJcbnZhciBOYXZpZ2F0b3JJRCA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xyXG4gIGFwcENvZGVOYW1lOiB7IHZhbHVlOiBcIk1vemlsbGFcIiB9LFxyXG4gIGFwcE5hbWU6IHsgdmFsdWU6IFwiTmV0c2NhcGVcIiB9LFxyXG4gIGFwcFZlcnNpb246IHsgdmFsdWU6IFwiNC4wXCIgfSxcclxuICBwbGF0Zm9ybTogeyB2YWx1ZTogXCJcIiB9LFxyXG4gIHByb2R1Y3Q6IHsgdmFsdWU6IFwiR2Vja29cIiB9LFxyXG4gIHByb2R1Y3RTdWI6IHsgdmFsdWU6IFwiMjAxMDAxMDFcIiB9LFxyXG4gIHVzZXJBZ2VudDogeyB2YWx1ZTogXCJcIiB9LFxyXG4gIHZlbmRvcjogeyB2YWx1ZTogXCJcIiB9LFxyXG4gIHZlbmRvclN1YjogeyB2YWx1ZTogXCJcIiB9LFxyXG4gIHRhaW50RW5hYmxlZDogeyB2YWx1ZTogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSB9XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBOYXZpZ2F0b3JJRDtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NavigatorID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Node.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Node;\r\n\r\nvar EventTarget = __webpack_require__(/*! ./EventTarget */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/EventTarget.js\");\r\nvar LinkedList = __webpack_require__(/*! ./LinkedList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/LinkedList.js\");\r\nvar NodeUtils = __webpack_require__(/*! ./NodeUtils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeUtils.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\n// All nodes have a nodeType and an ownerDocument.\r\n// Once inserted, they also have a parentNode.\r\n// This is an abstract class; all nodes in a document are instances\r\n// of a subtype, so all the properties are defined by more specific\r\n// constructors.\r\nfunction Node() {\r\n  EventTarget.call(this);\r\n  this.parentNode = null;\r\n  this._nextSibling = this._previousSibling = this;\r\n  this._index = undefined;\r\n}\r\n\r\nvar ELEMENT_NODE                = Node.ELEMENT_NODE = 1;\r\nvar ATTRIBUTE_NODE              = Node.ATTRIBUTE_NODE = 2;\r\nvar TEXT_NODE                   = Node.TEXT_NODE = 3;\r\nvar CDATA_SECTION_NODE          = Node.CDATA_SECTION_NODE = 4;\r\nvar ENTITY_REFERENCE_NODE       = Node.ENTITY_REFERENCE_NODE = 5;\r\nvar ENTITY_NODE                 = Node.ENTITY_NODE = 6;\r\nvar PROCESSING_INSTRUCTION_NODE = Node.PROCESSING_INSTRUCTION_NODE = 7;\r\nvar COMMENT_NODE                = Node.COMMENT_NODE = 8;\r\nvar DOCUMENT_NODE               = Node.DOCUMENT_NODE = 9;\r\nvar DOCUMENT_TYPE_NODE          = Node.DOCUMENT_TYPE_NODE = 10;\r\nvar DOCUMENT_FRAGMENT_NODE      = Node.DOCUMENT_FRAGMENT_NODE = 11;\r\nvar NOTATION_NODE               = Node.NOTATION_NODE = 12;\r\n\r\nvar DOCUMENT_POSITION_DISCONNECTED            = Node.DOCUMENT_POSITION_DISCONNECTED = 0x01;\r\nvar DOCUMENT_POSITION_PRECEDING               = Node.DOCUMENT_POSITION_PRECEDING = 0x02;\r\nvar DOCUMENT_POSITION_FOLLOWING               = Node.DOCUMENT_POSITION_FOLLOWING = 0x04;\r\nvar DOCUMENT_POSITION_CONTAINS                = Node.DOCUMENT_POSITION_CONTAINS = 0x08;\r\nvar DOCUMENT_POSITION_CONTAINED_BY            = Node.DOCUMENT_POSITION_CONTAINED_BY = 0x10;\r\nvar DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;\r\n\r\nNode.prototype = Object.create(EventTarget.prototype, {\r\n\r\n  // Node that are not inserted into the tree inherit a null parent\r\n\r\n  // XXX: the baseURI attribute is defined by dom core, but\r\n  // a correct implementation of it requires HTML features, so\r\n  // we'll come back to this later.\r\n  baseURI: { get: utils.nyi },\r\n\r\n  parentElement: { get: function() {\r\n    return (this.parentNode && this.parentNode.nodeType===ELEMENT_NODE) ? this.parentNode : null;\r\n  }},\r\n\r\n  hasChildNodes: { value: utils.shouldOverride },\r\n\r\n  firstChild: { get: utils.shouldOverride },\r\n\r\n  lastChild: { get: utils.shouldOverride },\r\n\r\n  isConnected: {\r\n    get: function () {\r\n      let node = this;\r\n      while (node != null) {\r\n        if (node.nodeType === Node.DOCUMENT_NODE) {\r\n          return true;\r\n        }\r\n\r\n        node = node.parentNode;\r\n        if (node != null && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n          node = node.host;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n\r\n  previousSibling: { get: function() {\r\n    var parent = this.parentNode;\r\n    if (!parent) return null;\r\n    if (this === parent.firstChild) return null;\r\n    return this._previousSibling;\r\n  }},\r\n\r\n  nextSibling: { get: function() {\r\n    var parent = this.parentNode, next = this._nextSibling;\r\n    if (!parent) return null;\r\n    if (next === parent.firstChild) return null;\r\n    return next;\r\n  }},\r\n\r\n  textContent: {\r\n    // Should override for DocumentFragment/Element/Attr/Text/PI/Comment\r\n    get: function() { return null; },\r\n    set: function(v) { /* do nothing */ },\r\n  },\r\n\r\n  innerText: {\r\n    // Should override for DocumentFragment/Element/Attr/Text/PI/Comment\r\n    get: function() { return null; },\r\n    set: function(v) { /* do nothing */ },\r\n  },\r\n\r\n  _countChildrenOfType: { value: function(type) {\r\n    var sum = 0;\r\n    for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n      if (kid.nodeType === type) sum++;\r\n    }\r\n    return sum;\r\n  }},\r\n\r\n  _ensureInsertValid: { value: function _ensureInsertValid(node, child, isPreinsert) {\r\n    var parent = this, i, kid;\r\n    if (!node.nodeType) throw new TypeError('not a node');\r\n    // 1. If parent is not a Document, DocumentFragment, or Element\r\n    // node, throw a HierarchyRequestError.\r\n    switch (parent.nodeType) {\r\n    case DOCUMENT_NODE:\r\n    case DOCUMENT_FRAGMENT_NODE:\r\n    case ELEMENT_NODE:\r\n      break;\r\n    default: utils.HierarchyRequestError();\r\n    }\r\n    // 2. If node is a host-including inclusive ancestor of parent,\r\n    // throw a HierarchyRequestError.\r\n    if (node.isAncestor(parent)) utils.HierarchyRequestError();\r\n    // 3. If child is not null and its parent is not parent, then\r\n    // throw a NotFoundError. (replaceChild omits the 'child is not null'\r\n    // and throws a TypeError here if child is null.)\r\n    if (child !== null || !isPreinsert) {\r\n      if (child.parentNode !== parent) utils.NotFoundError();\r\n    }\r\n    // 4. If node is not a DocumentFragment, DocumentType, Element,\r\n    // Text, ProcessingInstruction, or Comment node, throw a\r\n    // HierarchyRequestError.\r\n    switch (node.nodeType) {\r\n    case DOCUMENT_FRAGMENT_NODE:\r\n    case DOCUMENT_TYPE_NODE:\r\n    case ELEMENT_NODE:\r\n    case TEXT_NODE:\r\n    case PROCESSING_INSTRUCTION_NODE:\r\n    case COMMENT_NODE:\r\n      break;\r\n    default: utils.HierarchyRequestError();\r\n    }\r\n    // 5. If either node is a Text node and parent is a document, or\r\n    // node is a doctype and parent is not a document, throw a\r\n    // HierarchyRequestError.\r\n    // 6. If parent is a document, and any of the statements below, switched\r\n    // on node, are true, throw a HierarchyRequestError.\r\n    if (parent.nodeType === DOCUMENT_NODE) {\r\n      switch (node.nodeType) {\r\n      case TEXT_NODE:\r\n        utils.HierarchyRequestError();\r\n        break;\r\n      case DOCUMENT_FRAGMENT_NODE:\r\n        // 6a1. If node has more than one element child or has a Text\r\n        // node child.\r\n        if (node._countChildrenOfType(TEXT_NODE) > 0)\r\n          utils.HierarchyRequestError();\r\n        switch (node._countChildrenOfType(ELEMENT_NODE)) {\r\n        case 0:\r\n          break;\r\n        case 1:\r\n          // 6a2. Otherwise, if node has one element child and either\r\n          // parent has an element child, child is a doctype, or child\r\n          // is not null and a doctype is following child. [preinsert]\r\n          // 6a2. Otherwise, if node has one element child and either\r\n          // parent has an element child that is not child or a\r\n          // doctype is following child. [replaceWith]\r\n          if (child !== null /* always true here for replaceWith */) {\r\n            if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE)\r\n              utils.HierarchyRequestError();\r\n            for (kid = child.nextSibling; kid !== null; kid = kid.nextSibling) {\r\n              if (kid.nodeType === DOCUMENT_TYPE_NODE)\r\n                utils.HierarchyRequestError();\r\n            }\r\n          }\r\n          i = parent._countChildrenOfType(ELEMENT_NODE);\r\n          if (isPreinsert) {\r\n            // \"parent has an element child\"\r\n            if (i > 0)\r\n              utils.HierarchyRequestError();\r\n          } else {\r\n            // \"parent has an element child that is not child\"\r\n            if (i > 1 || (i === 1 && child.nodeType !== ELEMENT_NODE))\r\n              utils.HierarchyRequestError();\r\n          }\r\n          break;\r\n        default: // 6a1, continued. (more than one Element child)\r\n          utils.HierarchyRequestError();\r\n        }\r\n        break;\r\n      case ELEMENT_NODE:\r\n        // 6b. parent has an element child, child is a doctype, or\r\n        // child is not null and a doctype is following child. [preinsert]\r\n        // 6b. parent has an element child that is not child or a\r\n        // doctype is following child. [replaceWith]\r\n        if (child !== null /* always true here for replaceWith */) {\r\n          if (isPreinsert && child.nodeType === DOCUMENT_TYPE_NODE)\r\n            utils.HierarchyRequestError();\r\n          for (kid = child.nextSibling; kid !== null; kid = kid.nextSibling) {\r\n            if (kid.nodeType === DOCUMENT_TYPE_NODE)\r\n              utils.HierarchyRequestError();\r\n          }\r\n        }\r\n        i = parent._countChildrenOfType(ELEMENT_NODE);\r\n        if (isPreinsert) {\r\n          // \"parent has an element child\"\r\n          if (i > 0)\r\n            utils.HierarchyRequestError();\r\n        } else {\r\n          // \"parent has an element child that is not child\"\r\n          if (i > 1 || (i === 1 && child.nodeType !== ELEMENT_NODE))\r\n            utils.HierarchyRequestError();\r\n        }\r\n        break;\r\n      case DOCUMENT_TYPE_NODE:\r\n        // 6c. parent has a doctype child, child is non-null and an\r\n        // element is preceding child, or child is null and parent has\r\n        // an element child. [preinsert]\r\n        // 6c. parent has a doctype child that is not child, or an\r\n        // element is preceding child. [replaceWith]\r\n        if (child === null) {\r\n          if (parent._countChildrenOfType(ELEMENT_NODE))\r\n            utils.HierarchyRequestError();\r\n        } else {\r\n          // child is always non-null for [replaceWith] case\r\n          for (kid = parent.firstChild; kid !== null; kid = kid.nextSibling) {\r\n            if (kid === child) break;\r\n            if (kid.nodeType === ELEMENT_NODE)\r\n              utils.HierarchyRequestError();\r\n          }\r\n        }\r\n        i = parent._countChildrenOfType(DOCUMENT_TYPE_NODE);\r\n        if (isPreinsert) {\r\n          // \"parent has an doctype child\"\r\n          if (i > 0)\r\n            utils.HierarchyRequestError();\r\n        } else {\r\n          // \"parent has an doctype child that is not child\"\r\n          if (i > 1 || (i === 1 && child.nodeType !== DOCUMENT_TYPE_NODE))\r\n            utils.HierarchyRequestError();\r\n        }\r\n        break;\r\n      }\r\n    } else {\r\n      // 5, continued: (parent is not a document)\r\n      if (node.nodeType === DOCUMENT_TYPE_NODE) utils.HierarchyRequestError();\r\n    }\r\n  }},\r\n\r\n  insertBefore: { value: function insertBefore(node, child) {\r\n    var parent = this;\r\n    // 1. Ensure pre-insertion validity\r\n    parent._ensureInsertValid(node, child, true);\r\n    // 2. Let reference child be child.\r\n    var refChild = child;\r\n    // 3. If reference child is node, set it to node's next sibling\r\n    if (refChild === node) { refChild = node.nextSibling; }\r\n    // 4. Adopt node into parent's node document.\r\n    parent.doc.adoptNode(node);\r\n    // 5. Insert node into parent before reference child.\r\n    node._insertOrReplace(parent, refChild, false);\r\n    // 6. Return node\r\n    return node;\r\n  }},\r\n\r\n\r\n  appendChild: { value: function(child) {\r\n    // This invokes _appendChild after doing validity checks.\r\n    return this.insertBefore(child, null);\r\n  }},\r\n\r\n  _appendChild: { value: function(child) {\r\n    child._insertOrReplace(this, null, false);\r\n  }},\r\n\r\n  removeChild: { value: function removeChild(child) {\r\n    var parent = this;\r\n    if (!child.nodeType) throw new TypeError('not a node');\r\n    if (child.parentNode !== parent) utils.NotFoundError();\r\n    child.remove();\r\n    return child;\r\n  }},\r\n\r\n  // To replace a `child` with `node` within a `parent` (this)\r\n  replaceChild: { value: function replaceChild(node, child) {\r\n    var parent = this;\r\n    // Ensure validity (slight differences from pre-insertion check)\r\n    parent._ensureInsertValid(node, child, false);\r\n    // Adopt node into parent's node document.\r\n    if (node.doc !== parent.doc) {\r\n      // XXX adoptNode has side-effect of removing node from its parent\r\n      // and generating a mutation event, thus causing the _insertOrReplace\r\n      // to generate two deletes and an insert instead of a 'move'\r\n      // event.  It looks like the new MutationObserver stuff avoids\r\n      // this problem, but for now let's only adopt (ie, remove `node`\r\n      // from its parent) here if we need to.\r\n      parent.doc.adoptNode(node);\r\n    }\r\n    // Do the replace.\r\n    node._insertOrReplace(parent, child, true);\r\n    return child;\r\n  }},\r\n\r\n  // See: http://ejohn.org/blog/comparing-document-position/\r\n  contains: { value: function contains(node) {\r\n    if (node === null) { return false; }\r\n    if (this === node) { return true; /* inclusive descendant */ }\r\n    /* jshint bitwise: false */\r\n    return (this.compareDocumentPosition(node) &\r\n            DOCUMENT_POSITION_CONTAINED_BY) !== 0;\r\n  }},\r\n\r\n  compareDocumentPosition: { value: function compareDocumentPosition(that){\r\n    // Basic algorithm for finding the relative position of two nodes.\r\n    // Make a list the ancestors of each node, starting with the\r\n    // document element and proceeding down to the nodes themselves.\r\n    // Then, loop through the lists, looking for the first element\r\n    // that differs.  The order of those two elements give the\r\n    // order of their descendant nodes.  Or, if one list is a prefix\r\n    // of the other one, then that node contains the other.\r\n\r\n    if (this === that) return 0;\r\n\r\n    // If they're not owned by the same document or if one is rooted\r\n    // and one is not, then they're disconnected.\r\n    if (this.doc !== that.doc ||\r\n      this.rooted !== that.rooted)\r\n      return (DOCUMENT_POSITION_DISCONNECTED +\r\n          DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);\r\n\r\n    // Get arrays of ancestors for this and that\r\n    var these = [], those = [];\r\n    for(var n = this; n !== null; n = n.parentNode) these.push(n);\r\n    for(n = that; n !== null; n = n.parentNode) those.push(n);\r\n    these.reverse();  // So we start with the outermost\r\n    those.reverse();\r\n\r\n    if (these[0] !== those[0]) // No common ancestor\r\n      return (DOCUMENT_POSITION_DISCONNECTED +\r\n          DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC);\r\n\r\n    n = Math.min(these.length, those.length);\r\n    for(var i = 1; i < n; i++) {\r\n      if (these[i] !== those[i]) {\r\n        // We found two different ancestors, so compare\r\n        // their positions\r\n        if (these[i].index < those[i].index)\r\n          return DOCUMENT_POSITION_FOLLOWING;\r\n        else\r\n          return DOCUMENT_POSITION_PRECEDING;\r\n      }\r\n    }\r\n\r\n    // If we get to here, then one of the nodes (the one with the\r\n    // shorter list of ancestors) contains the other one.\r\n    if (these.length < those.length)\r\n      return (DOCUMENT_POSITION_FOLLOWING +\r\n          DOCUMENT_POSITION_CONTAINED_BY);\r\n    else\r\n      return (DOCUMENT_POSITION_PRECEDING +\r\n          DOCUMENT_POSITION_CONTAINS);\r\n  }},\r\n\r\n  isSameNode: {value : function isSameNode(node) {\r\n    return this === node;\r\n  }},\r\n\r\n\r\n  // This method implements the generic parts of node equality testing\r\n  // and defers to the (non-recursive) type-specific isEqual() method\r\n  // defined by subclasses\r\n  isEqualNode: { value: function isEqualNode(node) {\r\n    if (!node) return false;\r\n    if (node.nodeType !== this.nodeType) return false;\r\n\r\n    // Check type-specific properties for equality\r\n    if (!this.isEqual(node)) return false;\r\n\r\n    // Now check children for number and equality\r\n    for (var c1 = this.firstChild, c2 = node.firstChild;\r\n         c1 && c2;\r\n         c1 = c1.nextSibling, c2 = c2.nextSibling) {\r\n      if (!c1.isEqualNode(c2)) return false;\r\n    }\r\n    return c1 === null && c2 === null;\r\n  }},\r\n\r\n  // This method delegates shallow cloning to a clone() method\r\n  // that each concrete subclass must implement\r\n  cloneNode: { value: function(deep) {\r\n    // Clone this node\r\n    var clone = this.clone();\r\n\r\n    // Handle the recursive case if necessary\r\n    if (deep) {\r\n      for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n        clone._appendChild(kid.cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return clone;\r\n  }},\r\n\r\n  lookupPrefix: { value: function lookupPrefix(ns) {\r\n    var e;\r\n    if (ns === '' || ns === null || ns === undefined) return null;\r\n    switch(this.nodeType) {\r\n    case ELEMENT_NODE:\r\n      return this._lookupNamespacePrefix(ns, this);\r\n    case DOCUMENT_NODE:\r\n      e = this.documentElement;\r\n      return e ? e.lookupPrefix(ns) : null;\r\n    case ENTITY_NODE:\r\n    case NOTATION_NODE:\r\n    case DOCUMENT_FRAGMENT_NODE:\r\n    case DOCUMENT_TYPE_NODE:\r\n      return null;\r\n    case ATTRIBUTE_NODE:\r\n      e = this.ownerElement;\r\n      return e ? e.lookupPrefix(ns) : null;\r\n    default:\r\n      e = this.parentElement;\r\n      return e ? e.lookupPrefix(ns) : null;\r\n    }\r\n  }},\r\n\r\n\r\n  lookupNamespaceURI: {value: function lookupNamespaceURI(prefix) {\r\n    if (prefix === '' || prefix === undefined) { prefix = null; }\r\n    var e;\r\n    switch(this.nodeType) {\r\n    case ELEMENT_NODE:\r\n      return utils.shouldOverride();\r\n    case DOCUMENT_NODE:\r\n      e = this.documentElement;\r\n      return e ? e.lookupNamespaceURI(prefix) : null;\r\n    case ENTITY_NODE:\r\n    case NOTATION_NODE:\r\n    case DOCUMENT_TYPE_NODE:\r\n    case DOCUMENT_FRAGMENT_NODE:\r\n      return null;\r\n    case ATTRIBUTE_NODE:\r\n      e = this.ownerElement;\r\n      return e ? e.lookupNamespaceURI(prefix) : null;\r\n    default:\r\n      e = this.parentElement;\r\n      return e ? e.lookupNamespaceURI(prefix) : null;\r\n    }\r\n  }},\r\n\r\n  isDefaultNamespace: { value: function isDefaultNamespace(ns) {\r\n    if (ns === '' || ns === undefined) { ns = null; }\r\n    var defaultNamespace = this.lookupNamespaceURI(null);\r\n    return (defaultNamespace === ns);\r\n  }},\r\n\r\n  // Utility methods for nodes.  Not part of the DOM\r\n\r\n  // Return the index of this node in its parent.\r\n  // Throw if no parent, or if this node is not a child of its parent\r\n  index: { get: function() {\r\n    var parent = this.parentNode;\r\n    if (this === parent.firstChild) return 0; // fast case\r\n    var kids = parent.childNodes;\r\n    if (this._index === undefined || kids[this._index] !== this) {\r\n      // Ensure that we don't have an O(N^2) blowup if none of the\r\n      // kids have defined indices yet and we're traversing via\r\n      // nextSibling or previousSibling\r\n      for (var i=0; i<kids.length; i++) {\r\n        kids[i]._index = i;\r\n      }\r\n      utils.assert(kids[this._index] === this);\r\n    }\r\n    return this._index;\r\n  }},\r\n\r\n  // Return true if this node is equal to or is an ancestor of that node\r\n  // Note that nodes are considered to be ancestors of themselves\r\n  isAncestor: { value: function(that) {\r\n    // If they belong to different documents, then they're unrelated.\r\n    if (this.doc !== that.doc) return false;\r\n    // If one is rooted and one isn't then they're not related\r\n    if (this.rooted !== that.rooted) return false;\r\n\r\n    // Otherwise check by traversing the parentNode chain\r\n    for(var e = that; e; e = e.parentNode) {\r\n      if (e === this) return true;\r\n    }\r\n    return false;\r\n  }},\r\n\r\n  // DOMINO Changed the behavior to conform with the specs. See:\r\n  // https://groups.google.com/d/topic/mozilla.dev.platform/77sIYcpdDmc/discussion\r\n  ensureSameDoc: { value: function(that) {\r\n    if (that.ownerDocument === null) {\r\n      that.ownerDocument = this.doc;\r\n    }\r\n    else if(that.ownerDocument !== this.doc) {\r\n      utils.WrongDocumentError();\r\n    }\r\n  }},\r\n\r\n  removeChildren: { value: utils.shouldOverride },\r\n\r\n  // Insert this node as a child of parent before the specified child,\r\n  // or insert as the last child of parent if specified child is null,\r\n  // or replace the specified child with this node, firing mutation events as\r\n  // necessary\r\n  _insertOrReplace: { value: function _insertOrReplace(parent, before, isReplace) {\r\n    var child = this, before_index, i;\r\n\r\n    if (child.nodeType === DOCUMENT_FRAGMENT_NODE && child.rooted) {\r\n      utils.HierarchyRequestError();\r\n    }\r\n\r\n    /* Ensure index of `before` is cached before we (possibly) remove it. */\r\n    if (parent._childNodes) {\r\n      before_index = (before === null) ? parent._childNodes.length :\r\n        before.index; /* ensure _index is cached */\r\n\r\n      // If we are already a child of the specified parent, then\r\n      // the index may have to be adjusted.\r\n      if (child.parentNode === parent) {\r\n        var child_index = child.index;\r\n        // If the child is before the spot it is to be inserted at,\r\n        // then when it is removed, the index of that spot will be\r\n        // reduced.\r\n        if (child_index < before_index) {\r\n          before_index--;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Delete the old child\r\n    if (isReplace) {\r\n      if (before.rooted) before.doc.mutateRemove(before);\r\n      before.parentNode = null;\r\n    }\r\n\r\n    var n = before;\r\n    if (n === null) { n = parent.firstChild; }\r\n\r\n    // If both the child and the parent are rooted, then we want to\r\n    // transplant the child without uprooting and rerooting it.\r\n    var bothRooted = child.rooted && parent.rooted;\r\n    if (child.nodeType === DOCUMENT_FRAGMENT_NODE) {\r\n      var spliceArgs = [0, isReplace ? 1 : 0], next;\r\n      for (var kid = child.firstChild; kid !== null; kid = next) {\r\n        next = kid.nextSibling;\r\n        spliceArgs.push(kid);\r\n        kid.parentNode = parent;\r\n      }\r\n      var len = spliceArgs.length;\r\n      // Add all nodes to the new parent, overwriting the old child\r\n      if (isReplace) {\r\n        LinkedList.replace(n, len > 2 ? spliceArgs[2] : null);\r\n      } else if (len > 2 && n !== null) {\r\n        LinkedList.insertBefore(spliceArgs[2], n);\r\n      }\r\n      if (parent._childNodes) {\r\n        spliceArgs[0] = (before === null) ?\r\n          parent._childNodes.length : before._index;\r\n        parent._childNodes.splice.apply(parent._childNodes, spliceArgs);\r\n        for (i=2; i<len; i++) {\r\n          spliceArgs[i]._index = spliceArgs[0] + (i - 2);\r\n        }\r\n      } else if (parent._firstChild === before) {\r\n        if (len > 2) {\r\n          parent._firstChild = spliceArgs[2];\r\n        } else if (isReplace) {\r\n          parent._firstChild = null;\r\n        }\r\n      }\r\n      // Remove all nodes from the document fragment\r\n      if (child._childNodes) {\r\n        child._childNodes.length = 0;\r\n      } else {\r\n        child._firstChild = null;\r\n      }\r\n      // Call the mutation handlers\r\n      // Use spliceArgs since the original array has been destroyed. The\r\n      // liveness guarantee requires us to clone the array so that\r\n      // references to the childNodes of the DocumentFragment will be empty\r\n      // when the insertion handlers are called.\r\n      if (parent.rooted) {\r\n        parent.modify();\r\n        for (i = 2; i < len; i++) {\r\n          parent.doc.mutateInsert(spliceArgs[i]);\r\n        }\r\n      }\r\n    } else {\r\n      if (before === child) { return; }\r\n      if (bothRooted) {\r\n        // Remove the child from its current position in the tree\r\n        // without calling remove(), since we don't want to uproot it.\r\n        child._remove();\r\n      } else if (child.parentNode) {\r\n        child.remove();\r\n      }\r\n\r\n      // Insert it as a child of its new parent\r\n      child.parentNode = parent;\r\n      if (isReplace) {\r\n        LinkedList.replace(n, child);\r\n        if (parent._childNodes) {\r\n          child._index = before_index;\r\n          parent._childNodes[before_index] = child;\r\n        } else if (parent._firstChild === before) {\r\n          parent._firstChild = child;\r\n        }\r\n      } else {\r\n        if (n !== null) {\r\n          LinkedList.insertBefore(child, n);\r\n        }\r\n        if (parent._childNodes) {\r\n          child._index = before_index;\r\n          parent._childNodes.splice(before_index, 0, child);\r\n        } else if (parent._firstChild === before) {\r\n          parent._firstChild = child;\r\n        }\r\n      }\r\n      if (bothRooted) {\r\n        parent.modify();\r\n        // Generate a move mutation event\r\n        parent.doc.mutateMove(child);\r\n      } else if (parent.rooted) {\r\n        parent.modify();\r\n        parent.doc.mutateInsert(child);\r\n      }\r\n    }\r\n  }},\r\n\r\n\r\n  // Return the lastModTime value for this node. (For use as a\r\n  // cache invalidation mechanism. If the node does not already\r\n  // have one, initialize it from the owner document's modclock\r\n  // property. (Note that modclock does not return the actual\r\n  // time; it is simply a counter incremented on each document\r\n  // modification)\r\n  lastModTime: { get: function() {\r\n    if (!this._lastModTime) {\r\n      this._lastModTime = this.doc.modclock;\r\n    }\r\n    return this._lastModTime;\r\n  }},\r\n\r\n  // Increment the owner document's modclock and use the new\r\n  // value to update the lastModTime value for this node and\r\n  // all of its ancestors. Nodes that have never had their\r\n  // lastModTime value queried do not need to have a\r\n  // lastModTime property set on them since there is no\r\n  // previously queried value to ever compare the new value\r\n  // against, so only update nodes that already have a\r\n  // _lastModTime property.\r\n  modify: { value: function() {\r\n    if (this.doc.modclock) { // Skip while doc.modclock == 0\r\n      var time = ++this.doc.modclock;\r\n      for(var n = this; n; n = n.parentElement) {\r\n        if (n._lastModTime) {\r\n          n._lastModTime = time;\r\n        }\r\n      }\r\n    }\r\n  }},\r\n\r\n  // This attribute is not part of the DOM but is quite helpful.\r\n  // It returns the document with which a node is associated.  Usually\r\n  // this is the ownerDocument. But ownerDocument is null for the\r\n  // document object itself, so this is a handy way to get the document\r\n  // regardless of the node type\r\n  doc: { get: function() {\r\n    return this.ownerDocument || this;\r\n  }},\r\n\r\n\r\n  // If the node has a nid (node id), then it is rooted in a document\r\n  rooted: { get: function() {\r\n    return !!this._nid;\r\n  }},\r\n\r\n  normalize: { value: function() {\r\n    var next;\r\n    for (var child=this.firstChild; child !== null; child=next) {\r\n      next = child.nextSibling;\r\n\r\n      if (child.normalize) {\r\n        child.normalize();\r\n      }\r\n\r\n      if (child.nodeType !== Node.TEXT_NODE) {\r\n        continue;\r\n      }\r\n\r\n      if (child.nodeValue === \"\") {\r\n        this.removeChild(child);\r\n        continue;\r\n      }\r\n\r\n      var prevChild = child.previousSibling;\r\n      if (prevChild === null) {\r\n        continue;\r\n      } else if (prevChild.nodeType === Node.TEXT_NODE) {\r\n        // merge this with previous and remove the child\r\n        prevChild.appendData(child.nodeValue);\r\n        this.removeChild(child);\r\n      }\r\n    }\r\n  }},\r\n\r\n  // Convert the children of a node to an HTML string.\r\n  // This is used by the innerHTML getter\r\n  // The serialization spec is at:\r\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#serializing-html-fragments\r\n  //\r\n  // The serialization logic is intentionally implemented in a separate\r\n  // `NodeUtils` helper instead of the more obvious choice of a private\r\n  // `_serializeOne()` method on the `Node.prototype` in order to avoid\r\n  // the megamorphic `this._serializeOne` property access, which reduces\r\n  // performance unnecessarily. If you need specialized behavior for a\r\n  // certain subclass, you'll need to implement that in `NodeUtils`.\r\n  // See https://github.com/fgnass/domino/pull/142 for more information.\r\n  serialize: { value: function() {\r\n    if (this._innerHTML) {\r\n      return this._innerHTML;\r\n    }\r\n    var s = '';\r\n    for (var kid = this.firstChild; kid !== null; kid = kid.nextSibling) {\r\n      s += NodeUtils.serializeOne(kid, this);\r\n    }\r\n    return s;\r\n  }},\r\n\r\n  // Non-standard, but often useful for debugging.\r\n  outerHTML: {\r\n    get: function() {\r\n      return NodeUtils.serializeOne(this, { nodeType: 0 });\r\n    },\r\n    set: utils.nyi,\r\n  },\r\n\r\n  // mirror node type properties in the prototype, so they are present\r\n  // in instances of Node (and subclasses)\r\n  ELEMENT_NODE:                { value: ELEMENT_NODE },\r\n  ATTRIBUTE_NODE:              { value: ATTRIBUTE_NODE },\r\n  TEXT_NODE:                   { value: TEXT_NODE },\r\n  CDATA_SECTION_NODE:          { value: CDATA_SECTION_NODE },\r\n  ENTITY_REFERENCE_NODE:       { value: ENTITY_REFERENCE_NODE },\r\n  ENTITY_NODE:                 { value: ENTITY_NODE },\r\n  PROCESSING_INSTRUCTION_NODE: { value: PROCESSING_INSTRUCTION_NODE },\r\n  COMMENT_NODE:                { value: COMMENT_NODE },\r\n  DOCUMENT_NODE:               { value: DOCUMENT_NODE },\r\n  DOCUMENT_TYPE_NODE:          { value: DOCUMENT_TYPE_NODE },\r\n  DOCUMENT_FRAGMENT_NODE:      { value: DOCUMENT_FRAGMENT_NODE },\r\n  NOTATION_NODE:               { value: NOTATION_NODE },\r\n\r\n  DOCUMENT_POSITION_DISCONNECTED: { value: DOCUMENT_POSITION_DISCONNECTED },\r\n  DOCUMENT_POSITION_PRECEDING:    { value: DOCUMENT_POSITION_PRECEDING },\r\n  DOCUMENT_POSITION_FOLLOWING:    { value: DOCUMENT_POSITION_FOLLOWING },\r\n  DOCUMENT_POSITION_CONTAINS:     { value: DOCUMENT_POSITION_CONTAINS },\r\n  DOCUMENT_POSITION_CONTAINED_BY: { value: DOCUMENT_POSITION_CONTAINED_BY },\r\n  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: { value: DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC },\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeFilter.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nvar NodeFilter = {\r\n  // Constants for acceptNode()\r\n  FILTER_ACCEPT: 1,\r\n  FILTER_REJECT: 2,\r\n  FILTER_SKIP: 3,\r\n\r\n  // Constants for whatToShow\r\n  SHOW_ALL: 0xFFFFFFFF,\r\n  SHOW_ELEMENT: 0x1,\r\n  SHOW_ATTRIBUTE: 0x2, // historical\r\n  SHOW_TEXT: 0x4,\r\n  SHOW_CDATA_SECTION: 0x8, // historical\r\n  SHOW_ENTITY_REFERENCE: 0x10, // historical\r\n  SHOW_ENTITY: 0x20, // historical\r\n  SHOW_PROCESSING_INSTRUCTION: 0x40,\r\n  SHOW_COMMENT: 0x80,\r\n  SHOW_DOCUMENT: 0x100,\r\n  SHOW_DOCUMENT_TYPE: 0x200,\r\n  SHOW_DOCUMENT_FRAGMENT: 0x400,\r\n  SHOW_NOTATION: 0x800 // historical\r\n};\r\n\r\nmodule.exports = (NodeFilter.constructor = NodeFilter.prototype = NodeFilter);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlRmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL05vZGVGaWx0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBOb2RlRmlsdGVyID0ge1xyXG4gIC8vIENvbnN0YW50cyBmb3IgYWNjZXB0Tm9kZSgpXHJcbiAgRklMVEVSX0FDQ0VQVDogMSxcclxuICBGSUxURVJfUkVKRUNUOiAyLFxyXG4gIEZJTFRFUl9TS0lQOiAzLFxyXG5cclxuICAvLyBDb25zdGFudHMgZm9yIHdoYXRUb1Nob3dcclxuICBTSE9XX0FMTDogMHhGRkZGRkZGRixcclxuICBTSE9XX0VMRU1FTlQ6IDB4MSxcclxuICBTSE9XX0FUVFJJQlVURTogMHgyLCAvLyBoaXN0b3JpY2FsXHJcbiAgU0hPV19URVhUOiAweDQsXHJcbiAgU0hPV19DREFUQV9TRUNUSU9OOiAweDgsIC8vIGhpc3RvcmljYWxcclxuICBTSE9XX0VOVElUWV9SRUZFUkVOQ0U6IDB4MTAsIC8vIGhpc3RvcmljYWxcclxuICBTSE9XX0VOVElUWTogMHgyMCwgLy8gaGlzdG9yaWNhbFxyXG4gIFNIT1dfUFJPQ0VTU0lOR19JTlNUUlVDVElPTjogMHg0MCxcclxuICBTSE9XX0NPTU1FTlQ6IDB4ODAsXHJcbiAgU0hPV19ET0NVTUVOVDogMHgxMDAsXHJcbiAgU0hPV19ET0NVTUVOVF9UWVBFOiAweDIwMCxcclxuICBTSE9XX0RPQ1VNRU5UX0ZSQUdNRU5UOiAweDQwMCxcclxuICBTSE9XX05PVEFUSU9OOiAweDgwMCAvLyBoaXN0b3JpY2FsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IChOb2RlRmlsdGVyLmNvbnN0cnVjdG9yID0gTm9kZUZpbHRlci5wcm90b3R5cGUgPSBOb2RlRmlsdGVyKTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeIterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeIterator.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = NodeIterator;\r\n\r\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js\");\r\nvar NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeTraversal.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\n/* Private methods and helpers */\r\n\r\n/**\r\n * @based on WebKit's NodeIterator::moveToNext and NodeIterator::moveToPrevious\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeIterator.cpp?rev=186279#L51\r\n */\r\nfunction move(node, stayWithin, directionIsNext) {\r\n  if (directionIsNext) {\r\n    return NodeTraversal.next(node, stayWithin);\r\n  } else {\r\n    if (node === stayWithin) {\r\n      return null;\r\n    }\r\n    return NodeTraversal.previous(node, null);\r\n  }\r\n}\r\n\r\nfunction isInclusiveAncestor(node, possibleChild) {\r\n  for ( ; possibleChild; possibleChild = possibleChild.parentNode) {\r\n    if (node === possibleChild) { return true; }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @spec http://www.w3.org/TR/dom/#concept-nodeiterator-traverse\r\n * @method\r\n * @access private\r\n * @param {NodeIterator} ni\r\n * @param {string} direction One of 'next' or 'previous'.\r\n * @return {Node|null}\r\n */\r\nfunction traverse(ni, directionIsNext) {\r\n  var node, beforeNode;\r\n  node = ni._referenceNode;\r\n  beforeNode = ni._pointerBeforeReferenceNode;\r\n  while (true) {\r\n    if (beforeNode === directionIsNext) {\r\n      beforeNode = !beforeNode;\r\n    } else {\r\n      node = move(node, ni._root, directionIsNext);\r\n      if (node === null) {\r\n        return null;\r\n      }\r\n    }\r\n    var result = ni._internalFilter(node);\r\n    if (result === NodeFilter.FILTER_ACCEPT) {\r\n      break;\r\n    }\r\n  }\r\n  ni._referenceNode = node;\r\n  ni._pointerBeforeReferenceNode = beforeNode;\r\n  return node;\r\n}\r\n\r\n/* Public API */\r\n\r\n/**\r\n * Implemented version: http://www.w3.org/TR/2015/WD-dom-20150618/#nodeiterator\r\n * Latest version: http://www.w3.org/TR/dom/#nodeiterator\r\n *\r\n * @constructor\r\n * @param {Node} root\r\n * @param {number} whatToShow [optional]\r\n * @param {Function|NodeFilter} filter [optional]\r\n * @throws Error\r\n */\r\nfunction NodeIterator(root, whatToShow, filter) {\r\n  if (!root || !root.nodeType) {\r\n    utils.NotSupportedError();\r\n  }\r\n\r\n  // Read-only properties\r\n  this._root = root;\r\n  this._referenceNode = root;\r\n  this._pointerBeforeReferenceNode = true;\r\n  this._whatToShow = Number(whatToShow) || 0;\r\n  this._filter = filter || null;\r\n  this._active = false;\r\n  // Record active node iterators in the document, in order to perform\r\n  // \"node iterator pre-removal steps\".\r\n  root.doc._attachNodeIterator(this);\r\n}\r\n\r\nObject.defineProperties(NodeIterator.prototype, {\r\n  root: { get: function root() {\r\n    return this._root;\r\n  } },\r\n  referenceNode: { get: function referenceNode() {\r\n    return this._referenceNode;\r\n  } },\r\n  pointerBeforeReferenceNode: { get: function pointerBeforeReferenceNode() {\r\n    return this._pointerBeforeReferenceNode;\r\n  } },\r\n  whatToShow: { get: function whatToShow() {\r\n    return this._whatToShow;\r\n  } },\r\n  filter: { get: function filter() {\r\n    return this._filter;\r\n  } },\r\n\r\n  /**\r\n   * @method\r\n   * @param {Node} node\r\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\r\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\r\n   */\r\n  _internalFilter: { value: function _internalFilter(node) {\r\n    /* jshint bitwise: false */\r\n    var result, filter;\r\n    if (this._active) {\r\n      utils.InvalidStateError();\r\n    }\r\n\r\n    // Maps nodeType to whatToShow\r\n    if (!(((1 << (node.nodeType - 1)) & this._whatToShow))) {\r\n      return NodeFilter.FILTER_SKIP;\r\n    }\r\n\r\n    filter = this._filter;\r\n    if (filter === null) {\r\n      result = NodeFilter.FILTER_ACCEPT;\r\n    } else {\r\n      this._active = true;\r\n      try {\r\n        if (typeof filter === 'function') {\r\n          result = filter(node);\r\n        } else {\r\n          result = filter.acceptNode(node);\r\n        }\r\n      } finally {\r\n        this._active = false;\r\n      }\r\n    }\r\n\r\n    // Note that coercing to a number means that\r\n    //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\r\n    //  `false` becomes `0` (neither accept, reject, or skip)\r\n    return (+result);\r\n  } },\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#nodeiterator-pre-removing-steps\r\n   * @method\r\n   * @return void\r\n   */\r\n  _preremove: { value: function _preremove(toBeRemovedNode) {\r\n    if (isInclusiveAncestor(toBeRemovedNode, this._root)) { return; }\r\n    if (!isInclusiveAncestor(toBeRemovedNode, this._referenceNode)) { return; }\r\n    if (this._pointerBeforeReferenceNode) {\r\n      var next = toBeRemovedNode;\r\n      while (next.lastChild) {\r\n        next = next.lastChild;\r\n      }\r\n      next = NodeTraversal.next(next, this.root);\r\n      if (next) {\r\n        this._referenceNode = next;\r\n        return;\r\n      }\r\n      this._pointerBeforeReferenceNode = false;\r\n      // fall through\r\n    }\r\n    if (toBeRemovedNode.previousSibling === null) {\r\n      this._referenceNode = toBeRemovedNode.parentNode;\r\n    } else {\r\n      this._referenceNode = toBeRemovedNode.previousSibling;\r\n      var lastChild;\r\n      for (lastChild = this._referenceNode.lastChild;\r\n           lastChild;\r\n           lastChild = this._referenceNode.lastChild) {\r\n        this._referenceNode = lastChild;\r\n      }\r\n    }\r\n  } },\r\n\r\n  /**\r\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-nextnode\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  nextNode: { value: function nextNode() {\r\n    return traverse(this, true);\r\n  } },\r\n\r\n  /**\r\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-previousnode\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  previousNode: { value: function previousNode() {\r\n    return traverse(this, false);\r\n  } },\r\n\r\n  /**\r\n   * @spec http://www.w3.org/TR/dom/#dom-nodeiterator-detach\r\n   * @method\r\n   * @return void\r\n   */\r\n  detach: { value: function detach() {\r\n    /* \"The detach() method must do nothing.\r\n     * Its functionality (disabling a NodeIterator object) was removed,\r\n     * but the method itself is preserved for compatibility.\r\n     */\r\n  } },\r\n\r\n  /** For compatibility with web-platform-tests. */\r\n  toString: { value: function toString() {\r\n    return \"[object NodeIterator]\";\r\n  } },\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeIterator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es5.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeList.es5.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n// No support for subclassing array, return an actual Array object.\r\nfunction item(i) {\r\n    /* jshint validthis: true */\r\n    return this[i] || null;\r\n}\r\n\r\nfunction NodeList(a) {\r\n    if (!a) a = [];\r\n    a.item = item;\r\n    return a;\r\n}\r\n\r\nmodule.exports = NodeList;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlTGlzdC5lczUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvTm9kZUxpc3QuZXM1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gTm8gc3VwcG9ydCBmb3Igc3ViY2xhc3NpbmcgYXJyYXksIHJldHVybiBhbiBhY3R1YWwgQXJyYXkgb2JqZWN0LlxyXG5mdW5jdGlvbiBpdGVtKGkpIHtcclxuICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cclxuICAgIHJldHVybiB0aGlzW2ldIHx8IG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5vZGVMaXN0KGEpIHtcclxuICAgIGlmICghYSkgYSA9IFtdO1xyXG4gICAgYS5pdGVtID0gaXRlbTtcclxuICAgIHJldHVybiBhO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVMaXN0O1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es6.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeList.es6.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("/* jshint esversion: 6 */\r\n\r\n\r\nmodule.exports = class NodeList extends Array {\r\n    constructor(a) {\r\n        super((a && a.length) || 0);\r\n        if (a) {\r\n            for (var idx in a) { this[idx] = a[idx]; }\r\n        }\r\n    }\r\n    item(i) { return this[i] || null; }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlTGlzdC5lczYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL05vZGVMaXN0LmVzNi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBqc2hpbnQgZXN2ZXJzaW9uOiA2ICovXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBOb2RlTGlzdCBleHRlbmRzIEFycmF5IHtcclxuICAgIGNvbnN0cnVjdG9yKGEpIHtcclxuICAgICAgICBzdXBlcigoYSAmJiBhLmxlbmd0aCkgfHwgMCk7XHJcbiAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaWR4IGluIGEpIHsgdGhpc1tpZHhdID0gYVtpZHhdOyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaXRlbShpKSB7IHJldHVybiB0aGlzW2ldIHx8IG51bGw7IH1cclxufTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeList.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\nvar NodeList;\r\n\r\ntry {\r\n    // Attempt to use ES6-style Array subclass if possible.\r\n    NodeList = __webpack_require__(/*! ./NodeList.es6.js */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es6.js\");\r\n} catch (e) {\r\n    // No support for subclassing array, return an actual Array object.\r\n    NodeList = __webpack_require__(/*! ./NodeList.es5.js */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.es5.js\");\r\n}\r\n\r\nmodule.exports = NodeList;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlTGlzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsc0ZBQW1CO0FBQzFDLEVBQUU7QUFDRjtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxzRkFBbUI7QUFDMUM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvTm9kZUxpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgTm9kZUxpc3Q7XHJcblxyXG50cnkge1xyXG4gICAgLy8gQXR0ZW1wdCB0byB1c2UgRVM2LXN0eWxlIEFycmF5IHN1YmNsYXNzIGlmIHBvc3NpYmxlLlxyXG4gICAgTm9kZUxpc3QgPSByZXF1aXJlKCcuL05vZGVMaXN0LmVzNi5qcycpO1xyXG59IGNhdGNoIChlKSB7XHJcbiAgICAvLyBObyBzdXBwb3J0IGZvciBzdWJjbGFzc2luZyBhcnJheSwgcmV0dXJuIGFuIGFjdHVhbCBBcnJheSBvYmplY3QuXHJcbiAgICBOb2RlTGlzdCA9IHJlcXVpcmUoJy4vTm9kZUxpc3QuZXM1LmpzJyk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTm9kZUxpc3Q7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeTraversal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeTraversal.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n/* exported NodeTraversal */\r\nvar NodeTraversal = module.exports = {\r\n  nextSkippingChildren: nextSkippingChildren,\r\n  nextAncestorSibling: nextAncestorSibling,\r\n  next: next,\r\n  previous: previous,\r\n  deepLastChild: deepLastChild\r\n};\r\n\r\n/**\r\n * @based on WebKit's NodeTraversal::nextSkippingChildren\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L109\r\n */\r\nfunction nextSkippingChildren(node, stayWithin) {\r\n  if (node === stayWithin) {\r\n    return null;\r\n  }\r\n  if (node.nextSibling !== null) {\r\n    return node.nextSibling;\r\n  }\r\n  return nextAncestorSibling(node, stayWithin);\r\n}\r\n\r\n/**\r\n * @based on WebKit's NodeTraversal::nextAncestorSibling\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L93\r\n */\r\nfunction nextAncestorSibling(node, stayWithin) {\r\n  for (node = node.parentNode; node !== null; node = node.parentNode) {\r\n    if (node === stayWithin) {\r\n      return null;\r\n    }\r\n    if (node.nextSibling !== null) {\r\n      return node.nextSibling;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @based on WebKit's NodeTraversal::next\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L99\r\n */\r\nfunction next(node, stayWithin) {\r\n  var n;\r\n  n = node.firstChild;\r\n  if (n !== null) {\r\n    return n;\r\n  }\r\n  if (node === stayWithin) {\r\n    return null;\r\n  }\r\n  n = node.nextSibling;\r\n  if (n !== null) {\r\n    return n;\r\n  }\r\n  return nextAncestorSibling(node, stayWithin);\r\n}\r\n\r\n/**\r\n * @based on WebKit's NodeTraversal::deepLastChild\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.cpp?rev=179143#L116\r\n */\r\nfunction deepLastChild(node) {\r\n  while (node.lastChild) {\r\n    node = node.lastChild;\r\n  }\r\n  return node;\r\n}\r\n\r\n/**\r\n * @based on WebKit's NodeTraversal::previous\r\n * https://trac.webkit.org/browser/trunk/Source/WebCore/dom/NodeTraversal.h?rev=179143#L121\r\n */\r\nfunction previous(node, stayWithin) {\r\n  var p;\r\n  p = node.previousSibling;\r\n  if (p !== null) {\r\n    return deepLastChild(p);\r\n  }\r\n  p = node.parentNode;\r\n  if (p === stayWithin) {\r\n    return null;\r\n  }\r\n  return p;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlVHJhdmVyc2FsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZUFBZTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob2RlVHJhdmVyc2FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKiBleHBvcnRlZCBOb2RlVHJhdmVyc2FsICovXHJcbnZhciBOb2RlVHJhdmVyc2FsID0gbW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgbmV4dFNraXBwaW5nQ2hpbGRyZW46IG5leHRTa2lwcGluZ0NoaWxkcmVuLFxyXG4gIG5leHRBbmNlc3RvclNpYmxpbmc6IG5leHRBbmNlc3RvclNpYmxpbmcsXHJcbiAgbmV4dDogbmV4dCxcclxuICBwcmV2aW91czogcHJldmlvdXMsXHJcbiAgZGVlcExhc3RDaGlsZDogZGVlcExhc3RDaGlsZFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBiYXNlZCBvbiBXZWJLaXQncyBOb2RlVHJhdmVyc2FsOjpuZXh0U2tpcHBpbmdDaGlsZHJlblxyXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmg/cmV2PTE3OTE0MyNMMTA5XHJcbiAqL1xyXG5mdW5jdGlvbiBuZXh0U2tpcHBpbmdDaGlsZHJlbihub2RlLCBzdGF5V2l0aGluKSB7XHJcbiAgaWYgKG5vZGUgPT09IHN0YXlXaXRoaW4pIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBpZiAobm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgfVxyXG4gIHJldHVybiBuZXh0QW5jZXN0b3JTaWJsaW5nKG5vZGUsIHN0YXlXaXRoaW4pO1xyXG59XHJcblxyXG4vKipcclxuICogQGJhc2VkIG9uIFdlYktpdCdzIE5vZGVUcmF2ZXJzYWw6Om5leHRBbmNlc3RvclNpYmxpbmdcclxuICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vTm9kZVRyYXZlcnNhbC5jcHA/cmV2PTE3OTE0MyNMOTNcclxuICovXHJcbmZ1bmN0aW9uIG5leHRBbmNlc3RvclNpYmxpbmcobm9kZSwgc3RheVdpdGhpbikge1xyXG4gIGZvciAobm9kZSA9IG5vZGUucGFyZW50Tm9kZTsgbm9kZSAhPT0gbnVsbDsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgaWYgKG5vZGUgPT09IHN0YXlXaXRoaW4pIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6bmV4dFxyXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmg/cmV2PTE3OTE0MyNMOTlcclxuICovXHJcbmZ1bmN0aW9uIG5leHQobm9kZSwgc3RheVdpdGhpbikge1xyXG4gIHZhciBuO1xyXG4gIG4gPSBub2RlLmZpcnN0Q2hpbGQ7XHJcbiAgaWYgKG4gIT09IG51bGwpIHtcclxuICAgIHJldHVybiBuO1xyXG4gIH1cclxuICBpZiAobm9kZSA9PT0gc3RheVdpdGhpbikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIG4gPSBub2RlLm5leHRTaWJsaW5nO1xyXG4gIGlmIChuICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbjtcclxuICB9XHJcbiAgcmV0dXJuIG5leHRBbmNlc3RvclNpYmxpbmcobm9kZSwgc3RheVdpdGhpbik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYmFzZWQgb24gV2ViS2l0J3MgTm9kZVRyYXZlcnNhbDo6ZGVlcExhc3RDaGlsZFxyXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmNwcD9yZXY9MTc5MTQzI0wxMTZcclxuICovXHJcbmZ1bmN0aW9uIGRlZXBMYXN0Q2hpbGQobm9kZSkge1xyXG4gIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xyXG4gICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xyXG4gIH1cclxuICByZXR1cm4gbm9kZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBiYXNlZCBvbiBXZWJLaXQncyBOb2RlVHJhdmVyc2FsOjpwcmV2aW91c1xyXG4gKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3RydW5rL1NvdXJjZS9XZWJDb3JlL2RvbS9Ob2RlVHJhdmVyc2FsLmg/cmV2PTE3OTE0MyNMMTIxXHJcbiAqL1xyXG5mdW5jdGlvbiBwcmV2aW91cyhub2RlLCBzdGF5V2l0aGluKSB7XHJcbiAgdmFyIHA7XHJcbiAgcCA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gIGlmIChwICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZGVlcExhc3RDaGlsZChwKTtcclxuICB9XHJcbiAgcCA9IG5vZGUucGFyZW50Tm9kZTtcclxuICBpZiAocCA9PT0gc3RheVdpdGhpbikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIHJldHVybiBwO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeTraversal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NodeUtils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NodeUtils.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = {\r\n  // NOTE: The `serializeOne()` function used to live on the `Node.prototype`\r\n  // as a private method `Node#_serializeOne(child)`, however that requires\r\n  // a megamorphic property access `this._serializeOne` just to get to the\r\n  // method, and this is being done on lots of different `Node` subclasses,\r\n  // which puts a lot of pressure on V8's megamorphic stub cache. So by\r\n  // moving the helper off of the `Node.prototype` and into a separate\r\n  // function in this helper module, we get a monomorphic property access\r\n  // `NodeUtils.serializeOne` to get to the function and reduce pressure\r\n  // on the megamorphic stub cache.\r\n  // See https://github.com/fgnass/domino/pull/142 for more information.\r\n  serializeOne: serializeOne,\r\n\r\n  // Export util functions so that we can run extra test for them.\r\n  // Note: we prefix function names with `ɵ`, similar to what we do\r\n  // with internal functions in Angular packages.\r\n  ɵescapeMatchingClosingTag: escapeMatchingClosingTag,\r\n  ɵescapeClosingCommentTag: escapeClosingCommentTag,\r\n  ɵescapeProcessingInstructionContent: escapeProcessingInstructionContent\r\n};\r\n\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar NAMESPACE = utils.NAMESPACE;\r\n\r\nvar hasRawContent = {\r\n  STYLE: true,\r\n  SCRIPT: true,\r\n  XMP: true,\r\n  IFRAME: true,\r\n  NOEMBED: true,\r\n  NOFRAMES: true,\r\n  PLAINTEXT: true\r\n};\r\n\r\nvar emptyElements = {\r\n  area: true,\r\n  base: true,\r\n  basefont: true,\r\n  bgsound: true,\r\n  br: true,\r\n  col: true,\r\n  embed: true,\r\n  frame: true,\r\n  hr: true,\r\n  img: true,\r\n  input: true,\r\n  keygen: true,\r\n  link: true,\r\n  meta: true,\r\n  param: true,\r\n  source: true,\r\n  track: true,\r\n  wbr: true\r\n};\r\n\r\nvar extraNewLine = {\r\n  /* Removed in https://github.com/whatwg/html/issues/944\r\n  pre: true,\r\n  textarea: true,\r\n  listing: true\r\n  */\r\n};\r\n\r\nconst ESCAPE_REGEXP = /[&<>\\u00A0]/g;\r\nconst ESCAPE_ATTR_REGEXP = /[&\"<>\\u00A0]/g;\r\n\r\nfunction escape(s) {\r\n  if (!ESCAPE_REGEXP.test(s)) {\r\n    // nothing to do, fast path\r\n    return s;\r\n  }\r\n\r\n  return s.replace(ESCAPE_REGEXP, (c) => {\r\n    switch (c) {\r\n      case \"&\":\r\n        return \"&amp;\";\r\n      case \"<\":\r\n        return \"&lt;\";\r\n      case \">\":\r\n        return \"&gt;\";\r\n      case \"\\u00A0\":\r\n        return \"&nbsp;\";\r\n    }\r\n  });\r\n}\r\n\r\nfunction escapeAttr(s) {\r\n  if (!ESCAPE_ATTR_REGEXP.test(s)) {\r\n    // nothing to do, fast path\r\n    return s;\r\n  }\r\n\r\n  return s.replace(ESCAPE_ATTR_REGEXP, (c) => {\r\n    switch (c) {\r\n      case \"<\":\r\n        return \"&lt;\";\r\n      case \">\":\r\n        return \"&gt;\";\r\n      case \"&\":\r\n        return \"&amp;\";\r\n      case '\"':\r\n        return \"&quot;\";\r\n      case \"\\u00A0\":\r\n        return \"&nbsp;\";\r\n    }\r\n  });\r\n}\r\n\r\nfunction attrname(a) {\r\n  var ns = a.namespaceURI;\r\n  if (!ns)\r\n    return a.localName;\r\n  if (ns === NAMESPACE.XML)\r\n    return 'xml:' + a.localName;\r\n  if (ns === NAMESPACE.XLINK)\r\n    return 'xlink:' + a.localName;\r\n\r\n  if (ns === NAMESPACE.XMLNS) {\r\n    if (a.localName === 'xmlns') return 'xmlns';\r\n    else return 'xmlns:' + a.localName;\r\n  }\r\n  return a.name;\r\n}\r\n\r\n/**\r\n * Escapes matching closing tag in a raw text.\r\n *\r\n * For example, given `<style>#text(</style><script></script>)</style>`,\r\n * the parent tag would by \"style\" and the raw text is\r\n * \"</style><script></script>\". If we come across a matching closing tag\r\n * (in out case `</style>`) - replace `<` with `&lt;` to avoid unexpected\r\n * and unsafe behavior after de-serialization.\r\n */\r\nfunction escapeMatchingClosingTag(rawText, parentTag) {\r\n  const parentClosingTag = '</' + parentTag;\r\n  if (!rawText.toLowerCase().includes(parentClosingTag)) {\r\n    return rawText; // fast path\r\n  }\r\n  const result = [...rawText];\r\n  const matches = rawText.matchAll(new RegExp(parentClosingTag, 'ig'));\r\n  for (const match of matches) {\r\n    result[match.index] = '&lt;';\r\n  }\r\n  return result.join('');\r\n}\r\n\r\nconst CLOSING_COMMENT_REGEXP = /--!?>/;\r\n\r\n/**\r\n * Escapes closing comment tag in a comment content.\r\n *\r\n * For example, given `#comment('-->')`, the content of a comment would be\r\n * updated to `--&gt;` to avoid unexpected and unsafe behavior after\r\n * de-serialization.\r\n */\r\nfunction escapeClosingCommentTag(rawContent) {\r\n  if (!CLOSING_COMMENT_REGEXP.test(rawContent)) {\r\n    return rawContent; // fast path\r\n  }\r\n  return rawContent.replace(/(--\\!?)>/g, '$1&gt;');\r\n}\r\n\r\n/**\r\n * Escapes processing instruction content by replacing `>` with `&gt`.\r\n */\r\nfunction escapeProcessingInstructionContent(rawContent) {\r\n  return rawContent.includes('>')\r\n    ? rawContent.replaceAll('>', '&gt;')\r\n    : rawContent;\r\n}\r\n\r\nfunction serializeOne(kid, parent) {\r\n  var s = '';\r\n  switch(kid.nodeType) {\r\n    case 1: //ELEMENT_NODE\r\n      var ns = kid.namespaceURI;\r\n      var html = ns === NAMESPACE.HTML;\r\n      var tagname = (html || ns === NAMESPACE.SVG || ns === NAMESPACE.MATHML) ? kid.localName : kid.tagName;\r\n\r\n      s += '<' + tagname;\r\n\r\n      for(var j = 0, k = kid._numattrs; j < k; j++) {\r\n        var a = kid._attr(j);\r\n        s += ' ' + attrname(a);\r\n        if (a.value !== undefined) s += '=\"' + escapeAttr(a.value) + '\"';\r\n      }\r\n      s += '>';\r\n\r\n      if (!(html && emptyElements[tagname])) {\r\n        var ss = kid.serialize();\r\n        // If an element can have raw content, this content may\r\n        // potentially require escaping to avoid XSS.\r\n        if (hasRawContent[tagname.toUpperCase()]) {\r\n          ss = escapeMatchingClosingTag(ss, tagname);\r\n        }\r\n        if (html && extraNewLine[tagname] && ss.charAt(0)==='\\n') s += '\\n';\r\n        // Serialize children and add end tag for all others\r\n        s += ss;\r\n        s += '</' + tagname + '>';\r\n      }\r\n      break;\r\n    case 3: //TEXT_NODE\r\n    case 4: //CDATA_SECTION_NODE\r\n      var parenttag;\r\n      if (parent.nodeType === 1 /*ELEMENT_NODE*/ &&\r\n        parent.namespaceURI === NAMESPACE.HTML)\r\n        parenttag = parent.tagName;\r\n      else\r\n        parenttag = '';\r\n\r\n      if (hasRawContent[parenttag] ||\r\n          (parenttag==='NOSCRIPT' && parent.ownerDocument._scripting_enabled)) {\r\n        s += kid.data;\r\n      } else {\r\n        s += escape(kid.data);\r\n      }\r\n      break;\r\n    case 8: //COMMENT_NODE\r\n      s += '<!--' + escapeClosingCommentTag(kid.data) + '-->';\r\n      break;\r\n    case 7: //PROCESSING_INSTRUCTION_NODE\r\n      const content = escapeProcessingInstructionContent(kid.data);\r\n      s += '<?' + kid.target + ' ' + content + '?>';\r\n      break;\r\n    case 10: //DOCUMENT_TYPE_NODE\r\n      s += '<!DOCTYPE ' + kid.name;\r\n\r\n      if (false) {}\r\n\r\n      s += '>';\r\n      break;\r\n    default:\r\n      utils.InvalidStateError();\r\n  }\r\n  return s;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NodeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/NonDocumentTypeChildNode.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/NonDocumentTypeChildNode.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\n\r\nvar NonDocumentTypeChildNode = {\r\n\r\n  nextElementSibling: { get: function() {\r\n    if (this.parentNode) {\r\n      for (var kid = this.nextSibling; kid !== null; kid = kid.nextSibling) {\r\n        if (kid.nodeType === Node.ELEMENT_NODE) return kid;\r\n      }\r\n    }\r\n    return null;\r\n  }},\r\n\r\n  previousElementSibling: { get: function() {\r\n    if (this.parentNode) {\r\n      for (var kid = this.previousSibling; kid !== null; kid = kid.previousSibling) {\r\n        if (kid.nodeType === Node.ELEMENT_NODE) return kid;\r\n      }\r\n    }\r\n    return null;\r\n  }}\r\n\r\n};\r\n\r\nmodule.exports = NonDocumentTypeChildNode;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixXQUFXLG1CQUFPLENBQUMsbUVBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsdUNBQXVDLGNBQWM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSwyQ0FBMkMsY0FBYztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Ob25Eb2N1bWVudFR5cGVDaGlsZE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcblxyXG52YXIgTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlID0ge1xyXG5cclxuICBuZXh0RWxlbWVudFNpYmxpbmc6IHsgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcclxuICAgICAgZm9yICh2YXIga2lkID0gdGhpcy5uZXh0U2libGluZzsga2lkICE9PSBudWxsOyBraWQgPSBraWQubmV4dFNpYmxpbmcpIHtcclxuICAgICAgICBpZiAoa2lkLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkgcmV0dXJuIGtpZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfX0sXHJcblxyXG4gIHByZXZpb3VzRWxlbWVudFNpYmxpbmc6IHsgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgIGlmICh0aGlzLnBhcmVudE5vZGUpIHtcclxuICAgICAgZm9yICh2YXIga2lkID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7IGtpZCAhPT0gbnVsbDsga2lkID0ga2lkLnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgIGlmIChraWQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSByZXR1cm4ga2lkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9fVxyXG5cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTm9uRG9jdW1lbnRUeXBlQ2hpbGROb2RlO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/NonDocumentTypeChildNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/ProcessingInstruction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/ProcessingInstruction.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = ProcessingInstruction;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js\");\r\n\r\nfunction ProcessingInstruction(doc, target, data) {\r\n  CharacterData.call(this);\r\n  this.nodeType = Node.PROCESSING_INSTRUCTION_NODE;\r\n  this.ownerDocument = doc;\r\n  this.target = target;\r\n  this._data = data;\r\n}\r\n\r\nvar nodeValue = {\r\n  get: function() { return this._data; },\r\n  set: function(v) {\r\n    if (v === null || v === undefined) { v = ''; } else { v = String(v); }\r\n    this._data = v;\r\n    if (this.rooted) this.ownerDocument.mutateValue(this);\r\n  }\r\n};\r\n\r\nProcessingInstruction.prototype = Object.create(CharacterData.prototype, {\r\n  nodeName: { get: function() { return this.target; }},\r\n  nodeValue: nodeValue,\r\n  textContent: nodeValue,\r\n  innerText: nodeValue,\r\n  data: {\r\n    get: nodeValue.get,\r\n    set: function(v) {\r\n      nodeValue.set.call(this, v===null ? '' : String(v));\r\n    },\r\n  },\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n      return new ProcessingInstruction(this.ownerDocument, this.target, this._data);\r\n  }},\r\n  isEqual: { value: function isEqual(n) {\r\n      return this.target === n.target && this._data === n._data;\r\n  }}\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG1FQUFRO0FBQzNCLG9CQUFvQixtQkFBTyxDQUFDLHFGQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQSx5Q0FBeUMsVUFBVSxPQUFPO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCLHNCQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLElBQUk7QUFDSixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XHJcblxyXG52YXIgTm9kZSA9IHJlcXVpcmUoJy4vTm9kZScpO1xyXG52YXIgQ2hhcmFjdGVyRGF0YSA9IHJlcXVpcmUoJy4vQ2hhcmFjdGVyRGF0YScpO1xyXG5cclxuZnVuY3Rpb24gUHJvY2Vzc2luZ0luc3RydWN0aW9uKGRvYywgdGFyZ2V0LCBkYXRhKSB7XHJcbiAgQ2hhcmFjdGVyRGF0YS5jYWxsKHRoaXMpO1xyXG4gIHRoaXMubm9kZVR5cGUgPSBOb2RlLlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTtcclxuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBkb2M7XHJcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbn1cclxuXHJcbnZhciBub2RlVmFsdWUgPSB7XHJcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2RhdGE7IH0sXHJcbiAgc2V0OiBmdW5jdGlvbih2KSB7XHJcbiAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQpIHsgdiA9ICcnOyB9IGVsc2UgeyB2ID0gU3RyaW5nKHYpOyB9XHJcbiAgICB0aGlzLl9kYXRhID0gdjtcclxuICAgIGlmICh0aGlzLnJvb3RlZCkgdGhpcy5vd25lckRvY3VtZW50Lm11dGF0ZVZhbHVlKHRoaXMpO1xyXG4gIH1cclxufTtcclxuXHJcblByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCB7XHJcbiAgbm9kZU5hbWU6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMudGFyZ2V0OyB9fSxcclxuICBub2RlVmFsdWU6IG5vZGVWYWx1ZSxcclxuICB0ZXh0Q29udGVudDogbm9kZVZhbHVlLFxyXG4gIGlubmVyVGV4dDogbm9kZVZhbHVlLFxyXG4gIGRhdGE6IHtcclxuICAgIGdldDogbm9kZVZhbHVlLmdldCxcclxuICAgIHNldDogZnVuY3Rpb24odikge1xyXG4gICAgICBub2RlVmFsdWUuc2V0LmNhbGwodGhpcywgdj09PW51bGwgPyAnJyA6IFN0cmluZyh2KSk7XHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xyXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odGhpcy5vd25lckRvY3VtZW50LCB0aGlzLnRhcmdldCwgdGhpcy5fZGF0YSk7XHJcbiAgfX0sXHJcbiAgaXNFcXVhbDogeyB2YWx1ZTogZnVuY3Rpb24gaXNFcXVhbChuKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRhcmdldCA9PT0gbi50YXJnZXQgJiYgdGhpcy5fZGF0YSA9PT0gbi5fZGF0YTtcclxuICB9fVxyXG5cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/ProcessingInstruction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Text.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Text.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = Text;\r\n\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar CharacterData = __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js\");\r\n\r\nfunction Text(doc, data) {\r\n  CharacterData.call(this);\r\n  this.nodeType = Node.TEXT_NODE;\r\n  this.ownerDocument = doc;\r\n  this._data = data;\r\n  this._index = undefined;\r\n}\r\n\r\nvar nodeValue = {\r\n  get: function() { return this._data; },\r\n  set: function(v) {\r\n    if (v === null || v === undefined) { v = ''; } else { v = String(v); }\r\n    if (v === this._data) return;\r\n    this._data = v;\r\n    if (this.rooted)\r\n      this.ownerDocument.mutateValue(this);\r\n    if (this.parentNode &&\r\n      this.parentNode._textchangehook)\r\n      this.parentNode._textchangehook(this);\r\n  }\r\n};\r\n\r\nText.prototype = Object.create(CharacterData.prototype, {\r\n  nodeName: { value: \"#text\" },\r\n  // These three attributes are all the same.\r\n  // The data attribute has a [TreatNullAs=EmptyString] but we'll\r\n  // implement that at the interface level\r\n  nodeValue: nodeValue,\r\n  textContent: nodeValue,\r\n  innerText: nodeValue,\r\n  data: {\r\n    get: nodeValue.get,\r\n    set: function(v) {\r\n      nodeValue.set.call(this, v===null ? '' : String(v));\r\n    },\r\n  },\r\n\r\n  splitText: { value: function splitText(offset) {\r\n    if (offset > this._data.length || offset < 0) utils.IndexSizeError();\r\n\r\n    var newdata = this._data.substring(offset),\r\n      newnode = this.ownerDocument.createTextNode(newdata);\r\n    this.data = this.data.substring(0, offset);\r\n\r\n    var parent = this.parentNode;\r\n    if (parent !== null)\r\n      parent.insertBefore(newnode, this.nextSibling);\r\n\r\n    return newnode;\r\n  }},\r\n\r\n  wholeText: { get: function wholeText() {\r\n    var result = this.textContent;\r\n    for (var next = this.nextSibling; next; next = next.nextSibling) {\r\n      if (next.nodeType !== Node.TEXT_NODE) { break; }\r\n      result += next.textContent;\r\n    }\r\n    return result;\r\n  }},\r\n  // Obsolete, removed from spec.\r\n  replaceWholeText: { value: utils.nyi },\r\n\r\n  // Utility methods\r\n  clone: { value: function clone() {\r\n    return new Text(this.ownerDocument, this._data);\r\n  }},\r\n\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9UZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFlBQVksbUJBQU8sQ0FBQyxxRUFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsbUVBQVE7QUFDM0Isb0JBQW9CLG1CQUFPLENBQUMscUZBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBLHlDQUF5QyxVQUFVLE9BQU87QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsZUFBZTtBQUNmO0FBQ0Esc0NBQXNDLE1BQU07QUFDNUMsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLElBQUk7QUFDSjtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9UZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFRleHQ7XHJcblxyXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcbnZhciBDaGFyYWN0ZXJEYXRhID0gcmVxdWlyZSgnLi9DaGFyYWN0ZXJEYXRhJyk7XHJcblxyXG5mdW5jdGlvbiBUZXh0KGRvYywgZGF0YSkge1xyXG4gIENoYXJhY3RlckRhdGEuY2FsbCh0aGlzKTtcclxuICB0aGlzLm5vZGVUeXBlID0gTm9kZS5URVhUX05PREU7XHJcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gZG9jO1xyXG4gIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG4gIHRoaXMuX2luZGV4ID0gdW5kZWZpbmVkO1xyXG59XHJcblxyXG52YXIgbm9kZVZhbHVlID0ge1xyXG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9kYXRhOyB9LFxyXG4gIHNldDogZnVuY3Rpb24odikge1xyXG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7IHYgPSAnJzsgfSBlbHNlIHsgdiA9IFN0cmluZyh2KTsgfVxyXG4gICAgaWYgKHYgPT09IHRoaXMuX2RhdGEpIHJldHVybjtcclxuICAgIHRoaXMuX2RhdGEgPSB2O1xyXG4gICAgaWYgKHRoaXMucm9vdGVkKVxyXG4gICAgICB0aGlzLm93bmVyRG9jdW1lbnQubXV0YXRlVmFsdWUodGhpcyk7XHJcbiAgICBpZiAodGhpcy5wYXJlbnROb2RlICYmXHJcbiAgICAgIHRoaXMucGFyZW50Tm9kZS5fdGV4dGNoYW5nZWhvb2spXHJcbiAgICAgIHRoaXMucGFyZW50Tm9kZS5fdGV4dGNoYW5nZWhvb2sodGhpcyk7XHJcbiAgfVxyXG59O1xyXG5cclxuVGV4dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENoYXJhY3RlckRhdGEucHJvdG90eXBlLCB7XHJcbiAgbm9kZU5hbWU6IHsgdmFsdWU6IFwiI3RleHRcIiB9LFxyXG4gIC8vIFRoZXNlIHRocmVlIGF0dHJpYnV0ZXMgYXJlIGFsbCB0aGUgc2FtZS5cclxuICAvLyBUaGUgZGF0YSBhdHRyaWJ1dGUgaGFzIGEgW1RyZWF0TnVsbEFzPUVtcHR5U3RyaW5nXSBidXQgd2UnbGxcclxuICAvLyBpbXBsZW1lbnQgdGhhdCBhdCB0aGUgaW50ZXJmYWNlIGxldmVsXHJcbiAgbm9kZVZhbHVlOiBub2RlVmFsdWUsXHJcbiAgdGV4dENvbnRlbnQ6IG5vZGVWYWx1ZSxcclxuICBpbm5lclRleHQ6IG5vZGVWYWx1ZSxcclxuICBkYXRhOiB7XHJcbiAgICBnZXQ6IG5vZGVWYWx1ZS5nZXQsXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcclxuICAgICAgbm9kZVZhbHVlLnNldC5jYWxsKHRoaXMsIHY9PT1udWxsID8gJycgOiBTdHJpbmcodikpO1xyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICBzcGxpdFRleHQ6IHsgdmFsdWU6IGZ1bmN0aW9uIHNwbGl0VGV4dChvZmZzZXQpIHtcclxuICAgIGlmIChvZmZzZXQgPiB0aGlzLl9kYXRhLmxlbmd0aCB8fCBvZmZzZXQgPCAwKSB1dGlscy5JbmRleFNpemVFcnJvcigpO1xyXG5cclxuICAgIHZhciBuZXdkYXRhID0gdGhpcy5fZGF0YS5zdWJzdHJpbmcob2Zmc2V0KSxcclxuICAgICAgbmV3bm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdkYXRhKTtcclxuICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcclxuXHJcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xyXG4gICAgaWYgKHBhcmVudCAhPT0gbnVsbClcclxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShuZXdub2RlLCB0aGlzLm5leHRTaWJsaW5nKTtcclxuXHJcbiAgICByZXR1cm4gbmV3bm9kZTtcclxuICB9fSxcclxuXHJcbiAgd2hvbGVUZXh0OiB7IGdldDogZnVuY3Rpb24gd2hvbGVUZXh0KCkge1xyXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudGV4dENvbnRlbnQ7XHJcbiAgICBmb3IgKHZhciBuZXh0ID0gdGhpcy5uZXh0U2libGluZzsgbmV4dDsgbmV4dCA9IG5leHQubmV4dFNpYmxpbmcpIHtcclxuICAgICAgaWYgKG5leHQubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7IGJyZWFrOyB9XHJcbiAgICAgIHJlc3VsdCArPSBuZXh0LnRleHRDb250ZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9fSxcclxuICAvLyBPYnNvbGV0ZSwgcmVtb3ZlZCBmcm9tIHNwZWMuXHJcbiAgcmVwbGFjZVdob2xlVGV4dDogeyB2YWx1ZTogdXRpbHMubnlpIH0sXHJcblxyXG4gIC8vIFV0aWxpdHkgbWV0aG9kc1xyXG4gIGNsb25lOiB7IHZhbHVlOiBmdW5jdGlvbiBjbG9uZSgpIHtcclxuICAgIHJldHVybiBuZXcgVGV4dCh0aGlzLm93bmVyRG9jdW1lbnQsIHRoaXMuX2RhdGEpO1xyXG4gIH19LFxyXG5cclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/TreeWalker.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/TreeWalker.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = TreeWalker;\r\n\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar NodeFilter = __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js\");\r\nvar NodeTraversal = __webpack_require__(/*! ./NodeTraversal */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeTraversal.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nvar mapChild = {\r\n  first: 'firstChild',\r\n  last: 'lastChild',\r\n  next: 'firstChild',\r\n  previous: 'lastChild'\r\n};\r\n\r\nvar mapSibling = {\r\n  first: 'nextSibling',\r\n  last: 'previousSibling',\r\n  next: 'nextSibling',\r\n  previous: 'previousSibling'\r\n};\r\n\r\n/* Private methods and helpers */\r\n\r\n/**\r\n * @spec https://dom.spec.whatwg.org/#concept-traverse-children\r\n * @method\r\n * @access private\r\n * @param {TreeWalker} tw\r\n * @param {string} type One of 'first' or 'last'.\r\n * @return {Node|null}\r\n */\r\nfunction traverseChildren(tw, type) {\r\n  var child, node, parent, result, sibling;\r\n  node = tw._currentNode[mapChild[type]];\r\n  while (node !== null) {\r\n    result = tw._internalFilter(node);\r\n    if (result === NodeFilter.FILTER_ACCEPT) {\r\n      tw._currentNode = node;\r\n      return node;\r\n    }\r\n    if (result === NodeFilter.FILTER_SKIP) {\r\n      child = node[mapChild[type]];\r\n      if (child !== null) {\r\n        node = child;\r\n        continue;\r\n      }\r\n    }\r\n    while (node !== null) {\r\n      sibling = node[mapSibling[type]];\r\n      if (sibling !== null) {\r\n        node = sibling;\r\n        break;\r\n      }\r\n      parent = node.parentNode;\r\n      if (parent === null || parent === tw.root || parent === tw._currentNode) {\r\n        return null;\r\n      } else {\r\n        node = parent;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @spec https://dom.spec.whatwg.org/#concept-traverse-siblings\r\n * @method\r\n * @access private\r\n * @param {TreeWalker} tw\r\n * @param {TreeWalker} type One of 'next' or 'previous'.\r\n * @return {Node|nul}\r\n */\r\nfunction traverseSiblings(tw, type) {\r\n  var node, result, sibling;\r\n  node = tw._currentNode;\r\n  if (node === tw.root) {\r\n    return null;\r\n  }\r\n  while (true) {\r\n    sibling = node[mapSibling[type]];\r\n    while (sibling !== null) {\r\n      node = sibling;\r\n      result = tw._internalFilter(node);\r\n      if (result === NodeFilter.FILTER_ACCEPT) {\r\n        tw._currentNode = node;\r\n        return node;\r\n      }\r\n      sibling = node[mapChild[type]];\r\n      if (result === NodeFilter.FILTER_REJECT || sibling === null) {\r\n        sibling = node[mapSibling[type]];\r\n      }\r\n    }\r\n    node = node.parentNode;\r\n    if (node === null || node === tw.root) {\r\n      return null;\r\n    }\r\n    if (tw._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/* Public API */\r\n\r\n/**\r\n * Latest version: https://dom.spec.whatwg.org/#treewalker\r\n *\r\n * @constructor\r\n * @param {Node} root\r\n * @param {number} whatToShow [optional]\r\n * @param {Function|NodeFilter} filter [optional]\r\n * @throws Error\r\n */\r\nfunction TreeWalker(root, whatToShow, filter) {\r\n  if (!root || !root.nodeType) {\r\n    utils.NotSupportedError();\r\n  }\r\n\r\n  // Read-only properties\r\n  this._root = root;\r\n  this._whatToShow = Number(whatToShow) || 0;\r\n  this._filter = filter || null;\r\n  this._active = false;\r\n  // Read-write property\r\n  this._currentNode = root;\r\n}\r\n\r\nObject.defineProperties(TreeWalker.prototype, {\r\n  root: { get: function() { return this._root; } },\r\n  whatToShow: { get: function() { return this._whatToShow; } },\r\n  filter: { get: function() { return this._filter; } },\r\n\r\n  currentNode: {\r\n    get: function currentNode() {\r\n      return this._currentNode;\r\n    },\r\n    set: function setCurrentNode(v) {\r\n      if (!(v instanceof Node)) {\r\n        throw new TypeError(\"Not a Node\"); // `null` is also not a node\r\n      }\r\n      this._currentNode = v;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * @method\r\n   * @param {Node} node\r\n   * @return {Number} Constant NodeFilter.FILTER_ACCEPT,\r\n   *  NodeFilter.FILTER_REJECT or NodeFilter.FILTER_SKIP.\r\n   */\r\n  _internalFilter: { value: function _internalFilter(node) {\r\n    /* jshint bitwise: false */\r\n    var result, filter;\r\n    if (this._active) {\r\n      utils.InvalidStateError();\r\n    }\r\n\r\n    // Maps nodeType to whatToShow\r\n    if (!(((1 << (node.nodeType - 1)) & this._whatToShow))) {\r\n      return NodeFilter.FILTER_SKIP;\r\n    }\r\n\r\n    filter = this._filter;\r\n    if (filter === null) {\r\n      result = NodeFilter.FILTER_ACCEPT;\r\n    } else {\r\n      this._active = true;\r\n      try {\r\n        if (typeof filter === 'function') {\r\n          result = filter(node);\r\n        } else {\r\n          result = filter.acceptNode(node);\r\n        }\r\n      } finally {\r\n        this._active = false;\r\n      }\r\n    }\r\n\r\n    // Note that coercing to a number means that\r\n    //  `true` becomes `1` (which is NodeFilter.FILTER_ACCEPT)\r\n    //  `false` becomes `0` (neither accept, reject, or skip)\r\n    return (+result);\r\n  }},\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-parentnode\r\n   * @based on WebKit's TreeWalker::parentNode\r\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L50\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  parentNode: { value: function parentNode() {\r\n    var node = this._currentNode;\r\n    while (node !== this.root) {\r\n      node = node.parentNode;\r\n      if (node === null) {\r\n        return null;\r\n      }\r\n      if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\r\n        this._currentNode = node;\r\n        return node;\r\n      }\r\n    }\r\n    return null;\r\n  }},\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-firstchild\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  firstChild: { value: function firstChild() {\r\n    return traverseChildren(this, 'first');\r\n  }},\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-lastchild\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  lastChild: { value: function lastChild() {\r\n    return traverseChildren(this, 'last');\r\n  }},\r\n\r\n  /**\r\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-previoussibling\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  previousSibling: { value: function previousSibling() {\r\n    return traverseSiblings(this, 'previous');\r\n  }},\r\n\r\n  /**\r\n   * @spec http://www.w3.org/TR/dom/#dom-treewalker-nextsibling\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  nextSibling: { value: function nextSibling() {\r\n    return traverseSiblings(this, 'next');\r\n  }},\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-previousnode\r\n   * @based on WebKit's TreeWalker::previousNode\r\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L181\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  previousNode: { value: function previousNode() {\r\n    var node, result, previousSibling, lastChild;\r\n    node = this._currentNode;\r\n    while (node !== this._root) {\r\n      for (previousSibling = node.previousSibling;\r\n           previousSibling;\r\n           previousSibling = node.previousSibling) {\r\n        node = previousSibling;\r\n        result = this._internalFilter(node);\r\n        if (result === NodeFilter.FILTER_REJECT) {\r\n          continue;\r\n        }\r\n        for (lastChild = node.lastChild;\r\n             lastChild;\r\n             lastChild = node.lastChild) {\r\n          node = lastChild;\r\n          result = this._internalFilter(node);\r\n          if (result === NodeFilter.FILTER_REJECT) {\r\n            break;\r\n          }\r\n        }\r\n        if (result === NodeFilter.FILTER_ACCEPT) {\r\n          this._currentNode = node;\r\n          return node;\r\n        }\r\n      }\r\n      if (node === this.root || node.parentNode === null) {\r\n        return null;\r\n      }\r\n      node = node.parentNode;\r\n      if (this._internalFilter(node) === NodeFilter.FILTER_ACCEPT) {\r\n        this._currentNode = node;\r\n        return node;\r\n      }\r\n    }\r\n    return null;\r\n  }},\r\n\r\n  /**\r\n   * @spec https://dom.spec.whatwg.org/#dom-treewalker-nextnode\r\n   * @based on WebKit's TreeWalker::nextNode\r\n   * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/dom/TreeWalker.cpp?rev=220453#L228\r\n   * @method\r\n   * @return {Node|null}\r\n   */\r\n  nextNode: { value: function nextNode() {\r\n    var node, result, firstChild, nextSibling;\r\n    node = this._currentNode;\r\n    result = NodeFilter.FILTER_ACCEPT;\r\n\r\n    CHILDREN:\r\n    while (true) {\r\n      for (firstChild = node.firstChild;\r\n           firstChild;\r\n           firstChild = node.firstChild) {\r\n        node = firstChild;\r\n        result = this._internalFilter(node);\r\n        if (result === NodeFilter.FILTER_ACCEPT) {\r\n          this._currentNode = node;\r\n          return node;\r\n        } else if (result === NodeFilter.FILTER_REJECT) {\r\n          break;\r\n        }\r\n      }\r\n      for (nextSibling = NodeTraversal.nextSkippingChildren(node, this.root);\r\n           nextSibling;\r\n           nextSibling = NodeTraversal.nextSkippingChildren(node, this.root)) {\r\n        node = nextSibling;\r\n        result = this._internalFilter(node);\r\n        if (result === NodeFilter.FILTER_ACCEPT) {\r\n          this._currentNode = node;\r\n          return node;\r\n        } else if (result === NodeFilter.FILTER_SKIP) {\r\n          continue CHILDREN;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }},\r\n\r\n  /** For compatibility with web-platform-tests. */\r\n  toString: { value: function toString() {\r\n    return \"[object TreeWalker]\";\r\n  }},\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9UcmVlV2Fsa2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtRUFBUTtBQUMzQixpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYztBQUN2QyxvQkFBb0IsbUJBQU8sQ0FBQyxxRkFBaUI7QUFDN0MsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFlBQVk7QUFDdkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxRQUFRO0FBQ25CLFdBQVcscUJBQXFCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtCQUFrQixzQkFBc0I7QUFDbEQsZ0JBQWdCLGtCQUFrQiw0QkFBNEI7QUFDOUQsWUFBWSxrQkFBa0Isd0JBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxJQUFJO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL1RyZWVXYWxrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gVHJlZVdhbGtlcjtcclxuXHJcbnZhciBOb2RlID0gcmVxdWlyZSgnLi9Ob2RlJyk7XHJcbnZhciBOb2RlRmlsdGVyID0gcmVxdWlyZSgnLi9Ob2RlRmlsdGVyJyk7XHJcbnZhciBOb2RlVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9Ob2RlVHJhdmVyc2FsJyk7XHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbnZhciBtYXBDaGlsZCA9IHtcclxuICBmaXJzdDogJ2ZpcnN0Q2hpbGQnLFxyXG4gIGxhc3Q6ICdsYXN0Q2hpbGQnLFxyXG4gIG5leHQ6ICdmaXJzdENoaWxkJyxcclxuICBwcmV2aW91czogJ2xhc3RDaGlsZCdcclxufTtcclxuXHJcbnZhciBtYXBTaWJsaW5nID0ge1xyXG4gIGZpcnN0OiAnbmV4dFNpYmxpbmcnLFxyXG4gIGxhc3Q6ICdwcmV2aW91c1NpYmxpbmcnLFxyXG4gIG5leHQ6ICduZXh0U2libGluZycsXHJcbiAgcHJldmlvdXM6ICdwcmV2aW91c1NpYmxpbmcnXHJcbn07XHJcblxyXG4vKiBQcml2YXRlIG1ldGhvZHMgYW5kIGhlbHBlcnMgKi9cclxuXHJcbi8qKlxyXG4gKiBAc3BlYyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdHJhdmVyc2UtY2hpbGRyZW5cclxuICogQG1ldGhvZFxyXG4gKiBAYWNjZXNzIHByaXZhdGVcclxuICogQHBhcmFtIHtUcmVlV2Fsa2VyfSB0d1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBPbmUgb2YgJ2ZpcnN0JyBvciAnbGFzdCcuXHJcbiAqIEByZXR1cm4ge05vZGV8bnVsbH1cclxuICovXHJcbmZ1bmN0aW9uIHRyYXZlcnNlQ2hpbGRyZW4odHcsIHR5cGUpIHtcclxuICB2YXIgY2hpbGQsIG5vZGUsIHBhcmVudCwgcmVzdWx0LCBzaWJsaW5nO1xyXG4gIG5vZGUgPSB0dy5fY3VycmVudE5vZGVbbWFwQ2hpbGRbdHlwZV1dO1xyXG4gIHdoaWxlIChub2RlICE9PSBudWxsKSB7XHJcbiAgICByZXN1bHQgPSB0dy5faW50ZXJuYWxGaWx0ZXIobm9kZSk7XHJcbiAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcclxuICAgICAgdHcuX2N1cnJlbnROb2RlID0gbm9kZTtcclxuICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQKSB7XHJcbiAgICAgIGNoaWxkID0gbm9kZVttYXBDaGlsZFt0eXBlXV07XHJcbiAgICAgIGlmIChjaGlsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgIG5vZGUgPSBjaGlsZDtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcclxuICAgICAgc2libGluZyA9IG5vZGVbbWFwU2libGluZ1t0eXBlXV07XHJcbiAgICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XHJcbiAgICAgICAgbm9kZSA9IHNpYmxpbmc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICBpZiAocGFyZW50ID09PSBudWxsIHx8IHBhcmVudCA9PT0gdHcucm9vdCB8fCBwYXJlbnQgPT09IHR3Ll9jdXJyZW50Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5vZGUgPSBwYXJlbnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAc3BlYyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdHJhdmVyc2Utc2libGluZ3NcclxuICogQG1ldGhvZFxyXG4gKiBAYWNjZXNzIHByaXZhdGVcclxuICogQHBhcmFtIHtUcmVlV2Fsa2VyfSB0d1xyXG4gKiBAcGFyYW0ge1RyZWVXYWxrZXJ9IHR5cGUgT25lIG9mICduZXh0JyBvciAncHJldmlvdXMnLlxyXG4gKiBAcmV0dXJuIHtOb2RlfG51bH1cclxuICovXHJcbmZ1bmN0aW9uIHRyYXZlcnNlU2libGluZ3ModHcsIHR5cGUpIHtcclxuICB2YXIgbm9kZSwgcmVzdWx0LCBzaWJsaW5nO1xyXG4gIG5vZGUgPSB0dy5fY3VycmVudE5vZGU7XHJcbiAgaWYgKG5vZGUgPT09IHR3LnJvb3QpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgc2libGluZyA9IG5vZGVbbWFwU2libGluZ1t0eXBlXV07XHJcbiAgICB3aGlsZSAoc2libGluZyAhPT0gbnVsbCkge1xyXG4gICAgICBub2RlID0gc2libGluZztcclxuICAgICAgcmVzdWx0ID0gdHcuX2ludGVybmFsRmlsdGVyKG5vZGUpO1xyXG4gICAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcclxuICAgICAgICB0dy5fY3VycmVudE5vZGUgPSBub2RlO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICB9XHJcbiAgICAgIHNpYmxpbmcgPSBub2RlW21hcENoaWxkW3R5cGVdXTtcclxuICAgICAgaWYgKHJlc3VsdCA9PT0gTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUIHx8IHNpYmxpbmcgPT09IG51bGwpIHtcclxuICAgICAgICBzaWJsaW5nID0gbm9kZVttYXBTaWJsaW5nW3R5cGVdXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHR3LnJvb3QpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAodHcuX2ludGVybmFsRmlsdGVyKG5vZGUpID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLyogUHVibGljIEFQSSAqL1xyXG5cclxuLyoqXHJcbiAqIExhdGVzdCB2ZXJzaW9uOiBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI3RyZWV3YWxrZXJcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7Tm9kZX0gcm9vdFxyXG4gKiBAcGFyYW0ge251bWJlcn0gd2hhdFRvU2hvdyBbb3B0aW9uYWxdXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb258Tm9kZUZpbHRlcn0gZmlsdGVyIFtvcHRpb25hbF1cclxuICogQHRocm93cyBFcnJvclxyXG4gKi9cclxuZnVuY3Rpb24gVHJlZVdhbGtlcihyb290LCB3aGF0VG9TaG93LCBmaWx0ZXIpIHtcclxuICBpZiAoIXJvb3QgfHwgIXJvb3Qubm9kZVR5cGUpIHtcclxuICAgIHV0aWxzLk5vdFN1cHBvcnRlZEVycm9yKCk7XHJcbiAgfVxyXG5cclxuICAvLyBSZWFkLW9ubHkgcHJvcGVydGllc1xyXG4gIHRoaXMuX3Jvb3QgPSByb290O1xyXG4gIHRoaXMuX3doYXRUb1Nob3cgPSBOdW1iZXIod2hhdFRvU2hvdykgfHwgMDtcclxuICB0aGlzLl9maWx0ZXIgPSBmaWx0ZXIgfHwgbnVsbDtcclxuICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcclxuICAvLyBSZWFkLXdyaXRlIHByb3BlcnR5XHJcbiAgdGhpcy5fY3VycmVudE5vZGUgPSByb290O1xyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUcmVlV2Fsa2VyLnByb3RvdHlwZSwge1xyXG4gIHJvb3Q6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3Jvb3Q7IH0gfSxcclxuICB3aGF0VG9TaG93OiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl93aGF0VG9TaG93OyB9IH0sXHJcbiAgZmlsdGVyOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLl9maWx0ZXI7IH0gfSxcclxuXHJcbiAgY3VycmVudE5vZGU6IHtcclxuICAgIGdldDogZnVuY3Rpb24gY3VycmVudE5vZGUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50Tm9kZTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldEN1cnJlbnROb2RlKHYpIHtcclxuICAgICAgaWYgKCEodiBpbnN0YW5jZW9mIE5vZGUpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vdCBhIE5vZGVcIik7IC8vIGBudWxsYCBpcyBhbHNvIG5vdCBhIG5vZGVcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IHY7XHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IENvbnN0YW50IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCxcclxuICAgKiAgTm9kZUZpbHRlci5GSUxURVJfUkVKRUNUIG9yIE5vZGVGaWx0ZXIuRklMVEVSX1NLSVAuXHJcbiAgICovXHJcbiAgX2ludGVybmFsRmlsdGVyOiB7IHZhbHVlOiBmdW5jdGlvbiBfaW50ZXJuYWxGaWx0ZXIobm9kZSkge1xyXG4gICAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXHJcbiAgICB2YXIgcmVzdWx0LCBmaWx0ZXI7XHJcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XHJcbiAgICAgIHV0aWxzLkludmFsaWRTdGF0ZUVycm9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWFwcyBub2RlVHlwZSB0byB3aGF0VG9TaG93XHJcbiAgICBpZiAoISgoKDEgPDwgKG5vZGUubm9kZVR5cGUgLSAxKSkgJiB0aGlzLl93aGF0VG9TaG93KSkpIHtcclxuICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX1NLSVA7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyID0gdGhpcy5fZmlsdGVyO1xyXG4gICAgaWYgKGZpbHRlciA9PT0gbnVsbCkge1xyXG4gICAgICByZXN1bHQgPSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICByZXN1bHQgPSBmaWx0ZXIobm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc3VsdCA9IGZpbHRlci5hY2NlcHROb2RlKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vdGUgdGhhdCBjb2VyY2luZyB0byBhIG51bWJlciBtZWFucyB0aGF0XHJcbiAgICAvLyAgYHRydWVgIGJlY29tZXMgYDFgICh3aGljaCBpcyBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpXHJcbiAgICAvLyAgYGZhbHNlYCBiZWNvbWVzIGAwYCAobmVpdGhlciBhY2NlcHQsIHJlamVjdCwgb3Igc2tpcClcclxuICAgIHJldHVybiAoK3Jlc3VsdCk7XHJcbiAgfX0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBzcGVjIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLXRyZWV3YWxrZXItcGFyZW50bm9kZVxyXG4gICAqIEBiYXNlZCBvbiBXZWJLaXQncyBUcmVlV2Fsa2VyOjpwYXJlbnROb2RlXHJcbiAgICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci93ZWJraXQvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL1RyZWVXYWxrZXIuY3BwP3Jldj0yMjA0NTMjTDUwXHJcbiAgICogQG1ldGhvZFxyXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cclxuICAgKi9cclxuICBwYXJlbnROb2RlOiB7IHZhbHVlOiBmdW5jdGlvbiBwYXJlbnROb2RlKCkge1xyXG4gICAgdmFyIG5vZGUgPSB0aGlzLl9jdXJyZW50Tm9kZTtcclxuICAgIHdoaWxlIChub2RlICE9PSB0aGlzLnJvb3QpIHtcclxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgaWYgKG5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5faW50ZXJuYWxGaWx0ZXIobm9kZSkgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbm9kZTtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfX0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBzcGVjIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLXRyZWV3YWxrZXItZmlyc3RjaGlsZFxyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XHJcbiAgICovXHJcbiAgZmlyc3RDaGlsZDogeyB2YWx1ZTogZnVuY3Rpb24gZmlyc3RDaGlsZCgpIHtcclxuICAgIHJldHVybiB0cmF2ZXJzZUNoaWxkcmVuKHRoaXMsICdmaXJzdCcpO1xyXG4gIH19LFxyXG5cclxuICAvKipcclxuICAgKiBAc3BlYyBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS10cmVld2Fsa2VyLWxhc3RjaGlsZFxyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XHJcbiAgICovXHJcbiAgbGFzdENoaWxkOiB7IHZhbHVlOiBmdW5jdGlvbiBsYXN0Q2hpbGQoKSB7XHJcbiAgICByZXR1cm4gdHJhdmVyc2VDaGlsZHJlbih0aGlzLCAnbGFzdCcpO1xyXG4gIH19LFxyXG5cclxuICAvKipcclxuICAgKiBAc3BlYyBodHRwOi8vd3d3LnczLm9yZy9UUi9kb20vI2RvbS10cmVld2Fsa2VyLXByZXZpb3Vzc2libGluZ1xyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XHJcbiAgICovXHJcbiAgcHJldmlvdXNTaWJsaW5nOiB7IHZhbHVlOiBmdW5jdGlvbiBwcmV2aW91c1NpYmxpbmcoKSB7XHJcbiAgICByZXR1cm4gdHJhdmVyc2VTaWJsaW5ncyh0aGlzLCAncHJldmlvdXMnKTtcclxuICB9fSxcclxuXHJcbiAgLyoqXHJcbiAgICogQHNwZWMgaHR0cDovL3d3dy53My5vcmcvVFIvZG9tLyNkb20tdHJlZXdhbGtlci1uZXh0c2libGluZ1xyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XHJcbiAgICovXHJcbiAgbmV4dFNpYmxpbmc6IHsgdmFsdWU6IGZ1bmN0aW9uIG5leHRTaWJsaW5nKCkge1xyXG4gICAgcmV0dXJuIHRyYXZlcnNlU2libGluZ3ModGhpcywgJ25leHQnKTtcclxuICB9fSxcclxuXHJcbiAgLyoqXHJcbiAgICogQHNwZWMgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tdHJlZXdhbGtlci1wcmV2aW91c25vZGVcclxuICAgKiBAYmFzZWQgb24gV2ViS2l0J3MgVHJlZVdhbGtlcjo6cHJldmlvdXNOb2RlXHJcbiAgICogaHR0cHM6Ly90cmFjLndlYmtpdC5vcmcvYnJvd3Nlci93ZWJraXQvdHJ1bmsvU291cmNlL1dlYkNvcmUvZG9tL1RyZWVXYWxrZXIuY3BwP3Jldj0yMjA0NTMjTDE4MVxyXG4gICAqIEBtZXRob2RcclxuICAgKiBAcmV0dXJuIHtOb2RlfG51bGx9XHJcbiAgICovXHJcbiAgcHJldmlvdXNOb2RlOiB7IHZhbHVlOiBmdW5jdGlvbiBwcmV2aW91c05vZGUoKSB7XHJcbiAgICB2YXIgbm9kZSwgcmVzdWx0LCBwcmV2aW91c1NpYmxpbmcsIGxhc3RDaGlsZDtcclxuICAgIG5vZGUgPSB0aGlzLl9jdXJyZW50Tm9kZTtcclxuICAgIHdoaWxlIChub2RlICE9PSB0aGlzLl9yb290KSB7XHJcbiAgICAgIGZvciAocHJldmlvdXNTaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgcHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgIHByZXZpb3VzU2libGluZyA9IG5vZGUucHJldmlvdXNTaWJsaW5nKSB7XHJcbiAgICAgICAgbm9kZSA9IHByZXZpb3VzU2libGluZztcclxuICAgICAgICByZXN1bHQgPSB0aGlzLl9pbnRlcm5hbEZpbHRlcihub2RlKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1QpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxhc3RDaGlsZCA9IG5vZGUubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgbGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgbGFzdENoaWxkID0gbm9kZS5sYXN0Q2hpbGQpIHtcclxuICAgICAgICAgIG5vZGUgPSBsYXN0Q2hpbGQ7XHJcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLl9pbnRlcm5hbEZpbHRlcihub2RlKTtcclxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX1JFSkVDVCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gTm9kZUZpbHRlci5GSUxURVJfQUNDRVBUKSB7XHJcbiAgICAgICAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IG5vZGU7XHJcbiAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG5vZGUgPT09IHRoaXMucm9vdCB8fCBub2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICBpZiAodGhpcy5faW50ZXJuYWxGaWx0ZXIobm9kZSkgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbm9kZTtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfX0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBzcGVjIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLXRyZWV3YWxrZXItbmV4dG5vZGVcclxuICAgKiBAYmFzZWQgb24gV2ViS2l0J3MgVHJlZVdhbGtlcjo6bmV4dE5vZGVcclxuICAgKiBodHRwczovL3RyYWMud2Via2l0Lm9yZy9icm93c2VyL3dlYmtpdC90cnVuay9Tb3VyY2UvV2ViQ29yZS9kb20vVHJlZVdhbGtlci5jcHA/cmV2PTIyMDQ1MyNMMjI4XHJcbiAgICogQG1ldGhvZFxyXG4gICAqIEByZXR1cm4ge05vZGV8bnVsbH1cclxuICAgKi9cclxuICBuZXh0Tm9kZTogeyB2YWx1ZTogZnVuY3Rpb24gbmV4dE5vZGUoKSB7XHJcbiAgICB2YXIgbm9kZSwgcmVzdWx0LCBmaXJzdENoaWxkLCBuZXh0U2libGluZztcclxuICAgIG5vZGUgPSB0aGlzLl9jdXJyZW50Tm9kZTtcclxuICAgIHJlc3VsdCA9IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVDtcclxuXHJcbiAgICBDSElMRFJFTjpcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgIGZvciAoZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICBmaXJzdENoaWxkO1xyXG4gICAgICAgICAgIGZpcnN0Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICBub2RlID0gZmlyc3RDaGlsZDtcclxuICAgICAgICByZXN1bHQgPSB0aGlzLl9pbnRlcm5hbEZpbHRlcihub2RlKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFQpIHtcclxuICAgICAgICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbm9kZTtcclxuICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSBOb2RlRmlsdGVyLkZJTFRFUl9SRUpFQ1QpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBmb3IgKG5leHRTaWJsaW5nID0gTm9kZVRyYXZlcnNhbC5uZXh0U2tpcHBpbmdDaGlsZHJlbihub2RlLCB0aGlzLnJvb3QpO1xyXG4gICAgICAgICAgIG5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgIG5leHRTaWJsaW5nID0gTm9kZVRyYXZlcnNhbC5uZXh0U2tpcHBpbmdDaGlsZHJlbihub2RlLCB0aGlzLnJvb3QpKSB7XHJcbiAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nO1xyXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2ludGVybmFsRmlsdGVyKG5vZGUpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCkge1xyXG4gICAgICAgICAgdGhpcy5fY3VycmVudE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IE5vZGVGaWx0ZXIuRklMVEVSX1NLSVApIHtcclxuICAgICAgICAgIGNvbnRpbnVlIENISUxEUkVOO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9fSxcclxuXHJcbiAgLyoqIEZvciBjb21wYXRpYmlsaXR5IHdpdGggd2ViLXBsYXRmb3JtLXRlc3RzLiAqL1xyXG4gIHRvU3RyaW5nOiB7IHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiBcIltvYmplY3QgVHJlZVdhbGtlcl1cIjtcclxuICB9fSxcclxufSk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/TreeWalker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/UIEvent.js":
/*!********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/UIEvent.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar Event = __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\");\r\n\r\nmodule.exports = UIEvent;\r\n\r\nfunction UIEvent() {\r\n  // Just use the superclass constructor to initialize\r\n  Event.call(this);\r\n  this.view = null; // FF uses the current window\r\n  this.detail = 0;\r\n}\r\nUIEvent.prototype = Object.create(Event.prototype, {\r\n  constructor: { value: UIEvent },\r\n  initUIEvent: { value: function(type, bubbles, cancelable, view, detail) {\r\n    this.initEvent(type, bubbles, cancelable);\r\n    this.view = view;\r\n    this.detail = detail;\r\n  }}\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9VSUV2ZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9VSUV2ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgRXZlbnQgPSByZXF1aXJlKCcuL0V2ZW50Jyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVJRXZlbnQ7XHJcblxyXG5mdW5jdGlvbiBVSUV2ZW50KCkge1xyXG4gIC8vIEp1c3QgdXNlIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpemVcclxuICBFdmVudC5jYWxsKHRoaXMpO1xyXG4gIHRoaXMudmlldyA9IG51bGw7IC8vIEZGIHVzZXMgdGhlIGN1cnJlbnQgd2luZG93XHJcbiAgdGhpcy5kZXRhaWwgPSAwO1xyXG59XHJcblVJRXZlbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFdmVudC5wcm90b3R5cGUsIHtcclxuICBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogVUlFdmVudCB9LFxyXG4gIGluaXRVSUV2ZW50OiB7IHZhbHVlOiBmdW5jdGlvbih0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCB2aWV3LCBkZXRhaWwpIHtcclxuICAgIHRoaXMuaW5pdEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMuZGV0YWlsID0gZGV0YWlsO1xyXG4gIH19XHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/UIEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/URL.js":
/*!****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/URL.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\r\nmodule.exports = URL;\r\n\r\nfunction URL(url) {\r\n  if (!url) return Object.create(URL.prototype);\r\n  // Can't use String.trim() since it defines whitespace differently than HTML\r\n  this.url = url.replace(/^[ \\t\\n\\r\\f]+|[ \\t\\n\\r\\f]+$/g, \"\");\r\n\r\n  // See http://tools.ietf.org/html/rfc3986#appendix-B\r\n  // and https://url.spec.whatwg.org/#parsing\r\n  var match = URL.pattern.exec(this.url);\r\n  if (match) {\r\n    if (match[2]) this.scheme = match[2];\r\n    if (match[4]) {\r\n      // parse username/password\r\n      var userinfo = match[4].match(URL.userinfoPattern);\r\n      if (userinfo) {\r\n        this.username = userinfo[1];\r\n        this.password = userinfo[3];\r\n        match[4] = match[4].substring(userinfo[0].length);\r\n      }\r\n      if (match[4].match(URL.portPattern)) {\r\n        var pos = match[4].lastIndexOf(':');\r\n        this.host = match[4].substring(0, pos);\r\n        this.port = match[4].substring(pos+1);\r\n      }\r\n      else {\r\n        this.host = match[4];\r\n      }\r\n    }\r\n    if (match[5]) this.path = match[5];\r\n    if (match[6]) this.query = match[7];\r\n    if (match[8]) this.fragment = match[9];\r\n  }\r\n}\r\n\r\nURL.pattern = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/;\r\nURL.userinfoPattern = /^([^@:]*)(:([^@]*))?@/;\r\nURL.portPattern = /:\\d+$/;\r\nURL.authorityPattern = /^[^:\\/?#]+:\\/\\//;\r\nURL.hierarchyPattern = /^[^:\\/?#]+:\\//;\r\n\r\n// Return a percentEncoded version of s.\r\n// S should be a single-character string\r\n// XXX: needs to do utf-8 encoding?\r\nURL.percentEncode = function percentEncode(s) {\r\n  var c = s.charCodeAt(0);\r\n  if (c < 256) return \"%\" + c.toString(16);\r\n  else throw Error(\"can't percent-encode codepoints > 255 yet\");\r\n};\r\n\r\nURL.prototype = {\r\n  constructor: URL,\r\n\r\n  // XXX: not sure if this is the precise definition of absolute\r\n  isAbsolute: function() { return !!this.scheme; },\r\n  isAuthorityBased: function() {\r\n    return URL.authorityPattern.test(this.url);\r\n  },\r\n  isHierarchical: function() {\r\n    return URL.hierarchyPattern.test(this.url);\r\n  },\r\n\r\n  toString: function() {\r\n    var s = \"\";\r\n    if (this.scheme !== undefined) s += this.scheme + \":\";\r\n    if (this.isAbsolute()) {\r\n      s += '//';\r\n      if (this.username || this.password) {\r\n        s += this.username || '';\r\n        if (this.password) {\r\n          s += ':' + this.password;\r\n        }\r\n        s += '@';\r\n      }\r\n      if (this.host) {\r\n        s += this.host;\r\n      }\r\n    }\r\n    if (this.port !== undefined) s += \":\" + this.port;\r\n    if (this.path !== undefined) s += this.path;\r\n    if (this.query !== undefined) s += \"?\" + this.query;\r\n    if (this.fragment !== undefined) s += \"#\" + this.fragment;\r\n    return s;\r\n  },\r\n\r\n  // See: http://tools.ietf.org/html/rfc3986#section-5.2\r\n  // and https://url.spec.whatwg.org/#constructors\r\n  resolve: function(relative) {\r\n    var base = this;           // The base url we're resolving against\r\n    var r = new URL(relative); // The relative reference url to resolve\r\n    var t = new URL();         // The absolute target url we will return\r\n\r\n    if (r.scheme !== undefined) {\r\n      t.scheme = r.scheme;\r\n      t.username = r.username;\r\n      t.password = r.password;\r\n      t.host = r.host;\r\n      t.port = r.port;\r\n      t.path = remove_dot_segments(r.path);\r\n      t.query = r.query;\r\n    }\r\n    else {\r\n      t.scheme = base.scheme;\r\n      if (r.host !== undefined) {\r\n        t.username = r.username;\r\n        t.password = r.password;\r\n        t.host = r.host;\r\n        t.port = r.port;\r\n        t.path = remove_dot_segments(r.path);\r\n        t.query = r.query;\r\n      }\r\n      else {\r\n        t.username = base.username;\r\n        t.password = base.password;\r\n        t.host = base.host;\r\n        t.port = base.port;\r\n        if (!r.path) { // undefined or empty\r\n          t.path = base.path;\r\n          if (r.query !== undefined)\r\n            t.query = r.query;\r\n          else\r\n            t.query = base.query;\r\n        }\r\n        else {\r\n          if (r.path.charAt(0) === \"/\") {\r\n            t.path = remove_dot_segments(r.path);\r\n          }\r\n          else {\r\n            t.path = merge(base.path, r.path);\r\n            t.path = remove_dot_segments(t.path);\r\n          }\r\n          t.query = r.query;\r\n        }\r\n      }\r\n    }\r\n    t.fragment = r.fragment;\r\n\r\n    return t.toString();\r\n\r\n\r\n    function merge(basepath, refpath) {\r\n      if (base.host !== undefined && !base.path)\r\n        return \"/\" + refpath;\r\n\r\n      var lastslash = basepath.lastIndexOf(\"/\");\r\n      if (lastslash === -1)\r\n        return refpath;\r\n      else\r\n        return basepath.substring(0, lastslash+1) + refpath;\r\n    }\r\n\r\n    function remove_dot_segments(path) {\r\n      if (!path) return path; // For \"\" or undefined\r\n\r\n      var output = \"\";\r\n      while(path.length > 0) {\r\n        if (path === \".\" || path === \"..\") {\r\n          path = \"\";\r\n          break;\r\n        }\r\n\r\n        var twochars = path.substring(0,2);\r\n        var threechars = path.substring(0,3);\r\n        var fourchars = path.substring(0,4);\r\n        if (threechars === \"../\") {\r\n          path = path.substring(3);\r\n        }\r\n        else if (twochars === \"./\") {\r\n          path = path.substring(2);\r\n        }\r\n        else if (threechars === \"/./\") {\r\n          path = \"/\" + path.substring(3);\r\n        }\r\n        else if (twochars === \"/.\" && path.length === 2) {\r\n          path = \"/\";\r\n        }\r\n        else if (fourchars === \"/../\" ||\r\n             (threechars === \"/..\" && path.length === 3)) {\r\n          path = \"/\" + path.substring(4);\r\n\r\n          output = output.replace(/\\/?[^\\/]*$/, \"\");\r\n        }\r\n        else {\r\n          var segment = path.match(/(\\/?([^\\/]*))/)[0];\r\n          output += segment;\r\n          path = path.substring(segment.length);\r\n        }\r\n      }\r\n\r\n      return output;\r\n    }\r\n  },\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/URLUtils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/URLUtils.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar URL = __webpack_require__(/*! ./URL */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/URL.js\");\r\n\r\nmodule.exports = URLUtils;\r\n\r\n// Allow the `x == null` pattern.  This is eslint's \"null: 'ignore'\" option,\r\n// but jshint doesn't support this.\r\n/* jshint eqeqeq: false */\r\n\r\n// This is an abstract superclass for Location, HTMLAnchorElement and\r\n// other types that have the standard complement of \"URL decomposition\r\n// IDL attributes\".  This is now standardized as URLUtils, see:\r\n// https://url.spec.whatwg.org/#urlutils\r\n// Subclasses must define a getter/setter on href.\r\n// The getter and setter methods parse and rebuild the URL on each\r\n// invocation; there is no attempt to cache the value and be more efficient\r\nfunction URLUtils() {}\r\nURLUtils.prototype = Object.create(Object.prototype, {\r\n\r\n  _url: { get: function() {\r\n    // XXX: this should do the \"Reinitialize url\" steps, and \"null\" should\r\n    // be a valid return value.\r\n    return new URL(this.href);\r\n  } },\r\n\r\n  protocol: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url && url.scheme) return url.scheme + \":\";\r\n      else return \":\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute()) {\r\n        v = v.replace(/:+$/, \"\");\r\n        v = v.replace(/[^-+\\.a-zA-Z0-9]/g, URL.percentEncode);\r\n        if (v.length > 0) {\r\n          url.scheme = v;\r\n          output = url.toString();\r\n        }\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  host: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url.isAbsolute() && url.isAuthorityBased())\r\n        return url.host + (url.port ? (\":\" + url.port) : \"\");\r\n      else\r\n        return \"\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute() && url.isAuthorityBased()) {\r\n        v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\r\n        if (v.length > 0) {\r\n          url.host = v;\r\n          delete url.port;\r\n          output = url.toString();\r\n        }\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  hostname: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url.isAbsolute() && url.isAuthorityBased())\r\n        return url.host;\r\n      else\r\n        return \"\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute() && url.isAuthorityBased()) {\r\n        v = v.replace(/^\\/+/, \"\");\r\n        v = v.replace(/[^-+\\._~!$&'()*,;:=a-zA-Z0-9]/g, URL.percentEncode);\r\n        if (v.length > 0) {\r\n          url.host = v;\r\n          output = url.toString();\r\n        }\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  port: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url.isAbsolute() && url.isAuthorityBased() && url.port!==undefined)\r\n        return url.port;\r\n      else\r\n        return \"\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute() && url.isAuthorityBased()) {\r\n        v = '' + v;\r\n        v = v.replace(/[^0-9].*$/, \"\");\r\n        v = v.replace(/^0+/, \"\");\r\n        if (v.length === 0) v = \"0\";\r\n        if (parseInt(v, 10) <= 65535) {\r\n          url.port = v;\r\n          output = url.toString();\r\n        }\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  pathname: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url.isAbsolute() && url.isHierarchical())\r\n        return url.path;\r\n      else\r\n        return \"\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute() && url.isHierarchical()) {\r\n        if (v.charAt(0) !== \"/\")\r\n          v = \"/\" + v;\r\n        v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/a-zA-Z0-9]/g, URL.percentEncode);\r\n        url.path = v;\r\n        output = url.toString();\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  search: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url.isAbsolute() && url.isHierarchical() && url.query!==undefined)\r\n        return \"?\" + url.query;\r\n      else\r\n        return \"\";\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute() && url.isHierarchical()) {\r\n        if (v.charAt(0) === \"?\") v = v.substring(1);\r\n        v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\r\n        url.query = v;\r\n        output = url.toString();\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  hash: {\r\n    get: function() {\r\n      var url = this._url;\r\n      if (url == null || url.fragment == null || url.fragment === '') {\r\n        return \"\";\r\n      } else {\r\n        return \"#\" + url.fragment;\r\n      }\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n\r\n      if (v.charAt(0) === \"#\") v = v.substring(1);\r\n      v = v.replace(/[^-+\\._~!$&'()*,;:=@\\/?a-zA-Z0-9]/g, URL.percentEncode);\r\n      url.fragment = v;\r\n      output = url.toString();\r\n\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  username: {\r\n    get: function() {\r\n      var url = this._url;\r\n      return url.username || '';\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute()) {\r\n        v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\:]/g, URL.percentEncode);\r\n        url.username = v;\r\n        output = url.toString();\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  password: {\r\n    get: function() {\r\n      var url = this._url;\r\n      return url.password || '';\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      if (url.isAbsolute()) {\r\n        if (v==='') {\r\n          url.password = null;\r\n        } else {\r\n          v = v.replace(/[\\x00-\\x1F\\x7F-\\uFFFF \"#<>?`\\/@\\\\]/g, URL.percentEncode);\r\n          url.password = v;\r\n        }\r\n        output = url.toString();\r\n      }\r\n      this.href = output;\r\n    },\r\n  },\r\n\r\n  origin: { get: function() {\r\n    var url = this._url;\r\n    if (url == null) { return ''; }\r\n    var originForPort = function(defaultPort) {\r\n      var origin = [url.scheme, url.host, +url.port || defaultPort];\r\n      // XXX should be \"unicode serialization\"\r\n      return origin[0] + '://' + origin[1] +\r\n        (origin[2] === defaultPort ? '' : (':' + origin[2]));\r\n    };\r\n    switch (url.scheme) {\r\n    case 'ftp':\r\n      return originForPort(21);\r\n    case 'gopher':\r\n      return originForPort(70);\r\n    case 'http':\r\n    case 'ws':\r\n      return originForPort(80);\r\n    case 'https':\r\n    case 'wss':\r\n      return originForPort(443);\r\n    default:\r\n      // this is what chrome does\r\n      return url.scheme + '://';\r\n    }\r\n  } },\r\n\r\n  /*\r\n  searchParams: {\r\n    get: function() {\r\n      var url = this._url;\r\n      // XXX\r\n    },\r\n    set: function(v) {\r\n      var output = this.href;\r\n      var url = new URL(output);\r\n      // XXX\r\n      this.href = output;\r\n    },\r\n  },\r\n  */\r\n});\r\n\r\nURLUtils._inherit = function(proto) {\r\n  // copy getters/setters from URLUtils to o.\r\n  Object.getOwnPropertyNames(URLUtils.prototype).forEach(function(p) {\r\n    if (p==='constructor' || p==='href') { return; }\r\n    var desc = Object.getOwnPropertyDescriptor(URLUtils.prototype, p);\r\n    Object.defineProperty(proto, p, desc);\r\n  });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/URLUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/Window.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/Window.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js\");\r\nvar EventTarget = __webpack_require__(/*! ./EventTarget */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/EventTarget.js\");\r\nvar Location = __webpack_require__(/*! ./Location */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Location.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nmodule.exports = Window;\r\n\r\nfunction Window(document) {\r\n  this.document = document || new DOMImplementation(null).createHTMLDocument(\"\");\r\n  this.document._scripting_enabled = true;\r\n  this.document.defaultView = this;\r\n  this.location = new Location(this, this.document._address || 'about:blank');\r\n}\r\n\r\nWindow.prototype = Object.create(EventTarget.prototype, {\r\n  console: { value: console },\r\n  history: { value: {\r\n    back: utils.nyi,\r\n    forward: utils.nyi,\r\n    go: utils.nyi\r\n  }},\r\n  navigator: { value: __webpack_require__(/*! ./NavigatorID */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NavigatorID.js\") },\r\n\r\n  // Self-referential properties\r\n  window: { get: function() { return this; }},\r\n  self: { get: function() { return this; }},\r\n  frames: { get: function() { return this; }},\r\n\r\n  // Self-referential properties for a top-level window\r\n  parent: { get: function() { return this; }},\r\n  top: { get: function() { return this; }},\r\n\r\n  // We don't support any other windows for now\r\n  length: { value: 0 },           // no frames\r\n  frameElement: { value: null },  // not part of a frame\r\n  opener: { value: null },        // not opened by another window\r\n\r\n  // The onload event handler.\r\n  // XXX: need to support a bunch of other event types, too,\r\n  // and have them interoperate with document.body.\r\n\r\n  onload: {\r\n    get: function() {\r\n      return this._getEventHandler(\"load\");\r\n    },\r\n    set: function(v) {\r\n      this._setEventHandler(\"load\", v);\r\n    }\r\n  },\r\n\r\n  // XXX This is a completely broken implementation\r\n  getComputedStyle: { value: function getComputedStyle(elt) {\r\n    return elt.style;\r\n  }}\r\n\r\n});\r\n\r\nutils.expose(__webpack_require__(/*! ./WindowTimers */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/WindowTimers.js\"), Window);\r\nutils.expose(__webpack_require__(/*! ./impl */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/impl.js\"), Window);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9XaW5kb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix3QkFBd0IsbUJBQU8sQ0FBQyw2RkFBcUI7QUFDckQsa0JBQWtCLG1CQUFPLENBQUMsaUZBQWU7QUFDekMsZUFBZSxtQkFBTyxDQUFDLDJFQUFZO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxxRUFBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixlQUFlLE9BQU8sbUJBQU8sQ0FBQyxpRkFBZSxHQUFHO0FBQ2hEO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQixlQUFlO0FBQzdDLFVBQVUsa0JBQWtCLGVBQWU7QUFDM0MsWUFBWSxrQkFBa0IsZUFBZTtBQUM3QztBQUNBO0FBQ0EsWUFBWSxrQkFBa0IsZUFBZTtBQUM3QyxTQUFTLGtCQUFrQixlQUFlO0FBQzFDO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEIsa0JBQWtCLGFBQWE7QUFDL0IsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLG1GQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMsbUVBQVEiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9XaW5kb3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBET01JbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vRE9NSW1wbGVtZW50YXRpb24nKTtcclxudmFyIEV2ZW50VGFyZ2V0ID0gcmVxdWlyZSgnLi9FdmVudFRhcmdldCcpO1xyXG52YXIgTG9jYXRpb24gPSByZXF1aXJlKCcuL0xvY2F0aW9uJyk7XHJcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gV2luZG93O1xyXG5cclxuZnVuY3Rpb24gV2luZG93KGRvY3VtZW50KSB7XHJcbiAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50IHx8IG5ldyBET01JbXBsZW1lbnRhdGlvbihudWxsKS5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIik7XHJcbiAgdGhpcy5kb2N1bWVudC5fc2NyaXB0aW5nX2VuYWJsZWQgPSB0cnVlO1xyXG4gIHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcgPSB0aGlzO1xyXG4gIHRoaXMubG9jYXRpb24gPSBuZXcgTG9jYXRpb24odGhpcywgdGhpcy5kb2N1bWVudC5fYWRkcmVzcyB8fCAnYWJvdXQ6YmxhbmsnKTtcclxufVxyXG5cclxuV2luZG93LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRUYXJnZXQucHJvdG90eXBlLCB7XHJcbiAgY29uc29sZTogeyB2YWx1ZTogY29uc29sZSB9LFxyXG4gIGhpc3Rvcnk6IHsgdmFsdWU6IHtcclxuICAgIGJhY2s6IHV0aWxzLm55aSxcclxuICAgIGZvcndhcmQ6IHV0aWxzLm55aSxcclxuICAgIGdvOiB1dGlscy5ueWlcclxuICB9fSxcclxuICBuYXZpZ2F0b3I6IHsgdmFsdWU6IHJlcXVpcmUoXCIuL05hdmlnYXRvcklEXCIpIH0sXHJcblxyXG4gIC8vIFNlbGYtcmVmZXJlbnRpYWwgcHJvcGVydGllc1xyXG4gIHdpbmRvdzogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXHJcbiAgc2VsZjogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXHJcbiAgZnJhbWVzOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9fSxcclxuXHJcbiAgLy8gU2VsZi1yZWZlcmVudGlhbCBwcm9wZXJ0aWVzIGZvciBhIHRvcC1sZXZlbCB3aW5kb3dcclxuICBwYXJlbnQ6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH19LFxyXG4gIHRvcDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfX0sXHJcblxyXG4gIC8vIFdlIGRvbid0IHN1cHBvcnQgYW55IG90aGVyIHdpbmRvd3MgZm9yIG5vd1xyXG4gIGxlbmd0aDogeyB2YWx1ZTogMCB9LCAgICAgICAgICAgLy8gbm8gZnJhbWVzXHJcbiAgZnJhbWVFbGVtZW50OiB7IHZhbHVlOiBudWxsIH0sICAvLyBub3QgcGFydCBvZiBhIGZyYW1lXHJcbiAgb3BlbmVyOiB7IHZhbHVlOiBudWxsIH0sICAgICAgICAvLyBub3Qgb3BlbmVkIGJ5IGFub3RoZXIgd2luZG93XHJcblxyXG4gIC8vIFRoZSBvbmxvYWQgZXZlbnQgaGFuZGxlci5cclxuICAvLyBYWFg6IG5lZWQgdG8gc3VwcG9ydCBhIGJ1bmNoIG9mIG90aGVyIGV2ZW50IHR5cGVzLCB0b28sXHJcbiAgLy8gYW5kIGhhdmUgdGhlbSBpbnRlcm9wZXJhdGUgd2l0aCBkb2N1bWVudC5ib2R5LlxyXG5cclxuICBvbmxvYWQ6IHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9nZXRFdmVudEhhbmRsZXIoXCJsb2FkXCIpO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24odikge1xyXG4gICAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIoXCJsb2FkXCIsIHYpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIFhYWCBUaGlzIGlzIGEgY29tcGxldGVseSBicm9rZW4gaW1wbGVtZW50YXRpb25cclxuICBnZXRDb21wdXRlZFN0eWxlOiB7IHZhbHVlOiBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsdCkge1xyXG4gICAgcmV0dXJuIGVsdC5zdHlsZTtcclxuICB9fVxyXG5cclxufSk7XHJcblxyXG51dGlscy5leHBvc2UocmVxdWlyZSgnLi9XaW5kb3dUaW1lcnMnKSwgV2luZG93KTtcclxudXRpbHMuZXhwb3NlKHJlcXVpcmUoJy4vaW1wbCcpLCBXaW5kb3cpO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/Window.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/WindowTimers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/WindowTimers.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n// https://html.spec.whatwg.org/multipage/webappapis.html#windowtimers\r\nvar WindowTimers = {\r\n  setTimeout: setTimeout,\r\n  clearTimeout: clearTimeout,\r\n  setInterval: setInterval,\r\n  clearInterval: clearInterval\r\n};\r\n\r\nmodule.exports = WindowTimers;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9XaW5kb3dUaW1lcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL1dpbmRvd1RpbWVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCN3aW5kb3d0aW1lcnNcclxudmFyIFdpbmRvd1RpbWVycyA9IHtcclxuICBzZXRUaW1lb3V0OiBzZXRUaW1lb3V0LFxyXG4gIGNsZWFyVGltZW91dDogY2xlYXJUaW1lb3V0LFxyXG4gIHNldEludGVydmFsOiBzZXRJbnRlcnZhbCxcclxuICBjbGVhckludGVydmFsOiBjbGVhckludGVydmFsXHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFdpbmRvd1RpbWVycztcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/WindowTimers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/attributes.js":
/*!***********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/attributes.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nexports.property = function(attr) {\r\n  if (Array.isArray(attr.type)) {\r\n    var valid = Object.create(null);\r\n    attr.type.forEach(function(val) {\r\n      valid[val.value || val] = val.alias || val;\r\n    });\r\n    var missingValueDefault = attr.missing;\r\n    if (missingValueDefault===undefined) { missingValueDefault = null; }\r\n    var invalidValueDefault = attr.invalid;\r\n    if (invalidValueDefault===undefined) { invalidValueDefault = missingValueDefault; }\r\n    return {\r\n      get: function() {\r\n        var v = this._getattr(attr.name);\r\n        if (v === null) return missingValueDefault;\r\n\r\n        v = valid[v.toLowerCase()];\r\n        if (v !== undefined) return v;\r\n        if (invalidValueDefault !== null) return invalidValueDefault;\r\n        return v;\r\n      },\r\n      set: function(v) {\r\n        this._setattr(attr.name, v);\r\n      }\r\n    };\r\n  }\r\n  else if (attr.type === Boolean) {\r\n    return {\r\n      get: function() {\r\n        return this.hasAttribute(attr.name);\r\n      },\r\n      set: function(v) {\r\n        if (v) {\r\n          this._setattr(attr.name, '');\r\n        }\r\n        else {\r\n          this.removeAttribute(attr.name);\r\n        }\r\n      }\r\n    };\r\n  }\r\n  else if (attr.type === Number ||\r\n           attr.type === \"long\" ||\r\n           attr.type === \"unsigned long\" ||\r\n           attr.type === \"limited unsigned long with fallback\") {\r\n    return numberPropDesc(attr);\r\n  }\r\n  else if (!attr.type || attr.type === String) {\r\n    return {\r\n      get: function() { return this._getattr(attr.name) || ''; },\r\n      set: function(v) {\r\n        if (attr.treatNullAsEmptyString && v === null) { v = ''; }\r\n        this._setattr(attr.name, v);\r\n      }\r\n    };\r\n  }\r\n  else if (typeof attr.type === 'function') {\r\n    return attr.type(attr.name, attr);\r\n  }\r\n  throw new Error('Invalid attribute definition');\r\n};\r\n\r\n// See http://www.whatwg.org/specs/web-apps/current-work/#reflect\r\n//\r\n// defval is the default value. If it is a function, then that function\r\n// will be invoked as a method of the element to obtain the default.\r\n// If no default is specified for a given attribute, then the default\r\n// depends on the type of the attribute, but since this function handles\r\n// 4 integer cases, you must specify the default value in each call\r\n//\r\n// min and max define a valid range for getting the attribute.\r\n//\r\n// setmin defines a minimum value when setting.  If the value is less\r\n// than that, then throw INDEX_SIZE_ERR.\r\n//\r\n// Conveniently, JavaScript's parseInt function appears to be\r\n// compatible with HTML's 'rules for parsing integers'\r\nfunction numberPropDesc(a) {\r\n  var def;\r\n  if(typeof a.default === 'function') {\r\n    def = a.default;\r\n  }\r\n  else if(typeof a.default === 'number') {\r\n    def = function() { return a.default; };\r\n  }\r\n  else {\r\n    def = function() { utils.assert(false, typeof a.default); };\r\n  }\r\n  var unsigned_long = (a.type === 'unsigned long');\r\n  var signed_long = (a.type === 'long');\r\n  var unsigned_fallback = (a.type === 'limited unsigned long with fallback');\r\n  var min = a.min, max = a.max, setmin = a.setmin;\r\n  if (min === undefined) {\r\n    if (unsigned_long) min = 0;\r\n    if (signed_long) min = -0x80000000;\r\n    if (unsigned_fallback) min = 1;\r\n  }\r\n  if (max === undefined) {\r\n    if (unsigned_long || signed_long || unsigned_fallback) max = 0x7FFFFFFF;\r\n  }\r\n\r\n  return {\r\n    get: function() {\r\n      var v = this._getattr(a.name);\r\n      var n = a.float ? parseFloat(v) : parseInt(v, 10);\r\n      if (v === null || !isFinite(n) || (min !== undefined && n < min) || (max !== undefined && n > max)) {\r\n        return def.call(this);\r\n      }\r\n      if (unsigned_long || signed_long || unsigned_fallback) {\r\n        if (!/^[ \\t\\n\\f\\r]*[-+]?[0-9]/.test(v)) { return def.call(this); }\r\n        n = n|0; // jshint ignore:line\r\n      }\r\n      return n;\r\n    },\r\n    set: function(v) {\r\n      if (!a.float) { v = Math.floor(v); }\r\n      if (setmin !== undefined && v < setmin) {\r\n        utils.IndexSizeError(a.name + ' set to ' + v);\r\n      }\r\n      if (unsigned_long) {\r\n        v = (v < 0 || v > 0x7FFFFFFF) ? def.call(this) :\r\n          (v|0);  // jshint ignore:line\r\n      } else if (unsigned_fallback) {\r\n        v = (v < 1 || v > 0x7FFFFFFF) ? def.call(this) :\r\n          (v|0); // jshint ignore:line\r\n      } else if (signed_long) {\r\n        v = (v < -0x80000000 || v > 0x7FFFFFFF) ? def.call(this) :\r\n          (v|0); // jshint ignore:line\r\n      }\r\n      this._setattr(a.name, String(v));\r\n    }\r\n  };\r\n}\r\n\r\n// This is a utility function for setting up change handler functions\r\n// for attributes like 'id' that require special handling when they change.\r\nexports.registerChangeHandler = function(c, name, handler) {\r\n  var p = c.prototype;\r\n\r\n  // If p does not already have its own _attributeChangeHandlers\r\n  // then create one for it, inheriting from the inherited\r\n  // _attributeChangeHandlers. At the top (for the Element class) the\r\n  // _attributeChangeHandlers object will be created with a null prototype.\r\n  if (!Object.prototype.hasOwnProperty.call(p, '_attributeChangeHandlers')) {\r\n    p._attributeChangeHandlers =\r\n      Object.create(p._attributeChangeHandlers || null);\r\n  }\r\n\r\n  p._attributeChangeHandlers[name] = handler;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/attributes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/config.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/config.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\r\n * This file defines Domino behaviour that can be externally configured.\r\n * To change these settings, set the relevant global property *before*\r\n * you call `require(\"domino\")`.\r\n */\r\n\r\nexports.isApiWritable = !globalThis.__domino_frozen__;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIFRoaXMgZmlsZSBkZWZpbmVzIERvbWlubyBiZWhhdmlvdXIgdGhhdCBjYW4gYmUgZXh0ZXJuYWxseSBjb25maWd1cmVkLlxyXG4gKiBUbyBjaGFuZ2UgdGhlc2Ugc2V0dGluZ3MsIHNldCB0aGUgcmVsZXZhbnQgZ2xvYmFsIHByb3BlcnR5ICpiZWZvcmUqXHJcbiAqIHlvdSBjYWxsIGByZXF1aXJlKFwiZG9taW5vXCIpYC5cclxuICovXHJcblxyXG5leHBvcnRzLmlzQXBpV3JpdGFibGUgPSAhZ2xvYmFsVGhpcy5fX2RvbWlub19mcm96ZW5fXztcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/defineElement.js":
/*!**************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/defineElement.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\nvar attributes = __webpack_require__(/*! ./attributes */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/attributes.js\");\r\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/config.js\").isApiWritable);\r\n\r\nmodule.exports = function(spec, defaultConstructor, tagList, tagNameToImpl) {\r\n  var c = spec.ctor;\r\n  if (c) {\r\n    var props = spec.props || {};\r\n\r\n    if (spec.attributes) {\r\n      for (var n in spec.attributes) {\r\n        var attr = spec.attributes[n];\r\n        if (typeof attr !== 'object' || Array.isArray(attr)) attr = {type: attr};\r\n        if (!attr.name) attr.name = n.toLowerCase();\r\n        props[n] = attributes.property(attr);\r\n      }\r\n    }\r\n\r\n    props.constructor = { value : c, writable: isApiWritable };\r\n    c.prototype = Object.create((spec.superclass || defaultConstructor).prototype, props);\r\n    if (spec.events) {\r\n      addEventHandlers(c, spec.events);\r\n    }\r\n    tagList[spec.name] = c;\r\n  }\r\n  else {\r\n    c = defaultConstructor;\r\n  }\r\n\r\n  (spec.tags || spec.tag && [spec.tag] || []).forEach(function(tag) {\r\n    tagNameToImpl[tag] = c;\r\n  });\r\n\r\n  return c;\r\n};\r\n\r\nfunction EventHandlerBuilder(body, document, form, element) {\r\n  this.body = body;\r\n  this.document = document;\r\n  this.form = form;\r\n  this.element = element;\r\n}\r\n\r\nEventHandlerBuilder.prototype.build = function () {\r\n  return () => {};\r\n};\r\n\r\nfunction EventHandlerChangeHandler(elt, name, oldval, newval) {\r\n  var doc = elt.ownerDocument || Object.create(null);\r\n  var form = elt.form || Object.create(null);\r\n  elt[name] = new EventHandlerBuilder(newval, doc, form, elt).build();\r\n}\r\n\r\nfunction addEventHandlers(c, eventHandlerTypes) {\r\n  var p = c.prototype;\r\n  eventHandlerTypes.forEach(function(type) {\r\n    // Define the event handler registration IDL attribute for this type\r\n    Object.defineProperty(p, \"on\" + type, {\r\n      get: function() {\r\n        return this._getEventHandler(type);\r\n      },\r\n      set: function(v) {\r\n        this._setEventHandler(type, v);\r\n      },\r\n    });\r\n\r\n    // Define special behavior for the content attribute as well\r\n    attributes.registerChangeHandler(c, \"on\" + type, EventHandlerChangeHandler);\r\n  });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYztBQUN2QyxvQkFBb0IsNEdBQWlDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9kZWZpbmVFbGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIGF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZXMnKTtcclxudmFyIGlzQXBpV3JpdGFibGUgPSByZXF1aXJlKFwiLi9jb25maWdcIikuaXNBcGlXcml0YWJsZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3BlYywgZGVmYXVsdENvbnN0cnVjdG9yLCB0YWdMaXN0LCB0YWdOYW1lVG9JbXBsKSB7XHJcbiAgdmFyIGMgPSBzcGVjLmN0b3I7XHJcbiAgaWYgKGMpIHtcclxuICAgIHZhciBwcm9wcyA9IHNwZWMucHJvcHMgfHwge307XHJcblxyXG4gICAgaWYgKHNwZWMuYXR0cmlidXRlcykge1xyXG4gICAgICBmb3IgKHZhciBuIGluIHNwZWMuYXR0cmlidXRlcykge1xyXG4gICAgICAgIHZhciBhdHRyID0gc3BlYy5hdHRyaWJ1dGVzW25dO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXR0ciAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShhdHRyKSkgYXR0ciA9IHt0eXBlOiBhdHRyfTtcclxuICAgICAgICBpZiAoIWF0dHIubmFtZSkgYXR0ci5uYW1lID0gbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHByb3BzW25dID0gYXR0cmlidXRlcy5wcm9wZXJ0eShhdHRyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3BzLmNvbnN0cnVjdG9yID0geyB2YWx1ZSA6IGMsIHdyaXRhYmxlOiBpc0FwaVdyaXRhYmxlIH07XHJcbiAgICBjLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoKHNwZWMuc3VwZXJjbGFzcyB8fCBkZWZhdWx0Q29uc3RydWN0b3IpLnByb3RvdHlwZSwgcHJvcHMpO1xyXG4gICAgaWYgKHNwZWMuZXZlbnRzKSB7XHJcbiAgICAgIGFkZEV2ZW50SGFuZGxlcnMoYywgc3BlYy5ldmVudHMpO1xyXG4gICAgfVxyXG4gICAgdGFnTGlzdFtzcGVjLm5hbWVdID0gYztcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBjID0gZGVmYXVsdENvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgKHNwZWMudGFncyB8fCBzcGVjLnRhZyAmJiBbc3BlYy50YWddIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xyXG4gICAgdGFnTmFtZVRvSW1wbFt0YWddID0gYztcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGM7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBFdmVudEhhbmRsZXJCdWlsZGVyKGJvZHksIGRvY3VtZW50LCBmb3JtLCBlbGVtZW50KSB7XHJcbiAgdGhpcy5ib2R5ID0gYm9keTtcclxuICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgdGhpcy5mb3JtID0gZm9ybTtcclxuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG59XHJcblxyXG5FdmVudEhhbmRsZXJCdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gKCkgPT4ge307XHJcbn07XHJcblxyXG5mdW5jdGlvbiBFdmVudEhhbmRsZXJDaGFuZ2VIYW5kbGVyKGVsdCwgbmFtZSwgb2xkdmFsLCBuZXd2YWwpIHtcclxuICB2YXIgZG9jID0gZWx0Lm93bmVyRG9jdW1lbnQgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICB2YXIgZm9ybSA9IGVsdC5mb3JtIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgZWx0W25hbWVdID0gbmV3IEV2ZW50SGFuZGxlckJ1aWxkZXIobmV3dmFsLCBkb2MsIGZvcm0sIGVsdCkuYnVpbGQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkRXZlbnRIYW5kbGVycyhjLCBldmVudEhhbmRsZXJUeXBlcykge1xyXG4gIHZhciBwID0gYy5wcm90b3R5cGU7XHJcbiAgZXZlbnRIYW5kbGVyVHlwZXMuZm9yRWFjaChmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAvLyBEZWZpbmUgdGhlIGV2ZW50IGhhbmRsZXIgcmVnaXN0cmF0aW9uIElETCBhdHRyaWJ1dGUgZm9yIHRoaXMgdHlwZVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAsIFwib25cIiArIHR5cGUsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RXZlbnRIYW5kbGVyKHR5cGUpO1xyXG4gICAgICB9LFxyXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodHlwZSwgdik7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBEZWZpbmUgc3BlY2lhbCBiZWhhdmlvciBmb3IgdGhlIGNvbnRlbnQgYXR0cmlidXRlIGFzIHdlbGxcclxuICAgIGF0dHJpYnV0ZXMucmVnaXN0ZXJDaGFuZ2VIYW5kbGVyKGMsIFwib25cIiArIHR5cGUsIEV2ZW50SGFuZGxlckNoYW5nZUhhbmRsZXIpO1xyXG4gIH0pO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/defineElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/events.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/events.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\nmodule.exports = {\r\n  Event: __webpack_require__(/*! ./Event */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Event.js\"),\r\n  UIEvent: __webpack_require__(/*! ./UIEvent */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/UIEvent.js\"),\r\n  MouseEvent: __webpack_require__(/*! ./MouseEvent */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/MouseEvent.js\"),\r\n  CustomEvent: __webpack_require__(/*! ./CustomEvent */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CustomEvent.js\")\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9ldmVudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLFNBQVMsbUJBQU8sQ0FBQyxxRUFBUztBQUMxQixXQUFXLG1CQUFPLENBQUMseUVBQVc7QUFDOUIsY0FBYyxtQkFBTyxDQUFDLCtFQUFjO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyxpRkFBZTtBQUN0QyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL2V2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgRXZlbnQ6IHJlcXVpcmUoJy4vRXZlbnQnKSxcclxuICBVSUV2ZW50OiByZXF1aXJlKCcuL1VJRXZlbnQnKSxcclxuICBNb3VzZUV2ZW50OiByZXF1aXJlKCcuL01vdXNlRXZlbnQnKSxcclxuICBDdXN0b21FdmVudDogcmVxdWlyZSgnLi9DdXN0b21FdmVudCcpXHJcbn07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/htmlelts.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/htmlelts.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar Node = __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\");\r\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\");\r\nvar CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar URLUtils = __webpack_require__(/*! ./URLUtils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/URLUtils.js\");\r\nvar defineElement = __webpack_require__(/*! ./defineElement */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/defineElement.js\");\r\n\r\nvar htmlElements = exports.elements = {};\r\nvar htmlNameToImpl = Object.create(null);\r\n\r\nexports.createElement = function(doc, localName, prefix) {\r\n  var impl = htmlNameToImpl[localName] || HTMLUnknownElement;\r\n  return new impl(doc, localName, prefix);\r\n};\r\n\r\nfunction define(spec) {\r\n  return defineElement(spec, HTMLElement, htmlElements, htmlNameToImpl);\r\n}\r\n\r\nfunction URL(attr) {\r\n  return {\r\n    get: function() {\r\n      var v = this._getattr(attr);\r\n      if (v === null) { return ''; }\r\n      var url = this.doc._resolve(v);\r\n      return (url === null) ? v : url;\r\n    },\r\n    set: function(value) {\r\n      this._setattr(attr, value);\r\n    }\r\n  };\r\n}\r\n\r\nfunction CORS(attr) {\r\n  return {\r\n    get: function() {\r\n      var v = this._getattr(attr);\r\n      if (v === null) { return null; }\r\n      if (v.toLowerCase() === 'use-credentials') { return 'use-credentials'; }\r\n      return 'anonymous';\r\n    },\r\n    set: function(value) {\r\n      if (value===null || value===undefined) {\r\n        this.removeAttribute(attr);\r\n      } else {\r\n        this._setattr(attr, value);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nconst REFERRER = {\r\n  type: [\"\", \"no-referrer\", \"no-referrer-when-downgrade\", \"same-origin\", \"origin\", \"strict-origin\", \"origin-when-cross-origin\", \"strict-origin-when-cross-origin\", \"unsafe-url\"],\r\n  missing: '',\r\n};\r\n\r\n\r\n// XXX: the default value for tabIndex should be 0 if the element is\r\n// focusable and -1 if it is not.  But the full definition of focusable\r\n// is actually hard to compute, so for now, I'll follow Firefox and\r\n// just base the default value on the type of the element.\r\nvar focusableElements = {\r\n  \"A\":true, \"LINK\":true, \"BUTTON\":true, \"INPUT\":true,\r\n  \"SELECT\":true, \"TEXTAREA\":true, \"COMMAND\":true\r\n};\r\n\r\nvar HTMLFormElement = function(doc, localName, prefix) {\r\n  HTMLElement.call(this, doc, localName, prefix);\r\n  this._form = null; // Prevent later deoptimization\r\n};\r\n\r\nvar HTMLElement = exports.HTMLElement = define({\r\n  superclass: Element,\r\n  name: 'HTMLElement',\r\n  ctor: function HTMLElement(doc, localName, prefix) {\r\n    Element.call(this, doc, localName, utils.NAMESPACE.HTML, prefix);\r\n  },\r\n  props: {\r\n    dangerouslySetInnerHTML: {\r\n      set: function (v) {\r\n        this._innerHTML = v;\r\n      },\r\n    },\r\n    innerHTML: {\r\n      get: function() {\r\n        return this.serialize();\r\n      },\r\n      set: function(v) {\r\n        var parser = this.ownerDocument.implementation.mozHTMLParser(\r\n          this.ownerDocument._address,\r\n          this);\r\n        parser.parse(v===null ? '' : String(v), true);\r\n\r\n        // Remove any existing children of this node\r\n        var target = (this instanceof htmlNameToImpl.template) ?\r\n            this.content : this;\r\n        while(target.hasChildNodes())\r\n          target.removeChild(target.firstChild);\r\n\r\n        // Now copy newly parsed children to this node\r\n        target.appendChild(parser._asDocumentFragment());\r\n      }\r\n    },\r\n    style: { get: function() {\r\n      if (!this._style)\r\n        this._style = new CSSStyleDeclaration(this);\r\n      return this._style;\r\n    }, set: function(v) {\r\n        if (v===null||v===undefined) { v = ''; }\r\n        this._setattr('style', String(v));\r\n    }},\r\n\r\n    // These can't really be implemented server-side in a reasonable way.\r\n    blur: { value: function() {}},\r\n    focus: { value: function() {}},\r\n    forceSpellCheck: { value: function() {}},\r\n\r\n    click: { value: function() {\r\n      if (this._click_in_progress) return;\r\n      this._click_in_progress = true;\r\n      try {\r\n        if (this._pre_click_activation_steps)\r\n          this._pre_click_activation_steps();\r\n\r\n        var event = this.ownerDocument.createEvent(\"MouseEvent\");\r\n        event.initMouseEvent(\"click\", true, true,\r\n          this.ownerDocument.defaultView, 1,\r\n          0, 0, 0, 0,\r\n          // These 4 should be initialized with\r\n          // the actually current keyboard state\r\n          // somehow...\r\n          false, false, false, false,\r\n          0, null\r\n        );\r\n\r\n        // Dispatch this as an untrusted event since it is synthetic\r\n        var success = this.dispatchEvent(event);\r\n\r\n        if (success) {\r\n          if (this._post_click_activation_steps)\r\n            this._post_click_activation_steps(event);\r\n        }\r\n        else {\r\n          if (this._cancelled_activation_steps)\r\n            this._cancelled_activation_steps();\r\n        }\r\n      }\r\n      finally {\r\n        this._click_in_progress = false;\r\n      }\r\n    }},\r\n    submit: { value: utils.nyi },\r\n  },\r\n  attributes: {\r\n    title: String,\r\n    lang: String,\r\n    dir: {type: [\"ltr\", \"rtl\", \"auto\"], missing: ''},\r\n    draggable: {type: [\"true\", \"false\"], treatNullAsEmptyString: true },\r\n    spellcheck: {type: [\"true\", \"false\"], missing: ''},\r\n    enterKeyHint: {type: [\"enter\", \"done\", \"go\", \"next\", \"previous\", \"search\", \"send\"], missing: ''},\r\n    autoCapitalize: {type: [\"off\", \"on\", \"none\", \"sentences\", \"words\", \"characters\"], missing: '' },\r\n    autoFocus: Boolean,\r\n    accessKey: String,\r\n    nonce: String,\r\n    hidden: Boolean,\r\n    translate: {type: [\"no\", \"yes\"], missing: '' },\r\n    tabIndex: {type: \"long\", default: function() {\r\n      if (this.tagName in focusableElements ||\r\n        this.contentEditable)\r\n        return 0;\r\n      else\r\n        return -1;\r\n    }}\r\n  },\r\n  events: [\r\n    \"abort\", \"canplay\", \"canplaythrough\", \"change\", \"click\", \"contextmenu\",\r\n    \"cuechange\", \"dblclick\", \"drag\", \"dragend\", \"dragenter\", \"dragleave\",\r\n    \"dragover\", \"dragstart\", \"drop\", \"durationchange\", \"emptied\", \"ended\",\r\n    \"input\", \"invalid\", \"keydown\", \"keypress\", \"keyup\", \"loadeddata\",\r\n    \"loadedmetadata\", \"loadstart\", \"mousedown\", \"mousemove\", \"mouseout\",\r\n    \"mouseover\", \"mouseup\", \"mousewheel\", \"pause\", \"play\", \"playing\",\r\n    \"progress\", \"ratechange\", \"readystatechange\", \"reset\", \"seeked\",\r\n    \"seeking\", \"select\", \"show\", \"stalled\", \"submit\", \"suspend\",\r\n    \"timeupdate\", \"volumechange\", \"waiting\",\r\n\r\n    // These last 5 event types will be overriden by HTMLBodyElement\r\n    \"blur\", \"error\", \"focus\", \"load\", \"scroll\"\r\n  ]\r\n});\r\n\r\n\r\n// XXX: reflect contextmenu as contextMenu, with element type\r\n\r\n\r\n// style: the spec doesn't call this a reflected attribute.\r\n//   may want to handle it manually.\r\n\r\n// contentEditable: enumerated, not clear if it is actually\r\n// reflected or requires custom getter/setter. Not listed as\r\n// \"limited to known values\".  Raises syntax_err on bad setting,\r\n// so I think this is custom.\r\n\r\n// contextmenu: content is element id, idl type is an element\r\n// draggable: boolean, but not a reflected attribute\r\n// dropzone: reflected SettableTokenList, experimental, so don't\r\n//   implement it right away.\r\n\r\n// data-* attributes: need special handling in setAttribute?\r\n// Or maybe that isn't necessary. Can I just scan the attribute list\r\n// when building the dataset?  Liveness and caching issues?\r\n\r\n// microdata attributes: many are simple reflected attributes, but\r\n// I'm not going to implement this now.\r\n\r\n\r\nvar HTMLUnknownElement = define({\r\n  name: 'HTMLUnknownElement',\r\n  ctor: function HTMLUnknownElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\n\r\nvar formAssociatedProps = {\r\n  // See http://www.w3.org/TR/html5/association-of-controls-and-forms.html#form-owner\r\n  form: { get: function() {\r\n    return this._form;\r\n  }}\r\n};\r\n\r\ndefine({\r\n  tag: 'a',\r\n  name: 'HTMLAnchorElement',\r\n  ctor: function HTMLAnchorElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    _post_click_activation_steps: { value: function(e) {\r\n      if (this.href) {\r\n        // Follow the link\r\n        // XXX: this is just a quick hack\r\n        // XXX: the HTML spec probably requires more than this\r\n        this.ownerDocument.defaultView.location = this.href;\r\n      }\r\n    }},\r\n  },\r\n  attributes: {\r\n    href: URL,\r\n    ping: String,\r\n    download: String,\r\n    target: String,\r\n    rel: String,\r\n    media: String,\r\n    hreflang: String,\r\n    type: String,\r\n    referrerPolicy: REFERRER,\r\n    // Obsolete\r\n    coords: String,\r\n    charset: String,\r\n    name: String,\r\n    rev: String,\r\n    shape: String,\r\n  }\r\n});\r\n// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils\r\nURLUtils._inherit(htmlNameToImpl.a.prototype);\r\n\r\ndefine({\r\n  tag: 'area',\r\n  name: 'HTMLAreaElement',\r\n  ctor: function HTMLAreaElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    alt: String,\r\n    target: String,\r\n    download: String,\r\n    rel: String,\r\n    media: String,\r\n    href: URL,\r\n    hreflang: String,\r\n    type: String,\r\n    shape: String,\r\n    coords: String,\r\n    ping: String,\r\n    // XXX: also reflect relList\r\n    referrerPolicy: REFERRER,\r\n    // Obsolete\r\n    noHref: Boolean,\r\n  }\r\n});\r\n// Latest WhatWG spec says these methods come via HTMLHyperlinkElementUtils\r\nURLUtils._inherit(htmlNameToImpl.area.prototype);\r\n\r\ndefine({\r\n  tag: 'br',\r\n  name: 'HTMLBRElement',\r\n  ctor: function HTMLBRElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    clear: String\r\n  },\r\n});\r\n\r\ndefine({\r\n  tag: 'base',\r\n  name: 'HTMLBaseElement',\r\n  ctor: function HTMLBaseElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    \"target\": String\r\n  }\r\n});\r\n\r\n\r\ndefine({\r\n  tag: 'body',\r\n  name: 'HTMLBodyElement',\r\n  ctor: function HTMLBodyElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  // Certain event handler attributes on a <body> tag actually set\r\n  // handlers for the window rather than just that element.  Define\r\n  // getters and setters for those here.  Note that some of these override\r\n  // properties on HTMLElement.prototype.\r\n  // XXX: If I add support for <frameset>, these have to go there, too\r\n  // XXX\r\n  // When the Window object is implemented, these attribute will have\r\n  // to work with the same-named attributes on the Window.\r\n  events: [\r\n    \"afterprint\", \"beforeprint\", \"beforeunload\", \"blur\", \"error\",\r\n    \"focus\",\"hashchange\", \"load\", \"message\", \"offline\", \"online\",\r\n    \"pagehide\", \"pageshow\",\"popstate\",\"resize\",\"scroll\",\"storage\",\"unload\",\r\n  ],\r\n  attributes: {\r\n    // Obsolete\r\n    text: { type: String, treatNullAsEmptyString: true },\r\n    link: { type: String, treatNullAsEmptyString: true },\r\n    vLink: { type: String, treatNullAsEmptyString: true },\r\n    aLink: { type: String, treatNullAsEmptyString: true },\r\n    bgColor: { type: String, treatNullAsEmptyString: true },\r\n    background: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'button',\r\n  name: 'HTMLButtonElement',\r\n  ctor: function HTMLButtonElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    name: String,\r\n    value: String,\r\n    disabled: Boolean,\r\n    autofocus: Boolean,\r\n    type: { type:[\"submit\", \"reset\", \"button\", \"menu\"], missing: 'submit' },\r\n    formTarget: String,\r\n    formAction: URL,\r\n    formNoValidate: Boolean,\r\n    formMethod: { type: [\"get\", \"post\", \"dialog\"], invalid: 'get', missing: '' },\r\n    formEnctype: { type: [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"], invalid: \"application/x-www-form-urlencoded\", missing: '' },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'dl',\r\n  name: 'HTMLDListElement',\r\n  ctor: function HTMLDListElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    compact: Boolean,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'data',\r\n  name: 'HTMLDataElement',\r\n  ctor: function HTMLDataElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    value: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'datalist',\r\n  name: 'HTMLDataListElement',\r\n  ctor: function HTMLDataListElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'details',\r\n  name: 'HTMLDetailsElement',\r\n  ctor: function HTMLDetailsElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    \"open\": Boolean\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'div',\r\n  name: 'HTMLDivElement',\r\n  ctor: function HTMLDivElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'embed',\r\n  name: 'HTMLEmbedElement',\r\n  ctor: function HTMLEmbedElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    src: URL,\r\n    type: String,\r\n    width: String,\r\n    height: String,\r\n    // Obsolete\r\n    align: String,\r\n    name: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'fieldset',\r\n  name: 'HTMLFieldSetElement',\r\n  ctor: function HTMLFieldSetElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    disabled: Boolean,\r\n    name: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'form',\r\n  name: 'HTMLFormElement',\r\n  ctor: function HTMLFormElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    action: String,\r\n    autocomplete: {type:['on', 'off'], missing: 'on'},\r\n    name: String,\r\n    acceptCharset: {name: \"accept-charset\"},\r\n    target: String,\r\n    noValidate: Boolean,\r\n    method: { type: [\"get\", \"post\", \"dialog\"], invalid: 'get', missing: 'get' },\r\n    // Both enctype and encoding reflect the enctype content attribute\r\n    enctype: { type: [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"], invalid: \"application/x-www-form-urlencoded\", missing: \"application/x-www-form-urlencoded\" },\r\n    encoding: {name: 'enctype', type: [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"], invalid: \"application/x-www-form-urlencoded\", missing: \"application/x-www-form-urlencoded\" },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'hr',\r\n  name: 'HTMLHRElement',\r\n  ctor: function HTMLHRElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n    color: String,\r\n    noShade: Boolean,\r\n    size: String,\r\n    width: String,\r\n  },\r\n});\r\n\r\ndefine({\r\n  tag: 'head',\r\n  name: 'HTMLHeadElement',\r\n  ctor: function HTMLHeadElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tags: ['h1','h2','h3','h4','h5','h6'],\r\n  name: 'HTMLHeadingElement',\r\n  ctor: function HTMLHeadingElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n  },\r\n});\r\n\r\ndefine({\r\n  tag: 'html',\r\n  name: 'HTMLHtmlElement',\r\n  ctor: function HTMLHtmlElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    xmlns: URL,\r\n    // Obsolete\r\n    version: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'iframe',\r\n  name: 'HTMLIFrameElement',\r\n  ctor: function HTMLIFrameElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    src: URL,\r\n    srcdoc: String,\r\n    name: String,\r\n    width: String,\r\n    height: String,\r\n    // XXX: sandbox is a reflected settable token list\r\n    seamless: Boolean,\r\n    allow: Boolean,\r\n    allowFullscreen: Boolean,\r\n    allowUserMedia: Boolean,\r\n    allowPaymentRequest: Boolean,\r\n    referrerPolicy: REFERRER,\r\n    loading: { type:['eager','lazy'], treatNullAsEmptyString: true },\r\n    // Obsolete\r\n    align: String,\r\n    scrolling: String,\r\n    frameBorder: String,\r\n    longDesc: URL,\r\n    marginHeight: { type: String, treatNullAsEmptyString: true },\r\n    marginWidth: { type: String, treatNullAsEmptyString: true },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'img',\r\n  name: 'HTMLImageElement',\r\n  ctor: function HTMLImageElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    alt: String,\r\n    src: URL,\r\n    srcset: String,\r\n    crossOrigin: CORS,\r\n    useMap: String,\r\n    isMap: Boolean,\r\n    sizes: String,\r\n    height: { type: \"unsigned long\", default: 0 },\r\n    width: { type: \"unsigned long\", default: 0 },\r\n    referrerPolicy: REFERRER,\r\n    loading: { type:['eager','lazy'], missing: '' },\r\n    // Obsolete:\r\n    name: String,\r\n    lowsrc: URL,\r\n    align: String,\r\n    hspace: { type: \"unsigned long\", default: 0 },\r\n    vspace: { type: \"unsigned long\", default: 0 },\r\n    longDesc: URL,\r\n    border: { type: String, treatNullAsEmptyString: true },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'input',\r\n  name: 'HTMLInputElement',\r\n  ctor: function HTMLInputElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    form: formAssociatedProps.form,\r\n    _post_click_activation_steps: { value: function(e) {\r\n      if (this.type === 'checkbox') {\r\n        this.checked = !this.checked;\r\n      }\r\n      else if (this.type === 'radio') {\r\n        var group = this.form.getElementsByName(this.name);\r\n        for (var i=group.length-1; i >= 0; i--) {\r\n          var el = group[i];\r\n          el.checked = (el === this);\r\n        }\r\n      }\r\n    }},\r\n  },\r\n  attributes: {\r\n    name: String,\r\n    disabled: Boolean,\r\n    autofocus: Boolean,\r\n    accept: String,\r\n    alt: String,\r\n    max: String,\r\n    min: String,\r\n    pattern: String,\r\n    placeholder: String,\r\n    step: String,\r\n    dirName: String,\r\n    defaultValue: {name: 'value'},\r\n    multiple: Boolean,\r\n    required: Boolean,\r\n    readOnly: Boolean,\r\n    checked: Boolean,\r\n    value: String,\r\n    src: URL,\r\n    defaultChecked: {name: 'checked', type: Boolean},\r\n    size: {type: 'unsigned long', default: 20, min: 1, setmin: 1},\r\n    width: {type: 'unsigned long', min: 0, setmin: 0, default: 0},\r\n    height: {type: 'unsigned long', min: 0, setmin: 0, default: 0},\r\n    minLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},\r\n    maxLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},\r\n    autocomplete: String, // It's complicated\r\n    type: { type:\r\n            [\"text\", \"hidden\", \"search\", \"tel\", \"url\", \"email\", \"password\",\r\n             \"datetime\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\",\r\n             \"number\", \"range\", \"color\", \"checkbox\", \"radio\", \"file\", \"submit\",\r\n             \"image\", \"reset\", \"button\"],\r\n            missing: 'text' },\r\n    formTarget: String,\r\n    formNoValidate: Boolean,\r\n    formMethod: { type: [\"get\", \"post\"], invalid: 'get', missing: '' },\r\n    formEnctype: { type: [\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"], invalid: \"application/x-www-form-urlencoded\", missing: '' },\r\n    inputMode: { type: [ \"verbatim\", \"latin\", \"latin-name\", \"latin-prose\", \"full-width-latin\", \"kana\", \"kana-name\", \"katakana\", \"numeric\", \"tel\", \"email\", \"url\" ], missing: '' },\r\n    // Obsolete\r\n    align: String,\r\n    useMap: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'keygen',\r\n  name: 'HTMLKeygenElement',\r\n  ctor: function HTMLKeygenElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    name: String,\r\n    disabled: Boolean,\r\n    autofocus: Boolean,\r\n    challenge: String,\r\n    keytype: { type:[\"rsa\"], missing: '' },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'li',\r\n  name: 'HTMLLIElement',\r\n  ctor: function HTMLLIElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    value: {type: \"long\", default: 0},\r\n    // Obsolete\r\n    type: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'label',\r\n  name: 'HTMLLabelElement',\r\n  ctor: function HTMLLabelElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    htmlFor: {name: 'for', type: String}\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'legend',\r\n  name: 'HTMLLegendElement',\r\n  ctor: function HTMLLegendElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String\r\n  },\r\n});\r\n\r\ndefine({\r\n  tag: 'link',\r\n  name: 'HTMLLinkElement',\r\n  ctor: function HTMLLinkElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // XXX Reflect DOMSettableTokenList sizes also DOMTokenList relList\r\n    href: URL,\r\n    rel: String,\r\n    media: String,\r\n    hreflang: String,\r\n    type: String,\r\n    crossOrigin: CORS,\r\n    nonce: String,\r\n    integrity: String,\r\n    referrerPolicy: REFERRER,\r\n    imageSizes: String,\r\n    imageSrcset: String,\r\n    // Obsolete\r\n    charset: String,\r\n    rev: String,\r\n    target: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'map',\r\n  name: 'HTMLMapElement',\r\n  ctor: function HTMLMapElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    name: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'menu',\r\n  name: 'HTMLMenuElement',\r\n  ctor: function HTMLMenuElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // XXX: not quite right, default should be popup if parent element is\r\n    // popup.\r\n    type: { type: [ 'context', 'popup', 'toolbar' ], missing: 'toolbar' },\r\n    label: String,\r\n    // Obsolete\r\n    compact: Boolean,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'meta',\r\n  name: 'HTMLMetaElement',\r\n  ctor: function HTMLMetaElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    name: String,\r\n    content: String,\r\n    httpEquiv: {name: 'http-equiv', type: String},\r\n    // Obsolete\r\n    scheme: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'meter',\r\n  name: 'HTMLMeterElement',\r\n  ctor: function HTMLMeterElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps\r\n});\r\n\r\ndefine({\r\n  tags: ['ins', 'del'],\r\n  name: 'HTMLModElement',\r\n  ctor: function HTMLModElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    cite: URL,\r\n    dateTime: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'ol',\r\n  name: 'HTMLOListElement',\r\n  ctor: function HTMLOListElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    // Utility function (see the start attribute default value). Returns\r\n    // the number of <li> children of this element\r\n    _numitems: { get: function() {\r\n      var items = 0;\r\n      this.childNodes.forEach(function(n) {\r\n        if (n.nodeType === Node.ELEMENT_NODE && n.tagName === \"LI\")\r\n          items++;\r\n      });\r\n      return items;\r\n    }}\r\n  },\r\n  attributes: {\r\n    type: String,\r\n    reversed: Boolean,\r\n    start: {\r\n      type: \"long\",\r\n      default: function() {\r\n       // The default value of the start attribute is 1 unless the list is\r\n       // reversed. Then it is the # of li children\r\n       if (this.reversed)\r\n         return this._numitems;\r\n       else\r\n         return 1;\r\n      }\r\n    },\r\n    // Obsolete\r\n    compact: Boolean,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'object',\r\n  name: 'HTMLObjectElement',\r\n  ctor: function HTMLObjectElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    data: URL,\r\n    type: String,\r\n    name: String,\r\n    useMap: String,\r\n    typeMustMatch: Boolean,\r\n    width: String,\r\n    height: String,\r\n    // Obsolete\r\n    align: String,\r\n    archive: String,\r\n    code: String,\r\n    declare: Boolean,\r\n    hspace: { type: \"unsigned long\", default: 0 },\r\n    standby: String,\r\n    vspace: { type: \"unsigned long\", default: 0 },\r\n    codeBase: URL,\r\n    codeType: String,\r\n    border: { type: String, treatNullAsEmptyString: true },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'optgroup',\r\n  name: 'HTMLOptGroupElement',\r\n  ctor: function HTMLOptGroupElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    disabled: Boolean,\r\n    label: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'option',\r\n  name: 'HTMLOptionElement',\r\n  ctor: function HTMLOptionElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    form: { get: function() {\r\n      var p = this.parentNode;\r\n      while (p && p.nodeType === Node.ELEMENT_NODE) {\r\n        if (p.localName === 'select') return p.form;\r\n        p = p.parentNode;\r\n      }\r\n    }},\r\n    value: {\r\n      get: function() { return this._getattr('value') || this.text; },\r\n      set: function(v) { this._setattr('value', v); },\r\n    },\r\n    text: {\r\n      get: function() {\r\n        // Strip and collapse whitespace\r\n        return this.textContent.replace(/[ \\t\\n\\f\\r]+/g, ' ').trim();\r\n      },\r\n      set: function(v) { this.textContent = v; },\r\n    },\r\n    // missing: index\r\n  },\r\n  attributes: {\r\n    disabled: Boolean,\r\n    defaultSelected: {name: 'selected', type: Boolean},\r\n    label: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'output',\r\n  name: 'HTMLOutputElement',\r\n  ctor: function HTMLOutputElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    // XXX Reflect for/htmlFor as a settable token list\r\n    name: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'p',\r\n  name: 'HTMLParagraphElement',\r\n  ctor: function HTMLParagraphElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'param',\r\n  name: 'HTMLParamElement',\r\n  ctor: function HTMLParamElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    name: String,\r\n    value: String,\r\n    // Obsolete\r\n    type: String,\r\n    valueType: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tags: ['pre',/*legacy elements:*/'listing','xmp'],\r\n  name: 'HTMLPreElement',\r\n  ctor: function HTMLPreElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    width: { type: \"long\", default: 0 },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'progress',\r\n  name: 'HTMLProgressElement',\r\n  ctor: function HTMLProgressElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: formAssociatedProps,\r\n  attributes: {\r\n    max: {type: Number, float: true, default: 1.0, min: 0}\r\n  }\r\n});\r\n\r\ndefine({\r\n  tags: ['q', 'blockquote'],\r\n  name: 'HTMLQuoteElement',\r\n  ctor: function HTMLQuoteElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    cite: URL\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'script',\r\n  name: 'HTMLScriptElement',\r\n  ctor: function HTMLScriptElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    text: {\r\n      get: function() {\r\n        var s = \"\";\r\n        for(var i = 0, n = this.childNodes.length; i < n; i++) {\r\n          var child = this.childNodes[i];\r\n          if (child.nodeType === Node.TEXT_NODE)\r\n            s += child._data;\r\n        }\r\n        return s;\r\n      },\r\n      set: function(value) {\r\n        this.removeChildren();\r\n        if (value !== null && value !== \"\") {\r\n          this.appendChild(this.ownerDocument.createTextNode(value));\r\n        }\r\n      }\r\n    }\r\n  },\r\n  attributes: {\r\n    src: URL,\r\n    type: String,\r\n    charset: String,\r\n    referrerPolicy: REFERRER,\r\n    defer: Boolean,\r\n    async: Boolean,\r\n    nomodule: Boolean,\r\n    crossOrigin: CORS,\r\n    nonce: String,\r\n    integrity: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'select',\r\n  name: 'HTMLSelectElement',\r\n  ctor: function HTMLSelectElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    form: formAssociatedProps.form,\r\n    options: { get: function() {\r\n      return this.getElementsByTagName('option');\r\n    }}\r\n  },\r\n  attributes: {\r\n    autocomplete: String, // It's complicated\r\n    name: String,\r\n    disabled: Boolean,\r\n    autofocus: Boolean,\r\n    multiple: Boolean,\r\n    required: Boolean,\r\n    size: {type: \"unsigned long\", default: 0}\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'span',\r\n  name: 'HTMLSpanElement',\r\n  ctor: function HTMLSpanElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'style',\r\n  name: 'HTMLStyleElement',\r\n  ctor: function HTMLStyleElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    media: String,\r\n    type: String,\r\n    scoped: Boolean\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'caption',\r\n  name: 'HTMLTableCaptionElement',\r\n  ctor: function HTMLTableCaptionElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n  }\r\n});\r\n\r\n\r\ndefine({\r\n  name: 'HTMLTableCellElement',\r\n  ctor: function HTMLTableCellElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    colSpan: {type: \"unsigned long\", default: 1},\r\n    rowSpan: {type: \"unsigned long\", default: 1},\r\n    //XXX Also reflect settable token list headers\r\n    scope: { type: ['row','col','rowgroup','colgroup'], missing: '' },\r\n    abbr: String,\r\n    // Obsolete\r\n    align: String,\r\n    axis: String,\r\n    height: String,\r\n    width: String,\r\n    ch: { name: 'char', type: String },\r\n    chOff: { name: 'charoff', type: String },\r\n    noWrap: Boolean,\r\n    vAlign: String,\r\n    bgColor: { type: String, treatNullAsEmptyString: true },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tags: ['col', 'colgroup'],\r\n  name: 'HTMLTableColElement',\r\n  ctor: function HTMLTableColElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    span: {type: 'limited unsigned long with fallback', default: 1, min: 1},\r\n    // Obsolete\r\n    align: String,\r\n    ch: { name: 'char', type: String },\r\n    chOff: { name: 'charoff', type: String },\r\n    vAlign: String,\r\n    width: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'table',\r\n  name: 'HTMLTableElement',\r\n  ctor: function HTMLTableElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    rows: { get: function() {\r\n      return this.getElementsByTagName('tr');\r\n    }}\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n    border: String,\r\n    frame: String,\r\n    rules: String,\r\n    summary: String,\r\n    width: String,\r\n    bgColor: { type: String, treatNullAsEmptyString: true },\r\n    cellPadding: { type: String, treatNullAsEmptyString: true },\r\n    cellSpacing: { type: String, treatNullAsEmptyString: true },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'template',\r\n  name: 'HTMLTemplateElement',\r\n  ctor: function HTMLTemplateElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n    this._contentFragment = doc._templateDoc.createDocumentFragment();\r\n  },\r\n  props: {\r\n    content: { get: function() { return this._contentFragment; } },\r\n    serialize: { value: function() { return this.content.serialize(); } }\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'tr',\r\n  name: 'HTMLTableRowElement',\r\n  ctor: function HTMLTableRowElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    cells: { get: function() {\r\n      return this.querySelectorAll('td,th');\r\n    }}\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n    ch: { name: 'char', type: String },\r\n    chOff: { name: 'charoff', type: String },\r\n    vAlign: String,\r\n    bgColor: { type: String, treatNullAsEmptyString: true },\r\n  },\r\n});\r\n\r\ndefine({\r\n  tags: ['thead', 'tfoot', 'tbody'],\r\n  name: 'HTMLTableSectionElement',\r\n  ctor: function HTMLTableSectionElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    rows: { get: function() {\r\n      return this.getElementsByTagName('tr');\r\n    }}\r\n  },\r\n  attributes: {\r\n    // Obsolete\r\n    align: String,\r\n    ch: { name: 'char', type: String },\r\n    chOff: { name: 'charoff', type: String },\r\n    vAlign: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'textarea',\r\n  name: 'HTMLTextAreaElement',\r\n  ctor: function HTMLTextAreaElement(doc, localName, prefix) {\r\n    HTMLFormElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    form: formAssociatedProps.form,\r\n    type: { get: function() { return 'textarea'; } },\r\n    defaultValue: {\r\n      get: function() { return this.textContent; },\r\n      set: function(v) { this.textContent = v; },\r\n    },\r\n    value: {\r\n      get: function() { return this.defaultValue; /* never dirty */ },\r\n      set: function(v) {\r\n        // This isn't completely correct: according to the spec, this\r\n        // should \"dirty\" the API value, and result in\r\n        // `this.value !== this.defaultValue`.  But for most of what\r\n        // folks want to do, this implementation should be fine:\r\n        this.defaultValue = v;\r\n      },\r\n    },\r\n    textLength: { get: function() { return this.value.length; } },\r\n  },\r\n  attributes: {\r\n    autocomplete: String, // It's complicated\r\n    name: String,\r\n    disabled: Boolean,\r\n    autofocus: Boolean,\r\n    placeholder: String,\r\n    wrap: String,\r\n    dirName: String,\r\n    required: Boolean,\r\n    readOnly: Boolean,\r\n    rows: {type: 'limited unsigned long with fallback', default: 2 },\r\n    cols: {type: 'limited unsigned long with fallback', default: 20 },\r\n    maxLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},\r\n    minLength: {type: 'unsigned long', min: 0, setmin: 0, default: -1},\r\n    inputMode: { type: [ \"verbatim\", \"latin\", \"latin-name\", \"latin-prose\", \"full-width-latin\", \"kana\", \"kana-name\", \"katakana\", \"numeric\", \"tel\", \"email\", \"url\" ], missing: '' },\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'time',\r\n  name: 'HTMLTimeElement',\r\n  ctor: function HTMLTimeElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    dateTime: String,\r\n    pubDate: Boolean\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'title',\r\n  name: 'HTMLTitleElement',\r\n  ctor: function HTMLTitleElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    text: { get: function() {\r\n      return this.textContent;\r\n    }}\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'ul',\r\n  name: 'HTMLUListElement',\r\n  ctor: function HTMLUListElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    type: String,\r\n    // Obsolete\r\n    compact: Boolean,\r\n  }\r\n});\r\n\r\ndefine({\r\n  name: 'HTMLMediaElement',\r\n  ctor: function HTMLMediaElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    src: URL,\r\n    crossOrigin: CORS,\r\n    preload: { type:[\"metadata\", \"none\", \"auto\", {value: \"\", alias: \"auto\"}], missing: 'auto' },\r\n    loop: Boolean,\r\n    autoplay: Boolean,\r\n    mediaGroup: String,\r\n    controls: Boolean,\r\n    defaultMuted: {name: \"muted\", type: Boolean}\r\n  }\r\n});\r\n\r\ndefine({\r\n  name: 'HTMLAudioElement',\r\n  tag: 'audio',\r\n  superclass: htmlElements.HTMLMediaElement,\r\n  ctor: function HTMLAudioElement(doc, localName, prefix) {\r\n    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  name: 'HTMLVideoElement',\r\n  tag: 'video',\r\n  superclass: htmlElements.HTMLMediaElement,\r\n  ctor: function HTMLVideoElement(doc, localName, prefix) {\r\n    htmlElements.HTMLMediaElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    poster: URL,\r\n    width: {type: \"unsigned long\", min: 0, default: 0 },\r\n    height: {type: \"unsigned long\", min: 0, default: 0 }\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'td',\r\n  name: 'HTMLTableDataCellElement',\r\n  superclass: htmlElements.HTMLTableCellElement,\r\n  ctor: function HTMLTableDataCellElement(doc, localName, prefix) {\r\n    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'th',\r\n  name: 'HTMLTableHeaderCellElement',\r\n  superclass: htmlElements.HTMLTableCellElement,\r\n  ctor: function HTMLTableHeaderCellElement(doc, localName, prefix) {\r\n    htmlElements.HTMLTableCellElement.call(this, doc, localName, prefix);\r\n  },\r\n});\r\n\r\ndefine({\r\n  tag: 'frameset',\r\n  name: 'HTMLFrameSetElement',\r\n  ctor: function HTMLFrameSetElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'frame',\r\n  name: 'HTMLFrameElement',\r\n  ctor: function HTMLFrameElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'canvas',\r\n  name: 'HTMLCanvasElement',\r\n  ctor: function HTMLCanvasElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    getContext: { value: utils.nyi },\r\n    probablySupportsContext: { value: utils.nyi },\r\n    setContext: { value: utils.nyi },\r\n    transferControlToProxy: { value: utils.nyi },\r\n    toDataURL: { value: utils.nyi },\r\n    toBlob: { value: utils.nyi }\r\n  },\r\n  attributes: {\r\n    width: { type: \"unsigned long\", default: 300},\r\n    height: { type: \"unsigned long\", default: 150}\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'dialog',\r\n  name: 'HTMLDialogElement',\r\n  ctor: function HTMLDialogElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    show: { value: utils.nyi },\r\n    showModal: { value: utils.nyi },\r\n    close: { value: utils.nyi }\r\n  },\r\n  attributes: {\r\n    open: Boolean,\r\n    returnValue: String\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'menuitem',\r\n  name: 'HTMLMenuItemElement',\r\n  ctor: function HTMLMenuItemElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  props: {\r\n    // The menuitem's label\r\n    _label: {\r\n      get: function() {\r\n        var val = this._getattr('label');\r\n        if (val !== null && val !== '') { return val; }\r\n        val = this.textContent;\r\n        // Strip and collapse whitespace\r\n        return val.replace(/[ \\t\\n\\f\\r]+/g, ' ').trim();\r\n      }\r\n    },\r\n    // The menuitem label IDL attribute\r\n    label: {\r\n      get: function() {\r\n        var val = this._getattr('label');\r\n        if (val !== null) { return val; }\r\n        return this._label;\r\n      },\r\n      set: function(v) {\r\n        this._setattr('label', v);\r\n      },\r\n    }\r\n  },\r\n  attributes: {\r\n    type: { type: [\"command\",\"checkbox\",\"radio\"], missing: 'command' },\r\n    icon: URL,\r\n    disabled: Boolean,\r\n    checked: Boolean,\r\n    radiogroup: String,\r\n    default: Boolean\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'source',\r\n  name: 'HTMLSourceElement',\r\n  ctor: function HTMLSourceElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    srcset: String,\r\n    sizes: String,\r\n    media: String,\r\n    src: URL,\r\n    type: String,\r\n    width: String,\r\n    height: String,\r\n  }\r\n});\r\n\r\ndefine({\r\n  tag: 'track',\r\n  name: 'HTMLTrackElement',\r\n  ctor: function HTMLTrackElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    src: URL,\r\n    srclang: String,\r\n    label: String,\r\n    default: Boolean,\r\n    kind: { type: [\"subtitles\", \"captions\", \"descriptions\", \"chapters\", \"metadata\"], missing: 'subtitles', invalid: 'metadata' },\r\n  },\r\n  props: {\r\n    NONE: { get: function() { return 0; } },\r\n    LOADING: { get: function() { return 1; } },\r\n    LOADED: { get: function() { return 2; } },\r\n    ERROR: { get: function() { return 3; } },\r\n    readyState: { get: utils.nyi },\r\n    track: { get: utils.nyi }\r\n  }\r\n});\r\n\r\ndefine({\r\n  // obsolete\r\n  tag: 'font',\r\n  name: 'HTMLFontElement',\r\n  ctor: function HTMLFontElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    color: { type: String, treatNullAsEmptyString: true },\r\n    face: { type: String },\r\n    size: { type: String },\r\n  },\r\n});\r\n\r\ndefine({\r\n  // obsolete\r\n  tag: 'dir',\r\n  name: 'HTMLDirectoryElement',\r\n  ctor: function HTMLDirectoryElement(doc, localName, prefix) {\r\n    HTMLElement.call(this, doc, localName, prefix);\r\n  },\r\n  attributes: {\r\n    compact: Boolean,\r\n  },\r\n});\r\n\r\ndefine({\r\n  tags: [\r\n    \"abbr\", \"address\", \"article\", \"aside\", \"b\", \"bdi\", \"bdo\", \"cite\", \"content\", \"code\",\r\n    \"dd\", \"dfn\", \"dt\", \"em\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"i\", \"kbd\",\r\n    \"main\", \"mark\", \"nav\", \"noscript\", \"rb\", \"rp\", \"rt\", \"rtc\",\r\n    \"ruby\", \"s\", \"samp\", \"section\", \"small\", \"strong\", \"sub\", \"summary\", \"sup\", \"u\", \"var\", \"wbr\",\r\n    // Legacy elements\r\n    \"acronym\", \"basefont\", \"big\", \"center\", \"nobr\", \"noembed\", \"noframes\",\r\n    \"plaintext\", \"strike\", \"tt\"\r\n  ]\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/htmlelts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/impl.js":
/*!*****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/impl.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\n\r\nexports = module.exports = {\r\n  CSSStyleDeclaration: __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js\"),\r\n  CharacterData: __webpack_require__(/*! ./CharacterData */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CharacterData.js\"),\r\n  Comment: __webpack_require__(/*! ./Comment */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Comment.js\"),\r\n  DOMException: __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMException.js\"),\r\n  DOMImplementation: __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js\"),\r\n  DOMTokenList: __webpack_require__(/*! ./DOMTokenList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMTokenList.js\"),\r\n  Document: __webpack_require__(/*! ./Document */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Document.js\"),\r\n  DocumentFragment: __webpack_require__(/*! ./DocumentFragment */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentFragment.js\"),\r\n  DocumentType: __webpack_require__(/*! ./DocumentType */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DocumentType.js\"),\r\n  Element: __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\"),\r\n  HTMLParser: __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/HTMLParser.js\"),\r\n  NamedNodeMap: __webpack_require__(/*! ./NamedNodeMap */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NamedNodeMap.js\"),\r\n  Node: __webpack_require__(/*! ./Node */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Node.js\"),\r\n  NodeList: __webpack_require__(/*! ./NodeList */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeList.js\"),\r\n  NodeFilter: __webpack_require__(/*! ./NodeFilter */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/NodeFilter.js\"),\r\n  ProcessingInstruction: __webpack_require__(/*! ./ProcessingInstruction */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/ProcessingInstruction.js\"),\r\n  Text: __webpack_require__(/*! ./Text */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Text.js\"),\r\n  Window: __webpack_require__(/*! ./Window */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Window.js\")\r\n};\r\n\r\nutils.merge(exports, __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/events.js\"));\r\nutils.merge(exports, (__webpack_require__(/*! ./htmlelts */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/htmlelts.js\").elements));\r\nutils.merge(exports, (__webpack_require__(/*! ./svg */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/svg.js\").elements));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9pbXBsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsWUFBWSxtQkFBTyxDQUFDLHFFQUFTO0FBQzdCO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyxpR0FBdUI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMscUZBQWlCO0FBQzFDLFdBQVcsbUJBQU8sQ0FBQyx5RUFBVztBQUM5QixnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBZ0I7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsNkZBQXFCO0FBQ2xELGdCQUFnQixtQkFBTyxDQUFDLG1GQUFnQjtBQUN4QyxZQUFZLG1CQUFPLENBQUMsMkVBQVk7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsMkZBQW9CO0FBQ2hELGdCQUFnQixtQkFBTyxDQUFDLG1GQUFnQjtBQUN4QyxXQUFXLG1CQUFPLENBQUMseUVBQVc7QUFDOUIsY0FBYyxtQkFBTyxDQUFDLCtFQUFjO0FBQ3BDLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFnQjtBQUN4QyxRQUFRLG1CQUFPLENBQUMsbUVBQVE7QUFDeEIsWUFBWSxtQkFBTyxDQUFDLDJFQUFZO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQywrRUFBYztBQUNwQyx5QkFBeUIsbUJBQU8sQ0FBQyxxR0FBeUI7QUFDMUQsUUFBUSxtQkFBTyxDQUFDLG1FQUFRO0FBQ3hCLFVBQVUsbUJBQU8sQ0FBQyx1RUFBVTtBQUM1QjtBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsdUVBQVU7QUFDdkMscUJBQXFCLDJHQUE4QjtBQUNuRCxxQkFBcUIsaUdBQXlCIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvaW1wbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG5cclxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge1xyXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpLFxyXG4gIENoYXJhY3RlckRhdGE6IHJlcXVpcmUoJy4vQ2hhcmFjdGVyRGF0YScpLFxyXG4gIENvbW1lbnQ6IHJlcXVpcmUoJy4vQ29tbWVudCcpLFxyXG4gIERPTUV4Y2VwdGlvbjogcmVxdWlyZSgnLi9ET01FeGNlcHRpb24nKSxcclxuICBET01JbXBsZW1lbnRhdGlvbjogcmVxdWlyZSgnLi9ET01JbXBsZW1lbnRhdGlvbicpLFxyXG4gIERPTVRva2VuTGlzdDogcmVxdWlyZSgnLi9ET01Ub2tlbkxpc3QnKSxcclxuICBEb2N1bWVudDogcmVxdWlyZSgnLi9Eb2N1bWVudCcpLFxyXG4gIERvY3VtZW50RnJhZ21lbnQ6IHJlcXVpcmUoJy4vRG9jdW1lbnRGcmFnbWVudCcpLFxyXG4gIERvY3VtZW50VHlwZTogcmVxdWlyZSgnLi9Eb2N1bWVudFR5cGUnKSxcclxuICBFbGVtZW50OiByZXF1aXJlKCcuL0VsZW1lbnQnKSxcclxuICBIVE1MUGFyc2VyOiByZXF1aXJlKCcuL0hUTUxQYXJzZXInKSxcclxuICBOYW1lZE5vZGVNYXA6IHJlcXVpcmUoJy4vTmFtZWROb2RlTWFwJyksXHJcbiAgTm9kZTogcmVxdWlyZSgnLi9Ob2RlJyksXHJcbiAgTm9kZUxpc3Q6IHJlcXVpcmUoJy4vTm9kZUxpc3QnKSxcclxuICBOb2RlRmlsdGVyOiByZXF1aXJlKCcuL05vZGVGaWx0ZXInKSxcclxuICBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb246IHJlcXVpcmUoJy4vUHJvY2Vzc2luZ0luc3RydWN0aW9uJyksXHJcbiAgVGV4dDogcmVxdWlyZSgnLi9UZXh0JyksXHJcbiAgV2luZG93OiByZXF1aXJlKCcuL1dpbmRvdycpXHJcbn07XHJcblxyXG51dGlscy5tZXJnZShleHBvcnRzLCByZXF1aXJlKCcuL2V2ZW50cycpKTtcclxudXRpbHMubWVyZ2UoZXhwb3J0cywgcmVxdWlyZSgnLi9odG1sZWx0cycpLmVsZW1lbnRzKTtcclxudXRpbHMubWVyZ2UoZXhwb3J0cywgcmVxdWlyZSgnLi9zdmcnKS5lbGVtZW50cyk7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar DOMImplementation = __webpack_require__(/*! ./DOMImplementation */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMImplementation.js\");\r\nvar HTMLParser = __webpack_require__(/*! ./HTMLParser */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/HTMLParser.js\");\r\nvar Window = __webpack_require__(/*! ./Window */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Window.js\");\r\nvar impl = __webpack_require__(/*! ./impl */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/impl.js\");\r\n\r\nexports.createDOMImplementation = function() {\r\n  return new DOMImplementation(null);\r\n};\r\n\r\nexports.createDocument = function(html, force) {\r\n  // Previous API couldn't let you pass '' as a document, and that\r\n  // yields a slightly different document than createHTMLDocument('')\r\n  // does.  The new `force` parameter lets you pass '' if you want to.\r\n  if (html || force) {\r\n    var parser = new HTMLParser();\r\n    parser.parse(html || '', true);\r\n    return parser.document();\r\n  }\r\n  return new DOMImplementation(null).createHTMLDocument(\"\");\r\n};\r\n\r\nexports.createIncrementalHTMLParser = function() {\r\n    var parser = new HTMLParser();\r\n    /** API for incremental parser. */\r\n    return {\r\n        /** Provide an additional chunk of text to be parsed. */\r\n        write: function(s) {\r\n          if (s.length > 0) {\r\n            parser.parse(s, false, function() { return true; });\r\n          }\r\n        },\r\n        /**\r\n         * Signal that we are done providing input text, optionally\r\n         * providing one last chunk as a parameter.\r\n         */\r\n        end: function(s) {\r\n          parser.parse(s || '', true, function() { return true; });\r\n        },\r\n        /**\r\n         * Performs a chunk of parsing work, returning at the end of\r\n         * the next token as soon as shouldPauseFunc() returns true.\r\n         * Returns true iff there is more work to do.\r\n         *\r\n         * For example:\r\n         * ```\r\n         *  var incrParser = domino.createIncrementalHTMLParser();\r\n         *  incrParser.end('...long html document...');\r\n         *  while (true) {\r\n         *    // Pause every 10ms\r\n         *    var start = Date.now();\r\n         *    var pauseIn10 = function() { return (Date.now() - start) >= 10; };\r\n         *    if (!incrParser.process(pauseIn10)) {\r\n         *      break;\r\n         *    }\r\n         *    ...yield to other tasks, do other housekeeping, etc...\r\n         *  }\r\n         * ```\r\n         */\r\n        process: function(shouldPauseFunc) {\r\n          return parser.parse('', false, shouldPauseFunc);\r\n        },\r\n        /**\r\n         * Returns the result of the incremental parse.  Valid after\r\n         * `this.end()` has been called and `this.process()` has returned\r\n         * false.\r\n         */\r\n        document: function() {\r\n          return parser.document();\r\n        },\r\n    };  \r\n};\r\n\r\nexports.createWindow = function(html, address) {\r\n  var document = exports.createDocument(html);\r\n  if (address !== undefined) { document._address = address; }\r\n  return new impl.Window(document);\r\n};\r\n\r\nexports.impl = impl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHdCQUF3QixtQkFBTyxDQUFDLDZGQUFxQjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBYztBQUN2QyxhQUFhLG1CQUFPLENBQUMsdUVBQVU7QUFDL0IsV0FBVyxtQkFBTyxDQUFDLG1FQUFRO0FBQzNCO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxjQUFjO0FBQzlEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsY0FBYztBQUNqRSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsWUFBWSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgRE9NSW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL0RPTUltcGxlbWVudGF0aW9uJyk7XHJcbnZhciBIVE1MUGFyc2VyID0gcmVxdWlyZSgnLi9IVE1MUGFyc2VyJyk7XHJcbnZhciBXaW5kb3cgPSByZXF1aXJlKCcuL1dpbmRvdycpO1xyXG52YXIgaW1wbCA9IHJlcXVpcmUoJy4vaW1wbCcpO1xyXG5cclxuZXhwb3J0cy5jcmVhdGVET01JbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBuZXcgRE9NSW1wbGVtZW50YXRpb24obnVsbCk7XHJcbn07XHJcblxyXG5leHBvcnRzLmNyZWF0ZURvY3VtZW50ID0gZnVuY3Rpb24oaHRtbCwgZm9yY2UpIHtcclxuICAvLyBQcmV2aW91cyBBUEkgY291bGRuJ3QgbGV0IHlvdSBwYXNzICcnIGFzIGEgZG9jdW1lbnQsIGFuZCB0aGF0XHJcbiAgLy8geWllbGRzIGEgc2xpZ2h0bHkgZGlmZmVyZW50IGRvY3VtZW50IHRoYW4gY3JlYXRlSFRNTERvY3VtZW50KCcnKVxyXG4gIC8vIGRvZXMuICBUaGUgbmV3IGBmb3JjZWAgcGFyYW1ldGVyIGxldHMgeW91IHBhc3MgJycgaWYgeW91IHdhbnQgdG8uXHJcbiAgaWYgKGh0bWwgfHwgZm9yY2UpIHtcclxuICAgIHZhciBwYXJzZXIgPSBuZXcgSFRNTFBhcnNlcigpO1xyXG4gICAgcGFyc2VyLnBhcnNlKGh0bWwgfHwgJycsIHRydWUpO1xyXG4gICAgcmV0dXJuIHBhcnNlci5kb2N1bWVudCgpO1xyXG4gIH1cclxuICByZXR1cm4gbmV3IERPTUltcGxlbWVudGF0aW9uKG51bGwpLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTtcclxufTtcclxuXHJcbmV4cG9ydHMuY3JlYXRlSW5jcmVtZW50YWxIVE1MUGFyc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcGFyc2VyID0gbmV3IEhUTUxQYXJzZXIoKTtcclxuICAgIC8qKiBBUEkgZm9yIGluY3JlbWVudGFsIHBhcnNlci4gKi9cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLyoqIFByb3ZpZGUgYW4gYWRkaXRpb25hbCBjaHVuayBvZiB0ZXh0IHRvIGJlIHBhcnNlZC4gKi9cclxuICAgICAgICB3cml0ZTogZnVuY3Rpb24ocykge1xyXG4gICAgICAgICAgaWYgKHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwYXJzZXIucGFyc2UocywgZmFsc2UsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaWduYWwgdGhhdCB3ZSBhcmUgZG9uZSBwcm92aWRpbmcgaW5wdXQgdGV4dCwgb3B0aW9uYWxseVxyXG4gICAgICAgICAqIHByb3ZpZGluZyBvbmUgbGFzdCBjaHVuayBhcyBhIHBhcmFtZXRlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICAgIHBhcnNlci5wYXJzZShzIHx8ICcnLCB0cnVlLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUGVyZm9ybXMgYSBjaHVuayBvZiBwYXJzaW5nIHdvcmssIHJldHVybmluZyBhdCB0aGUgZW5kIG9mXHJcbiAgICAgICAgICogdGhlIG5leHQgdG9rZW4gYXMgc29vbiBhcyBzaG91bGRQYXVzZUZ1bmMoKSByZXR1cm5zIHRydWUuXHJcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmZiB0aGVyZSBpcyBtb3JlIHdvcmsgdG8gZG8uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBGb3IgZXhhbXBsZTpcclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKiAgdmFyIGluY3JQYXJzZXIgPSBkb21pbm8uY3JlYXRlSW5jcmVtZW50YWxIVE1MUGFyc2VyKCk7XHJcbiAgICAgICAgICogIGluY3JQYXJzZXIuZW5kKCcuLi5sb25nIGh0bWwgZG9jdW1lbnQuLi4nKTtcclxuICAgICAgICAgKiAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgKiAgICAvLyBQYXVzZSBldmVyeSAxMG1zXHJcbiAgICAgICAgICogICAgdmFyIHN0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgKiAgICB2YXIgcGF1c2VJbjEwID0gZnVuY3Rpb24oKSB7IHJldHVybiAoRGF0ZS5ub3coKSAtIHN0YXJ0KSA+PSAxMDsgfTtcclxuICAgICAgICAgKiAgICBpZiAoIWluY3JQYXJzZXIucHJvY2VzcyhwYXVzZUluMTApKSB7XHJcbiAgICAgICAgICogICAgICBicmVhaztcclxuICAgICAgICAgKiAgICB9XHJcbiAgICAgICAgICogICAgLi4ueWllbGQgdG8gb3RoZXIgdGFza3MsIGRvIG90aGVyIGhvdXNla2VlcGluZywgZXRjLi4uXHJcbiAgICAgICAgICogIH1cclxuICAgICAgICAgKiBgYGBcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbihzaG91bGRQYXVzZUZ1bmMpIHtcclxuICAgICAgICAgIHJldHVybiBwYXJzZXIucGFyc2UoJycsIGZhbHNlLCBzaG91bGRQYXVzZUZ1bmMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbmNyZW1lbnRhbCBwYXJzZS4gIFZhbGlkIGFmdGVyXHJcbiAgICAgICAgICogYHRoaXMuZW5kKClgIGhhcyBiZWVuIGNhbGxlZCBhbmQgYHRoaXMucHJvY2VzcygpYCBoYXMgcmV0dXJuZWRcclxuICAgICAgICAgKiBmYWxzZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkb2N1bWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmRvY3VtZW50KCk7XHJcbiAgICAgICAgfSxcclxuICAgIH07ICBcclxufTtcclxuXHJcbmV4cG9ydHMuY3JlYXRlV2luZG93ID0gZnVuY3Rpb24oaHRtbCwgYWRkcmVzcykge1xyXG4gIHZhciBkb2N1bWVudCA9IGV4cG9ydHMuY3JlYXRlRG9jdW1lbnQoaHRtbCk7XHJcbiAgaWYgKGFkZHJlc3MgIT09IHVuZGVmaW5lZCkgeyBkb2N1bWVudC5fYWRkcmVzcyA9IGFkZHJlc3M7IH1cclxuICByZXR1cm4gbmV3IGltcGwuV2luZG93KGRvY3VtZW50KTtcclxufTtcclxuXHJcbmV4cG9ydHMuaW1wbCA9IGltcGw7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/select.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/select.js ***!
  \*******************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\r\n/* jshint eqnull: true */\r\n/**\r\n * Zest (https://github.com/chjj/zest)\r\n * A css selector engine.\r\n * Copyright (c) 2011-2012, Christopher Jeffrey. (MIT Licensed)\r\n * Domino version based on Zest v0.1.3 with bugfixes applied.\r\n */\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nvar window = Object.create(null, {\r\n  location: { get: function() {\r\n    throw new Error('window.location is not supported.');\r\n  } }\r\n});\r\n\r\nvar compareDocumentPosition = function(a, b) {\r\n      return a.compareDocumentPosition(b);\r\n};\r\n\r\nvar order = function(a, b) {\r\n  /* jshint bitwise: false */\r\n  return compareDocumentPosition(a, b) & 2 ? 1 : -1;\r\n};\r\n\r\nvar next = function(el) {\r\n  while ((el = el.nextSibling)\r\n         && el.nodeType !== 1);\r\n  return el;\r\n};\r\n\r\nvar prev = function(el) {\r\n  while ((el = el.previousSibling)\r\n         && el.nodeType !== 1);\r\n  return el;\r\n};\r\n\r\nvar child = function(el) {\r\n  /*jshint -W084 */\r\n  if (el = el.firstChild) {\r\n    while (el.nodeType !== 1\r\n           && (el = el.nextSibling));\r\n  }\r\n  return el;\r\n};\r\n\r\nvar lastChild = function(el) {\r\n  /*jshint -W084 */\r\n  if (el = el.lastChild) {\r\n    while (el.nodeType !== 1\r\n           && (el = el.previousSibling));\r\n  }\r\n  return el;\r\n};\r\n\r\nvar parentIsElement = function(n) {\r\n  if (!n.parentNode) { return false; }\r\n  var nodeType = n.parentNode.nodeType;\r\n  // The root `html` element can be a first- or last-child, too.\r\n  return nodeType === 1 || nodeType === 9;\r\n};\r\n\r\nvar unquote = function(str) {\r\n  if (!str) return str;\r\n  var ch = str[0];\r\n  if (ch === '\"' || ch === '\\'') {\r\n    if (str[str.length-1] === ch) {\r\n      str = str.slice(1, -1);\r\n    } else {\r\n      // bad string.\r\n      str = str.slice(1);\r\n    }\r\n    return str.replace(rules.str_escape, function(s) {\r\n      var m = /^\\\\(?:([0-9A-Fa-f]+)|([\\r\\n\\f]+))/.exec(s);\r\n      if (!m) { return s.slice(1); }\r\n      if (m[2]) { return ''; /* escaped newlines are ignored in strings. */ }\r\n      var cp = parseInt(m[1], 16);\r\n      return String.fromCodePoint ? String.fromCodePoint(cp) :\r\n        // Not all JavaScript implementations have String.fromCodePoint yet.\r\n        String.fromCharCode(cp);\r\n    });\r\n  } else if (rules.ident.test(str)) {\r\n    return decodeid(str);\r\n  } else {\r\n    // NUMBER, PERCENTAGE, DIMENSION, etc\r\n    return str;\r\n  }\r\n};\r\n\r\nvar decodeid = function(str) {\r\n  return str.replace(rules.escape, function(s) {\r\n    var m = /^\\\\([0-9A-Fa-f]+)/.exec(s);\r\n    if (!m) { return s[1]; }\r\n    var cp = parseInt(m[1], 16);\r\n    return String.fromCodePoint ? String.fromCodePoint(cp) :\r\n      // Not all JavaScript implementations have String.fromCodePoint yet.\r\n      String.fromCharCode(cp);\r\n  });\r\n};\r\n\r\nvar indexOf = (function() {\r\n  if (Array.prototype.indexOf) {\r\n    return Array.prototype.indexOf;\r\n  }\r\n  return function(obj, item) {\r\n    var i = this.length;\r\n    while (i--) {\r\n      if (this[i] === item) return i;\r\n    }\r\n    return -1;\r\n  };\r\n})();\r\n\r\nvar makeInside = function(start, end) {\r\n  var regex = rules.inside.source\r\n    .replace(/</g, start)\r\n    .replace(/>/g, end);\r\n\r\n  return new RegExp(regex);\r\n};\r\n\r\nvar replace = function(regex, name, val) {\r\n  regex = regex.source;\r\n  regex = regex.replace(name, val.source || val);\r\n  return new RegExp(regex);\r\n};\r\n\r\nvar truncateUrl = function(url, num) {\r\n  return url\r\n    .replace(/^(?:\\w+:\\/\\/|\\/+)/, '')\r\n    .replace(/(?:\\/+|\\/*#.*?)$/, '')\r\n    .split('/', num)\r\n    .join('/');\r\n};\r\n\r\n/**\r\n * Handle `nth` Selectors\r\n */\r\n\r\nvar parseNth = function(param_, test) {\r\n  var param = param_.replace(/\\s+/g, '')\r\n    , cap;\r\n\r\n  if (param === 'even') {\r\n    param = '2n+0';\r\n  } else if (param === 'odd') {\r\n    param = '2n+1';\r\n  } else if (param.indexOf('n') === -1) {\r\n    param = '0n' + param;\r\n  }\r\n\r\n  cap = /^([+-])?(\\d+)?n([+-])?(\\d+)?$/.exec(param);\r\n\r\n  return {\r\n    group: cap[1] === '-'\r\n      ? -(cap[2] || 1)\r\n      : +(cap[2] || 1),\r\n    offset: cap[4]\r\n      ? (cap[3] === '-' ? -cap[4] : +cap[4])\r\n      : 0\r\n  };\r\n};\r\n\r\nvar nth = function(param_, test, last) {\r\n  var param = parseNth(param_)\r\n    , group = param.group\r\n    , offset = param.offset\r\n    , find = !last ? child : lastChild\r\n    , advance = !last ? next : prev;\r\n\r\n  return function(el) {\r\n    if (!parentIsElement(el)) return;\r\n\r\n    var rel = find(el.parentNode)\r\n      , pos = 0;\r\n\r\n    while (rel) {\r\n      if (test(rel, el)) pos++;\r\n      if (rel === el) {\r\n        pos -= offset;\r\n        return group && pos\r\n          ? (pos % group) === 0 && (pos < 0 === group < 0)\r\n          : !pos;\r\n      }\r\n      rel = advance(rel);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Simple Selectors\r\n */\r\n\r\nvar selectors = {\r\n  '*': (function() {\r\n    if (false/*function() {\r\n      var el = document.createElement('div');\r\n      el.appendChild(document.createComment(''));\r\n      return !!el.getElementsByTagName('*')[0];\r\n    }()*/) {}\r\n    return function() {\r\n      return true;\r\n    };\r\n  })(),\r\n  'type': function(type) {\r\n    type = type.toLowerCase();\r\n    return function(el) {\r\n      return el.nodeName.toLowerCase() === type;\r\n    };\r\n  },\r\n  'attr': function(key, op, val, i) {\r\n    op = operators[op];\r\n    return function(el) {\r\n      var attr;\r\n      switch (key) {\r\n        case 'for':\r\n          attr = el.htmlFor;\r\n          break;\r\n        case 'class':\r\n          // className is '' when non-existent\r\n          // getAttribute('class') is null\r\n          attr = el.className;\r\n          if (attr === '' && el.getAttribute('class') == null) {\r\n            attr = null;\r\n          }\r\n          break;\r\n        case 'href':\r\n        case 'src':\r\n          attr = el.getAttribute(key, 2);\r\n          break;\r\n        case 'title':\r\n          // getAttribute('title') can be '' when non-existent sometimes?\r\n          attr = el.getAttribute('title') || null;\r\n          break;\r\n        // careful with attributes with special getter functions\r\n        case 'id':\r\n        case 'lang':\r\n        case 'dir':\r\n        case 'accessKey':\r\n        case 'hidden':\r\n        case 'tabIndex':\r\n        case 'style':\r\n          if (el.getAttribute) {\r\n            attr = el.getAttribute(key);\r\n            break;\r\n          }\r\n        /* falls through */\r\n        default:\r\n          if (el.hasAttribute && !el.hasAttribute(key)) {\r\n            break;\r\n          }\r\n          attr = el[key] != null\r\n            ? el[key]\r\n            : el.getAttribute && el.getAttribute(key);\r\n          break;\r\n      }\r\n      if (attr == null) return;\r\n      attr = attr + '';\r\n      if (i) {\r\n        attr = attr.toLowerCase();\r\n        val = val.toLowerCase();\r\n      }\r\n      return op(attr, val);\r\n    };\r\n  },\r\n  ':first-child': function(el) {\r\n    return !prev(el) && parentIsElement(el);\r\n  },\r\n  ':last-child': function(el) {\r\n    return !next(el) && parentIsElement(el);\r\n  },\r\n  ':only-child': function(el) {\r\n    return !prev(el) && !next(el) && parentIsElement(el);\r\n  },\r\n  ':nth-child': function(param, last) {\r\n    return nth(param, function() {\r\n      return true;\r\n    }, last);\r\n  },\r\n  ':nth-last-child': function(param) {\r\n    return selectors[':nth-child'](param, true);\r\n  },\r\n  ':root': function(el) {\r\n    return el.ownerDocument.documentElement === el;\r\n  },\r\n  ':empty': function(el) {\r\n    return !el.firstChild;\r\n  },\r\n  ':not': function(sel) {\r\n    var test = compileGroup(sel);\r\n    return function(el) {\r\n      return !test(el);\r\n    };\r\n  },\r\n  ':first-of-type': function(el) {\r\n    if (!parentIsElement(el)) return;\r\n    var type = el.nodeName;\r\n    /*jshint -W084 */\r\n    while (el = prev(el)) {\r\n      if (el.nodeName === type) return;\r\n    }\r\n    return true;\r\n  },\r\n  ':last-of-type': function(el) {\r\n    if (!parentIsElement(el)) return;\r\n    var type = el.nodeName;\r\n    /*jshint -W084 */\r\n    while (el = next(el)) {\r\n      if (el.nodeName === type) return;\r\n    }\r\n    return true;\r\n  },\r\n  ':only-of-type': function(el) {\r\n    return selectors[':first-of-type'](el)\r\n        && selectors[':last-of-type'](el);\r\n  },\r\n  ':nth-of-type': function(param, last) {\r\n    return nth(param, function(rel, el) {\r\n      return rel.nodeName === el.nodeName;\r\n    }, last);\r\n  },\r\n  ':nth-last-of-type': function(param) {\r\n    return selectors[':nth-of-type'](param, true);\r\n  },\r\n  ':checked': function(el) {\r\n    return !!(el.checked || el.selected);\r\n  },\r\n  ':indeterminate': function(el) {\r\n    return !selectors[':checked'](el);\r\n  },\r\n  ':enabled': function(el) {\r\n    return !el.disabled && el.type !== 'hidden';\r\n  },\r\n  ':disabled': function(el) {\r\n    return !!el.disabled;\r\n  },\r\n  ':target': function(el) {\r\n    return el.id === window.location.hash.substring(1);\r\n  },\r\n  ':focus': function(el) {\r\n    return el === el.ownerDocument.activeElement;\r\n  },\r\n  ':is': function(sel) {\r\n    return compileGroup(sel);\r\n  },\r\n  // :matches is an older name for :is; see\r\n  // https://github.com/w3c/csswg-drafts/issues/3258\r\n  ':matches': function(sel) {\r\n    return selectors[':is'](sel);\r\n  },\r\n  ':nth-match': function(param, last) {\r\n    var args = param.split(/\\s*,\\s*/)\r\n      , arg = args.shift()\r\n      , test = compileGroup(args.join(','));\r\n\r\n    return nth(arg, test, last);\r\n  },\r\n  ':nth-last-match': function(param) {\r\n    return selectors[':nth-match'](param, true);\r\n  },\r\n  ':links-here': function(el) {\r\n    return el + '' === window.location + '';\r\n  },\r\n  ':lang': function(param) {\r\n    return function(el) {\r\n      while (el) {\r\n        if (el.lang) return el.lang.indexOf(param) === 0;\r\n        el = el.parentNode;\r\n      }\r\n    };\r\n  },\r\n  ':dir': function(param) {\r\n    return function(el) {\r\n      while (el) {\r\n        if (el.dir) return el.dir === param;\r\n        el = el.parentNode;\r\n      }\r\n    };\r\n  },\r\n  ':scope': function(el, con) {\r\n    var context = con || el.ownerDocument;\r\n    if (context.nodeType === 9) {\r\n      return el === context.documentElement;\r\n    }\r\n    return el === context;\r\n  },\r\n  ':any-link': function(el) {\r\n    return typeof el.href === 'string';\r\n  },\r\n  ':local-link': function(el) {\r\n    if (el.nodeName) {\r\n      return el.href && el.host === window.location.host;\r\n    }\r\n    var param = +el + 1;\r\n    return function(el) {\r\n      if (!el.href) return;\r\n\r\n      var url = window.location + ''\r\n        , href = el + '';\r\n\r\n      return truncateUrl(url, param) === truncateUrl(href, param);\r\n    };\r\n  },\r\n  ':default': function(el) {\r\n    return !!el.defaultSelected;\r\n  },\r\n  ':valid': function(el) {\r\n    return el.willValidate || (el.validity && el.validity.valid);\r\n  },\r\n  ':invalid': function(el) {\r\n    return !selectors[':valid'](el);\r\n  },\r\n  ':in-range': function(el) {\r\n    return el.value > el.min && el.value <= el.max;\r\n  },\r\n  ':out-of-range': function(el) {\r\n    return !selectors[':in-range'](el);\r\n  },\r\n  ':required': function(el) {\r\n    return !!el.required;\r\n  },\r\n  ':optional': function(el) {\r\n    return !el.required;\r\n  },\r\n  ':read-only': function(el) {\r\n    if (el.readOnly) return true;\r\n\r\n    var attr = el.getAttribute('contenteditable')\r\n      , prop = el.contentEditable\r\n      , name = el.nodeName.toLowerCase();\r\n\r\n    name = name !== 'input' && name !== 'textarea';\r\n\r\n    return (name || el.disabled) && attr == null && prop !== 'true';\r\n  },\r\n  ':read-write': function(el) {\r\n    return !selectors[':read-only'](el);\r\n  },\r\n  ':hover': function() {\r\n    throw new Error(':hover is not supported.');\r\n  },\r\n  ':active': function() {\r\n    throw new Error(':active is not supported.');\r\n  },\r\n  ':link': function() {\r\n    throw new Error(':link is not supported.');\r\n  },\r\n  ':visited': function() {\r\n    throw new Error(':visited is not supported.');\r\n  },\r\n  ':column': function() {\r\n    throw new Error(':column is not supported.');\r\n  },\r\n  ':nth-column': function() {\r\n    throw new Error(':nth-column is not supported.');\r\n  },\r\n  ':nth-last-column': function() {\r\n    throw new Error(':nth-last-column is not supported.');\r\n  },\r\n  ':current': function() {\r\n    throw new Error(':current is not supported.');\r\n  },\r\n  ':past': function() {\r\n    throw new Error(':past is not supported.');\r\n  },\r\n  ':future': function() {\r\n    throw new Error(':future is not supported.');\r\n  },\r\n  // Non-standard, for compatibility purposes.\r\n  ':contains': function(param) {\r\n    return function(el) {\r\n      var text = el.innerText || el.textContent || el.value || '';\r\n      return text.indexOf(param) !== -1;\r\n    };\r\n  },\r\n  ':has': function(param) {\r\n    return function(el) {\r\n      return find(param, el).length > 0;\r\n    };\r\n  }\r\n  // Potentially add more pseudo selectors for\r\n  // compatibility with sizzle and most other\r\n  // selector engines (?).\r\n};\r\n\r\n/**\r\n * Attribute Operators\r\n */\r\n\r\nvar operators = {\r\n  '-': function() {\r\n    return true;\r\n  },\r\n  '=': function(attr, val) {\r\n    return attr === val;\r\n  },\r\n  '*=': function(attr, val) {\r\n    return attr.indexOf(val) !== -1;\r\n  },\r\n  '~=': function(attr, val) {\r\n    var i\r\n      , s\r\n      , f\r\n      , l;\r\n\r\n    for (s = 0; true; s = i + 1) {\r\n      i = attr.indexOf(val, s);\r\n      if (i === -1) return false;\r\n      f = attr[i - 1];\r\n      l = attr[i + val.length];\r\n      if ((!f || f === ' ') && (!l || l === ' ')) return true;\r\n    }\r\n  },\r\n  '|=': function(attr, val) {\r\n    var i = attr.indexOf(val)\r\n      , l;\r\n\r\n    if (i !== 0) return;\r\n    l = attr[i + val.length];\r\n\r\n    return l === '-' || !l;\r\n  },\r\n  '^=': function(attr, val) {\r\n    return attr.indexOf(val) === 0;\r\n  },\r\n  '$=': function(attr, val) {\r\n    var i = attr.lastIndexOf(val);\r\n    return i !== -1 && i + val.length === attr.length;\r\n  },\r\n  // non-standard\r\n  '!=': function(attr, val) {\r\n    return attr !== val;\r\n  }\r\n};\r\n\r\n/**\r\n * Combinator Logic\r\n */\r\n\r\nvar combinators = {\r\n  ' ': function(test) {\r\n    return function(el) {\r\n      /*jshint -W084 */\r\n      while (el = el.parentNode) {\r\n        if (test(el)) return el;\r\n      }\r\n    };\r\n  },\r\n  '>': function(test) {\r\n    return function(el) {\r\n      /*jshint -W084 */\r\n      if (el = el.parentNode) {\r\n        return test(el) && el;\r\n      }\r\n    };\r\n  },\r\n  '+': function(test) {\r\n    return function(el) {\r\n      /*jshint -W084 */\r\n      if (el = prev(el)) {\r\n        return test(el) && el;\r\n      }\r\n    };\r\n  },\r\n  '~': function(test) {\r\n    return function(el) {\r\n      /*jshint -W084 */\r\n      while (el = prev(el)) {\r\n        if (test(el)) return el;\r\n      }\r\n    };\r\n  },\r\n  'noop': function(test) {\r\n    return function(el) {\r\n      return test(el) && el;\r\n    };\r\n  },\r\n  'ref': function(test, name) {\r\n    var node;\r\n\r\n    function ref(el) {\r\n      var doc = el.ownerDocument\r\n        , nodes = doc.getElementsByTagName('*')\r\n        , i = nodes.length;\r\n\r\n      while (i--) {\r\n        node = nodes[i];\r\n        if (ref.test(el)) {\r\n          node = null;\r\n          return true;\r\n        }\r\n      }\r\n\r\n      node = null;\r\n    }\r\n\r\n    ref.combinator = function(el) {\r\n      if (!node || !node.getAttribute) return;\r\n\r\n      var attr = node.getAttribute(name) || '';\r\n      if (attr[0] === '#') attr = attr.substring(1);\r\n\r\n      if (attr === el.id && test(node)) {\r\n        return node;\r\n      }\r\n    };\r\n\r\n    return ref;\r\n  }\r\n};\r\n\r\n/**\r\n * Grammar\r\n */\r\n\r\nvar rules = {\r\n  escape: /\\\\(?:[^0-9A-Fa-f\\r\\n]|[0-9A-Fa-f]{1,6}[\\r\\n\\t ]?)/g,\r\n  str_escape: /(escape)|\\\\(\\n|\\r\\n?|\\f)/g,\r\n  nonascii: /[\\u00A0-\\uFFFF]/,\r\n  cssid: /(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,\r\n  qname: /^ *(cssid|\\*)/,\r\n  simple: /^(?:([.#]cssid)|pseudo|attr)/,\r\n  ref: /^ *\\/(cssid)\\/ */,\r\n  combinator: /^(?: +([^ \\w*.#\\\\]) +|( )+|([^ \\w*.#\\\\]))(?! *$)/,\r\n  attr: /^\\[(cssid)(?:([^\\w]?=)(inside))?\\]/,\r\n  pseudo: /^(:cssid)(?:\\((inside)\\))?/,\r\n  inside: /(?:\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|<[^\"'>]*>|\\\\[\"'>]|[^\"'>])*/,\r\n  ident: /^(cssid)$/\r\n};\r\n\r\nrules.cssid = replace(rules.cssid, 'nonascii', rules.nonascii);\r\nrules.cssid = replace(rules.cssid, 'escape', rules.escape);\r\nrules.qname = replace(rules.qname, 'cssid', rules.cssid);\r\nrules.simple = replace(rules.simple, 'cssid', rules.cssid);\r\nrules.ref = replace(rules.ref, 'cssid', rules.cssid);\r\nrules.attr = replace(rules.attr, 'cssid', rules.cssid);\r\nrules.pseudo = replace(rules.pseudo, 'cssid', rules.cssid);\r\nrules.inside = replace(rules.inside, '[^\"\\'>]*', rules.inside);\r\nrules.attr = replace(rules.attr, 'inside', makeInside('\\\\[', '\\\\]'));\r\nrules.pseudo = replace(rules.pseudo, 'inside', makeInside('\\\\(', '\\\\)'));\r\nrules.simple = replace(rules.simple, 'pseudo', rules.pseudo);\r\nrules.simple = replace(rules.simple, 'attr', rules.attr);\r\nrules.ident = replace(rules.ident, 'cssid', rules.cssid);\r\nrules.str_escape = replace(rules.str_escape, 'escape', rules.escape);\r\n\r\n/**\r\n * Compiling\r\n */\r\n\r\nvar compile = function(sel_) {\r\n  var sel = sel_.replace(/^\\s+|\\s+$/g, '')\r\n    , test\r\n    , filter = []\r\n    , buff = []\r\n    , subject\r\n    , qname\r\n    , cap\r\n    , op\r\n    , ref;\r\n\r\n  /*jshint -W084 */\r\n  while (sel) {\r\n    if (cap = rules.qname.exec(sel)) {\r\n      sel = sel.substring(cap[0].length);\r\n      qname = decodeid(cap[1]);\r\n      buff.push(tok(qname, true));\r\n    } else if (cap = rules.simple.exec(sel)) {\r\n      sel = sel.substring(cap[0].length);\r\n      qname = '*';\r\n      buff.push(tok(qname, true));\r\n      buff.push(tok(cap));\r\n    } else {\r\n      throw new SyntaxError('Invalid selector.');\r\n    }\r\n\r\n    while (cap = rules.simple.exec(sel)) {\r\n      sel = sel.substring(cap[0].length);\r\n      buff.push(tok(cap));\r\n    }\r\n\r\n    if (sel[0] === '!') {\r\n      sel = sel.substring(1);\r\n      subject = makeSubject();\r\n      subject.qname = qname;\r\n      buff.push(subject.simple);\r\n    }\r\n\r\n    if (cap = rules.ref.exec(sel)) {\r\n      sel = sel.substring(cap[0].length);\r\n      ref = combinators.ref(makeSimple(buff), decodeid(cap[1]));\r\n      filter.push(ref.combinator);\r\n      buff = [];\r\n      continue;\r\n    }\r\n\r\n    if (cap = rules.combinator.exec(sel)) {\r\n      sel = sel.substring(cap[0].length);\r\n      op = cap[1] || cap[2] || cap[3];\r\n      if (op === ',') {\r\n        filter.push(combinators.noop(makeSimple(buff)));\r\n        break;\r\n      }\r\n    } else {\r\n      op = 'noop';\r\n    }\r\n\r\n    if (!combinators[op]) { throw new SyntaxError('Bad combinator.'); }\r\n    filter.push(combinators[op](makeSimple(buff)));\r\n    buff = [];\r\n  }\r\n\r\n  test = makeTest(filter);\r\n  test.qname = qname;\r\n  test.sel = sel;\r\n\r\n  if (subject) {\r\n    subject.lname = test.qname;\r\n\r\n    subject.test = test;\r\n    subject.qname = subject.qname;\r\n    subject.sel = test.sel;\r\n    test = subject;\r\n  }\r\n\r\n  if (ref) {\r\n    ref.test = test;\r\n    ref.qname = test.qname;\r\n    ref.sel = test.sel;\r\n    test = ref;\r\n  }\r\n\r\n  return test;\r\n};\r\n\r\nvar tok = function(cap, qname) {\r\n  // qname\r\n  if (qname) {\r\n    return cap === '*'\r\n      ? selectors['*']\r\n      : selectors.type(cap);\r\n  }\r\n\r\n  // class/id\r\n  if (cap[1]) {\r\n    return cap[1][0] === '.'\r\n\t  // XXX unescape here?  or in attr?\r\n      ? selectors.attr('class', '~=', decodeid(cap[1].substring(1)), false)\r\n      : selectors.attr('id', '=', decodeid(cap[1].substring(1)), false);\r\n  }\r\n\r\n  // pseudo-name\r\n  // inside-pseudo\r\n  if (cap[2]) {\r\n    return cap[3]\r\n      ? selectors[decodeid(cap[2])](unquote(cap[3]))\r\n      : selectors[decodeid(cap[2])];\r\n  }\r\n\r\n  // attr name\r\n  // attr op\r\n  // attr value\r\n  if (cap[4]) {\r\n    var value = cap[6];\r\n    var i = /[\"'\\s]\\s*I$/i.test(value);\r\n    if (i) {\r\n      value = value.replace(/\\s*I$/i, '');\r\n    }\r\n    return selectors.attr(decodeid(cap[4]), cap[5] || '-', unquote(value), i);\r\n  }\r\n\r\n  throw new SyntaxError('Unknown Selector.');\r\n};\r\n\r\nvar makeSimple = function(func) {\r\n  var l = func.length\r\n    , i;\r\n\r\n  // Potentially make sure\r\n  // `el` is truthy.\r\n  if (l < 2) return func[0];\r\n\r\n  return function(el) {\r\n    if (!el) return;\r\n    for (i = 0; i < l; i++) {\r\n      if (!func[i](el)) return;\r\n    }\r\n    return true;\r\n  };\r\n};\r\n\r\nvar makeTest = function(func) {\r\n  if (func.length < 2) {\r\n    return function(el) {\r\n      return !!func[0](el);\r\n    };\r\n  }\r\n  return function(el) {\r\n    var i = func.length;\r\n    while (i--) {\r\n      if (!(el = func[i](el))) return;\r\n    }\r\n    return true;\r\n  };\r\n};\r\n\r\nvar makeSubject = function() {\r\n  var target;\r\n\r\n  function subject(el) {\r\n    var node = el.ownerDocument\r\n      , scope = node.getElementsByTagName(subject.lname)\r\n      , i = scope.length;\r\n\r\n    while (i--) {\r\n      if (subject.test(scope[i]) && target === el) {\r\n        target = null;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    target = null;\r\n  }\r\n\r\n  subject.simple = function(el) {\r\n    target = el;\r\n    return true;\r\n  };\r\n\r\n  return subject;\r\n};\r\n\r\nvar compileGroup = function(sel) {\r\n  var test = compile(sel)\r\n    , tests = [ test ];\r\n\r\n  while (test.sel) {\r\n    test = compile(test.sel);\r\n    tests.push(test);\r\n  }\r\n\r\n  if (tests.length < 2) return test;\r\n\r\n  return function(el) {\r\n    var l = tests.length\r\n      , i = 0;\r\n\r\n    for (; i < l; i++) {\r\n      if (tests[i](el)) return true;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Selection\r\n */\r\n\r\nvar find = function(sel, node) {\r\n  var results = []\r\n    , test = compile(sel)\r\n    , scope = node.getElementsByTagName(test.qname)\r\n    , i = 0\r\n    , el;\r\n\r\n  /*jshint -W084 */\r\n  while (el = scope[i++]) {\r\n    if (test(el)) results.push(el);\r\n  }\r\n\r\n  if (test.sel) {\r\n    while (test.sel) {\r\n      test = compile(test.sel);\r\n      scope = node.getElementsByTagName(test.qname);\r\n      i = 0;\r\n      /*jshint -W084 */\r\n      while (el = scope[i++]) {\r\n        if (test(el) && indexOf.call(results, el) === -1) {\r\n          results.push(el);\r\n        }\r\n      }\r\n    }\r\n    results.sort(order);\r\n  }\r\n\r\n  return results;\r\n};\r\n\r\n/**\r\n * Expose\r\n */\r\n\r\nmodule.exports = exports = function(sel, context) {\r\n  /* when context isn't a DocumentFragment and the selector is simple: */\r\n  var id, r;\r\n  if (context.nodeType !== 11 && sel.indexOf(' ') === -1) {\r\n    if (sel[0] === '#' && context.rooted && /^#[A-Z_][-A-Z0-9_]*$/i.test(sel)) {\r\n      if (context.doc._hasMultipleElementsWithId) {\r\n        id = sel.substring(1);\r\n        if (!context.doc._hasMultipleElementsWithId(id)) {\r\n          r = context.doc.getElementById(id);\r\n          return r ? [r] : [];\r\n        }\r\n      }\r\n    }\r\n    if (sel[0] === '.' && /^\\.\\w+$/.test(sel)) {\r\n      return context.getElementsByClassName(sel.substring(1));\r\n    }\r\n    if (/^\\w+$/.test(sel)) {\r\n      return context.getElementsByTagName(sel);\r\n    }\r\n  }\r\n  /* do things the hard/slow way */\r\n  return find(sel, context);\r\n};\r\n\r\nexports.selectors = selectors;\r\nexports.operators = operators;\r\nexports.combinators = combinators;\r\n\r\nexports.matches = function(el, sel) {\r\n  var test = { sel: sel };\r\n  do {\r\n    test = compile(test.sel);\r\n    if (test(el)) { return true; }\r\n  } while (test.sel);\r\n  return false;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/select.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/style_parser.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/style_parser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// The below is a compiled copy of https://github.com/angular/angular/blob/92e41e9cb417223d9888a4c23b4c0e73188f87d0/packages/compiler/src/render3/view/style_parser.ts\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.hyphenate = exports.parse = void 0;\r\n/**\r\n * Parses string representation of a style and converts it into object literal.\r\n *\r\n * @param value string representation of style as used in the `style` attribute in HTML.\r\n *   Example: `color: red; height: auto`.\r\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\r\n * 'auto']`\r\n */\r\nfunction parse(value) {\r\n  // we use a string array here instead of a string map\r\n  // because a string-map is not guaranteed to retain the\r\n  // order of the entries whereas a string array can be\r\n  // constructed in a [key, value, key, value] format.\r\n  const styles = [];\r\n  let i = 0;\r\n  let parenDepth = 0;\r\n  let quote = 0; /* Char.QuoteNone */\r\n  let valueStart = 0;\r\n  let propStart = 0;\r\n  let currentProp = null;\r\n  while (i < value.length) {\r\n    const token = value.charCodeAt(i++);\r\n    switch (token) {\r\n      case 40 /* Char.OpenParen */:\r\n        parenDepth++;\r\n        break;\r\n      case 41 /* Char.CloseParen */:\r\n        parenDepth--;\r\n        break;\r\n      case 39 /* Char.QuoteSingle */:\r\n        // valueStart needs to be there since prop values don't\r\n        // have quotes in CSS\r\n        if (quote === 0 /* Char.QuoteNone */) {\r\n          quote = 39 /* Char.QuoteSingle */;\r\n        } else if (\r\n          quote === 39 /* Char.QuoteSingle */ &&\r\n          value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */\r\n        ) {\r\n          quote = 0 /* Char.QuoteNone */;\r\n        }\r\n        break;\r\n      case 34 /* Char.QuoteDouble */:\r\n        // same logic as above\r\n        if (quote === 0 /* Char.QuoteNone */) {\r\n          quote = 34 /* Char.QuoteDouble */;\r\n        } else if (\r\n          quote === 34 /* Char.QuoteDouble */ &&\r\n          value.charCodeAt(i - 1) !== 92 /* Char.BackSlash */\r\n        ) {\r\n          quote = 0 /* Char.QuoteNone */;\r\n        }\r\n        break;\r\n      case 58 /* Char.Colon */:\r\n        if (\r\n          !currentProp &&\r\n          parenDepth === 0 &&\r\n          quote === 0 /* Char.QuoteNone */\r\n        ) {\r\n          currentProp = hyphenate(value.substring(propStart, i - 1).trim());\r\n          valueStart = i;\r\n        }\r\n        break;\r\n      case 59 /* Char.Semicolon */:\r\n        if (\r\n          currentProp &&\r\n          valueStart > 0 &&\r\n          parenDepth === 0 &&\r\n          quote === 0 /* Char.QuoteNone */\r\n        ) {\r\n          const styleVal = value.substring(valueStart, i - 1).trim();\r\n          styles.push(currentProp, styleVal);\r\n          propStart = i;\r\n          valueStart = 0;\r\n          currentProp = null;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  if (currentProp && valueStart) {\r\n    const styleVal = value.slice(valueStart).trim();\r\n    styles.push(currentProp, styleVal);\r\n  }\r\n  return styles;\r\n}\r\nexports.parse = parse;\r\nfunction hyphenate(value) {\r\n  return value\r\n    .replace(/[a-z][A-Z]/g, (v) => {\r\n      return v.charAt(0) + \"-\" + v.charAt(1);\r\n    })\r\n    .toLowerCase();\r\n}\r\nexports.hyphenate = hyphenate;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9zdHlsZV9wYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsR0FBRyxhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy94dWV6aGlyb25nL0RvY3VtZW50cy9HaXRIdWIvaHRtbF9zdHlsZV90cmFuc2Zvcm1lci9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9zdHlsZV9wYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5cclxuLy8gVGhlIGJlbG93IGlzIGEgY29tcGlsZWQgY29weSBvZiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvOTJlNDFlOWNiNDE3MjIzZDk4ODhhNGMyM2I0YzBlNzMxODhmODdkMC9wYWNrYWdlcy9jb21waWxlci9zcmMvcmVuZGVyMy92aWV3L3N0eWxlX3BhcnNlci50c1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmh5cGhlbmF0ZSA9IGV4cG9ydHMucGFyc2UgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBQYXJzZXMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3R5bGUgYW5kIGNvbnZlcnRzIGl0IGludG8gb2JqZWN0IGxpdGVyYWwuXHJcbiAqXHJcbiAqIEBwYXJhbSB2YWx1ZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2Ygc3R5bGUgYXMgdXNlZCBpbiB0aGUgYHN0eWxlYCBhdHRyaWJ1dGUgaW4gSFRNTC5cclxuICogICBFeGFtcGxlOiBgY29sb3I6IHJlZDsgaGVpZ2h0OiBhdXRvYC5cclxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3R5bGUgcHJvcGVydHkgbmFtZSBhbmQgdmFsdWUgcGFpcnMsIGUuZy4gYFsnY29sb3InLCAncmVkJywgJ2hlaWdodCcsXHJcbiAqICdhdXRvJ11gXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSkge1xyXG4gIC8vIHdlIHVzZSBhIHN0cmluZyBhcnJheSBoZXJlIGluc3RlYWQgb2YgYSBzdHJpbmcgbWFwXHJcbiAgLy8gYmVjYXVzZSBhIHN0cmluZy1tYXAgaXMgbm90IGd1YXJhbnRlZWQgdG8gcmV0YWluIHRoZVxyXG4gIC8vIG9yZGVyIG9mIHRoZSBlbnRyaWVzIHdoZXJlYXMgYSBzdHJpbmcgYXJyYXkgY2FuIGJlXHJcbiAgLy8gY29uc3RydWN0ZWQgaW4gYSBba2V5LCB2YWx1ZSwga2V5LCB2YWx1ZV0gZm9ybWF0LlxyXG4gIGNvbnN0IHN0eWxlcyA9IFtdO1xyXG4gIGxldCBpID0gMDtcclxuICBsZXQgcGFyZW5EZXB0aCA9IDA7XHJcbiAgbGV0IHF1b3RlID0gMDsgLyogQ2hhci5RdW90ZU5vbmUgKi9cclxuICBsZXQgdmFsdWVTdGFydCA9IDA7XHJcbiAgbGV0IHByb3BTdGFydCA9IDA7XHJcbiAgbGV0IGN1cnJlbnRQcm9wID0gbnVsbDtcclxuICB3aGlsZSAoaSA8IHZhbHVlLmxlbmd0aCkge1xyXG4gICAgY29uc3QgdG9rZW4gPSB2YWx1ZS5jaGFyQ29kZUF0KGkrKyk7XHJcbiAgICBzd2l0Y2ggKHRva2VuKSB7XHJcbiAgICAgIGNhc2UgNDAgLyogQ2hhci5PcGVuUGFyZW4gKi86XHJcbiAgICAgICAgcGFyZW5EZXB0aCsrO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDQxIC8qIENoYXIuQ2xvc2VQYXJlbiAqLzpcclxuICAgICAgICBwYXJlbkRlcHRoLS07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMzkgLyogQ2hhci5RdW90ZVNpbmdsZSAqLzpcclxuICAgICAgICAvLyB2YWx1ZVN0YXJ0IG5lZWRzIHRvIGJlIHRoZXJlIHNpbmNlIHByb3AgdmFsdWVzIGRvbid0XHJcbiAgICAgICAgLy8gaGF2ZSBxdW90ZXMgaW4gQ1NTXHJcbiAgICAgICAgaWYgKHF1b3RlID09PSAwIC8qIENoYXIuUXVvdGVOb25lICovKSB7XHJcbiAgICAgICAgICBxdW90ZSA9IDM5IC8qIENoYXIuUXVvdGVTaW5nbGUgKi87XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgIHF1b3RlID09PSAzOSAvKiBDaGFyLlF1b3RlU2luZ2xlICovICYmXHJcbiAgICAgICAgICB2YWx1ZS5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gOTIgLyogQ2hhci5CYWNrU2xhc2ggKi9cclxuICAgICAgICApIHtcclxuICAgICAgICAgIHF1b3RlID0gMCAvKiBDaGFyLlF1b3RlTm9uZSAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMzQgLyogQ2hhci5RdW90ZURvdWJsZSAqLzpcclxuICAgICAgICAvLyBzYW1lIGxvZ2ljIGFzIGFib3ZlXHJcbiAgICAgICAgaWYgKHF1b3RlID09PSAwIC8qIENoYXIuUXVvdGVOb25lICovKSB7XHJcbiAgICAgICAgICBxdW90ZSA9IDM0IC8qIENoYXIuUXVvdGVEb3VibGUgKi87XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgIHF1b3RlID09PSAzNCAvKiBDaGFyLlF1b3RlRG91YmxlICovICYmXHJcbiAgICAgICAgICB2YWx1ZS5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gOTIgLyogQ2hhci5CYWNrU2xhc2ggKi9cclxuICAgICAgICApIHtcclxuICAgICAgICAgIHF1b3RlID0gMCAvKiBDaGFyLlF1b3RlTm9uZSAqLztcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgNTggLyogQ2hhci5Db2xvbiAqLzpcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhY3VycmVudFByb3AgJiZcclxuICAgICAgICAgIHBhcmVuRGVwdGggPT09IDAgJiZcclxuICAgICAgICAgIHF1b3RlID09PSAwIC8qIENoYXIuUXVvdGVOb25lICovXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjdXJyZW50UHJvcCA9IGh5cGhlbmF0ZSh2YWx1ZS5zdWJzdHJpbmcocHJvcFN0YXJ0LCBpIC0gMSkudHJpbSgpKTtcclxuICAgICAgICAgIHZhbHVlU3RhcnQgPSBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSA1OSAvKiBDaGFyLlNlbWljb2xvbiAqLzpcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBjdXJyZW50UHJvcCAmJlxyXG4gICAgICAgICAgdmFsdWVTdGFydCA+IDAgJiZcclxuICAgICAgICAgIHBhcmVuRGVwdGggPT09IDAgJiZcclxuICAgICAgICAgIHF1b3RlID09PSAwIC8qIENoYXIuUXVvdGVOb25lICovXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb25zdCBzdHlsZVZhbCA9IHZhbHVlLnN1YnN0cmluZyh2YWx1ZVN0YXJ0LCBpIC0gMSkudHJpbSgpO1xyXG4gICAgICAgICAgc3R5bGVzLnB1c2goY3VycmVudFByb3AsIHN0eWxlVmFsKTtcclxuICAgICAgICAgIHByb3BTdGFydCA9IGk7XHJcbiAgICAgICAgICB2YWx1ZVN0YXJ0ID0gMDtcclxuICAgICAgICAgIGN1cnJlbnRQcm9wID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChjdXJyZW50UHJvcCAmJiB2YWx1ZVN0YXJ0KSB7XHJcbiAgICBjb25zdCBzdHlsZVZhbCA9IHZhbHVlLnNsaWNlKHZhbHVlU3RhcnQpLnRyaW0oKTtcclxuICAgIHN0eWxlcy5wdXNoKGN1cnJlbnRQcm9wLCBzdHlsZVZhbCk7XHJcbiAgfVxyXG4gIHJldHVybiBzdHlsZXM7XHJcbn1cclxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xyXG5mdW5jdGlvbiBoeXBoZW5hdGUodmFsdWUpIHtcclxuICByZXR1cm4gdmFsdWVcclxuICAgIC5yZXBsYWNlKC9bYS16XVtBLVpdL2csICh2KSA9PiB7XHJcbiAgICAgIHJldHVybiB2LmNoYXJBdCgwKSArIFwiLVwiICsgdi5jaGFyQXQoMSk7XHJcbiAgICB9KVxyXG4gICAgLnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuZXhwb3J0cy5oeXBoZW5hdGUgPSBoeXBoZW5hdGU7XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/style_parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/svg.js":
/*!****************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/svg.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar Element = __webpack_require__(/*! ./Element */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/Element.js\");\r\nvar defineElement = __webpack_require__(/*! ./defineElement */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/defineElement.js\");\r\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\");\r\nvar CSSStyleDeclaration = __webpack_require__(/*! ./CSSStyleDeclaration */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/CSSStyleDeclaration.js\");\r\n\r\nvar svgElements = exports.elements = {};\r\nvar svgNameToImpl = Object.create(null);\r\n\r\nexports.createElement = function(doc, localName, prefix) {\r\n  var impl = svgNameToImpl[localName] || SVGElement;\r\n  return new impl(doc, localName, prefix);\r\n};\r\n\r\nfunction define(spec) {\r\n  return defineElement(spec, SVGElement, svgElements, svgNameToImpl);\r\n}\r\n\r\nvar SVGElement = define({\r\n  superclass: Element,\r\n  name: 'SVGElement',\r\n  ctor: function SVGElement(doc, localName, prefix) {\r\n    Element.call(this, doc, localName, utils.NAMESPACE.SVG, prefix);\r\n  },\r\n  props: {\r\n    style: { get: function() {\r\n      if (!this._style)\r\n        this._style = new CSSStyleDeclaration(this);\r\n      return this._style;\r\n    }}\r\n  }\r\n});\r\n\r\ndefine({\r\n  name: 'SVGSVGElement',\r\n  ctor: function SVGSVGElement(doc, localName, prefix) {\r\n    SVGElement.call(this, doc, localName, prefix);\r\n  },\r\n  tag: 'svg',\r\n  props: {\r\n    createSVGRect: { value: function () {\r\n      return exports.createElement(this.ownerDocument, 'rect', null);\r\n    } }\r\n  }\r\n});\r\n\r\ndefine({\r\n  tags: [\r\n    'a', 'altGlyph', 'altGlyphDef', 'altGlyphItem', 'animate', 'animateColor', 'animateMotion', 'animateTransform',\r\n    'circle', 'clipPath', 'color-profile', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix',\r\n    'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight',\r\n    'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode',\r\n    'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter',\r\n    'font', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignObject', 'g',\r\n    'glyph', 'glyphRef', 'hkern', 'image', 'line', 'linearGradient', 'marker', 'mask', 'metadata', 'missing-glyph',\r\n    'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'script', 'set', 'stop',  'style',\r\n    'switch', 'symbol', 'text', 'textPath', 'title', 'tref', 'tspan', 'use', 'view', 'vkern'\r\n  ]\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi9zdmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixjQUFjLG1CQUFPLENBQUMseUVBQVc7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMscUZBQWlCO0FBQzdDLFlBQVksbUJBQU8sQ0FBQyxxRUFBUztBQUM3QiwwQkFBMEIsbUJBQU8sQ0FBQyxpR0FBdUI7QUFDekQ7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL3N2Zy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuL0VsZW1lbnQnKTtcclxudmFyIGRlZmluZUVsZW1lbnQgPSByZXF1aXJlKCcuL2RlZmluZUVsZW1lbnQnKTtcclxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG52YXIgQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vQ1NTU3R5bGVEZWNsYXJhdGlvbicpO1xyXG5cclxudmFyIHN2Z0VsZW1lbnRzID0gZXhwb3J0cy5lbGVtZW50cyA9IHt9O1xyXG52YXIgc3ZnTmFtZVRvSW1wbCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG5leHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbihkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XHJcbiAgdmFyIGltcGwgPSBzdmdOYW1lVG9JbXBsW2xvY2FsTmFtZV0gfHwgU1ZHRWxlbWVudDtcclxuICByZXR1cm4gbmV3IGltcGwoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBkZWZpbmUoc3BlYykge1xyXG4gIHJldHVybiBkZWZpbmVFbGVtZW50KHNwZWMsIFNWR0VsZW1lbnQsIHN2Z0VsZW1lbnRzLCBzdmdOYW1lVG9JbXBsKTtcclxufVxyXG5cclxudmFyIFNWR0VsZW1lbnQgPSBkZWZpbmUoe1xyXG4gIHN1cGVyY2xhc3M6IEVsZW1lbnQsXHJcbiAgbmFtZTogJ1NWR0VsZW1lbnQnLFxyXG4gIGN0b3I6IGZ1bmN0aW9uIFNWR0VsZW1lbnQoZG9jLCBsb2NhbE5hbWUsIHByZWZpeCkge1xyXG4gICAgRWxlbWVudC5jYWxsKHRoaXMsIGRvYywgbG9jYWxOYW1lLCB1dGlscy5OQU1FU1BBQ0UuU1ZHLCBwcmVmaXgpO1xyXG4gIH0sXHJcbiAgcHJvcHM6IHtcclxuICAgIHN0eWxlOiB7IGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghdGhpcy5fc3R5bGUpXHJcbiAgICAgICAgdGhpcy5fc3R5bGUgPSBuZXcgQ1NTU3R5bGVEZWNsYXJhdGlvbih0aGlzKTtcclxuICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlO1xyXG4gICAgfX1cclxuICB9XHJcbn0pO1xyXG5cclxuZGVmaW5lKHtcclxuICBuYW1lOiAnU1ZHU1ZHRWxlbWVudCcsXHJcbiAgY3RvcjogZnVuY3Rpb24gU1ZHU1ZHRWxlbWVudChkb2MsIGxvY2FsTmFtZSwgcHJlZml4KSB7XHJcbiAgICBTVkdFbGVtZW50LmNhbGwodGhpcywgZG9jLCBsb2NhbE5hbWUsIHByZWZpeCk7XHJcbiAgfSxcclxuICB0YWc6ICdzdmcnLFxyXG4gIHByb3BzOiB7XHJcbiAgICBjcmVhdGVTVkdSZWN0OiB7IHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBleHBvcnRzLmNyZWF0ZUVsZW1lbnQodGhpcy5vd25lckRvY3VtZW50LCAncmVjdCcsIG51bGwpO1xyXG4gICAgfSB9XHJcbiAgfVxyXG59KTtcclxuXHJcbmRlZmluZSh7XHJcbiAgdGFnczogW1xyXG4gICAgJ2EnLCAnYWx0R2x5cGgnLCAnYWx0R2x5cGhEZWYnLCAnYWx0R2x5cGhJdGVtJywgJ2FuaW1hdGUnLCAnYW5pbWF0ZUNvbG9yJywgJ2FuaW1hdGVNb3Rpb24nLCAnYW5pbWF0ZVRyYW5zZm9ybScsXHJcbiAgICAnY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2NvbG9yLXByb2ZpbGUnLCAnY3Vyc29yJywgJ2RlZnMnLCAnZGVzYycsICdlbGxpcHNlJywgJ2ZlQmxlbmQnLCAnZmVDb2xvck1hdHJpeCcsXHJcbiAgICAnZmVDb21wb25lbnRUcmFuc2ZlcicsICdmZUNvbXBvc2l0ZScsICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJywgJ2ZlRGlzcGxhY2VtZW50TWFwJywgJ2ZlRGlzdGFudExpZ2h0JyxcclxuICAgICdmZUZsb29kJywgJ2ZlRnVuY0EnLCAnZmVGdW5jQicsICdmZUZ1bmNHJywgJ2ZlRnVuY1InLCAnZmVHYXVzc2lhbkJsdXInLCAnZmVJbWFnZScsICdmZU1lcmdlJywgJ2ZlTWVyZ2VOb2RlJyxcclxuICAgICdmZU1vcnBob2xvZ3knLCAnZmVPZmZzZXQnLCAnZmVQb2ludExpZ2h0JywgJ2ZlU3BlY3VsYXJMaWdodGluZycsICdmZVNwb3RMaWdodCcsICdmZVRpbGUnLCAnZmVUdXJidWxlbmNlJywgJ2ZpbHRlcicsXHJcbiAgICAnZm9udCcsICdmb250LWZhY2UnLCAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2Utc3JjJywgJ2ZvbnQtZmFjZS11cmknLCAnZm9yZWlnbk9iamVjdCcsICdnJyxcclxuICAgICdnbHlwaCcsICdnbHlwaFJlZicsICdoa2VybicsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hcmtlcicsICdtYXNrJywgJ21ldGFkYXRhJywgJ21pc3NpbmctZ2x5cGgnLFxyXG4gICAgJ21wYXRoJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc2NyaXB0JywgJ3NldCcsICdzdG9wJywgICdzdHlsZScsXHJcbiAgICAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJywgJ3RyZWYnLCAndHNwYW4nLCAndXNlJywgJ3ZpZXcnLCAndmtlcm4nXHJcbiAgXVxyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nvar DOMException = __webpack_require__(/*! ./DOMException */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/DOMException.js\");\r\nvar ERR = DOMException;\r\nvar isApiWritable = (__webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@mixmark-io/domino/lib/config.js\").isApiWritable);\r\n\r\nexports.NAMESPACE = {\r\n  HTML: 'http://www.w3.org/1999/xhtml',\r\n  XML: 'http://www.w3.org/XML/1998/namespace',\r\n  XMLNS: 'http://www.w3.org/2000/xmlns/',\r\n  MATHML: 'http://www.w3.org/1998/Math/MathML',\r\n  SVG: 'http://www.w3.org/2000/svg',\r\n  XLINK: 'http://www.w3.org/1999/xlink'\r\n};\r\n\r\n//\r\n// Shortcut functions for throwing errors of various types.\r\n//\r\nexports.IndexSizeError = function() { throw new DOMException(ERR.INDEX_SIZE_ERR); };\r\nexports.HierarchyRequestError = function() { throw new DOMException(ERR.HIERARCHY_REQUEST_ERR); };\r\nexports.WrongDocumentError = function() { throw new DOMException(ERR.WRONG_DOCUMENT_ERR); };\r\nexports.InvalidCharacterError = function() { throw new DOMException(ERR.INVALID_CHARACTER_ERR); };\r\nexports.NoModificationAllowedError = function() { throw new DOMException(ERR.NO_MODIFICATION_ALLOWED_ERR); };\r\nexports.NotFoundError = function() { throw new DOMException(ERR.NOT_FOUND_ERR); };\r\nexports.NotSupportedError = function() { throw new DOMException(ERR.NOT_SUPPORTED_ERR); };\r\nexports.InvalidStateError = function() { throw new DOMException(ERR.INVALID_STATE_ERR); };\r\nexports.SyntaxError = function() { throw new DOMException(ERR.SYNTAX_ERR); };\r\nexports.InvalidModificationError = function() { throw new DOMException(ERR.INVALID_MODIFICATION_ERR); };\r\nexports.NamespaceError = function() { throw new DOMException(ERR.NAMESPACE_ERR); };\r\nexports.InvalidAccessError = function() { throw new DOMException(ERR.INVALID_ACCESS_ERR); };\r\nexports.TypeMismatchError = function() { throw new DOMException(ERR.TYPE_MISMATCH_ERR); };\r\nexports.SecurityError = function() { throw new DOMException(ERR.SECURITY_ERR); };\r\nexports.NetworkError = function() { throw new DOMException(ERR.NETWORK_ERR); };\r\nexports.AbortError = function() { throw new DOMException(ERR.ABORT_ERR); };\r\nexports.UrlMismatchError = function() { throw new DOMException(ERR.URL_MISMATCH_ERR); };\r\nexports.QuotaExceededError = function() { throw new DOMException(ERR.QUOTA_EXCEEDED_ERR); };\r\nexports.TimeoutError = function() { throw new DOMException(ERR.TIMEOUT_ERR); };\r\nexports.InvalidNodeTypeError = function() { throw new DOMException(ERR.INVALID_NODE_TYPE_ERR); };\r\nexports.DataCloneError = function() { throw new DOMException(ERR.DATA_CLONE_ERR); };\r\n\r\nexports.nyi = function() {\r\n  throw new Error(\"NotYetImplemented\");\r\n};\r\n\r\nexports.shouldOverride = function() {\r\n  throw new Error(\"Abstract function; should be overriding in subclass.\");\r\n};\r\n\r\nexports.assert = function(expr, msg) {\r\n  if (!expr) {\r\n    throw new Error(\"Assertion failed: \" + (msg || \"\") + \"\\n\" + new Error().stack);\r\n  }\r\n};\r\n\r\nexports.expose = function(src, c) {\r\n  for (var n in src) {\r\n    Object.defineProperty(c.prototype, n, { value: src[n], writable: isApiWritable });\r\n  }\r\n};\r\n\r\nexports.merge = function(a, b) {\r\n  for (var n in b) {\r\n    a[n] = b[n];\r\n  }\r\n};\r\n\r\n// Compare two nodes based on their document order. This function is intended\r\n// to be passed to sort(). Assumes that the array being sorted does not\r\n// contain duplicates.  And that all nodes are connected and comparable.\r\n// Clever code by ppk via jeresig.\r\nexports.documentOrder = function(n,m) {\r\n  /* jshint bitwise: false */\r\n  return 3 - (n.compareDocumentPosition(m) & 6);\r\n};\r\n\r\nexports.toASCIILowerCase = function(s) {\r\n  return s.replace(/[A-Z]+/g, function(c) {\r\n    return c.toLowerCase();\r\n  });\r\n};\r\n\r\nexports.toASCIIUpperCase = function(s) {\r\n  return s.replace(/[a-z]+/g, function(c) {\r\n    return c.toUpperCase();\r\n  });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLG1CQUFtQixtQkFBTyxDQUFDLG1GQUFnQjtBQUMzQztBQUNBLG9CQUFvQiw0R0FBaUM7QUFDckQ7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnQkFBZ0I7QUFDdEMsNkJBQTZCLGdCQUFnQjtBQUM3QywwQkFBMEIsZ0JBQWdCO0FBQzFDLDZCQUE2QixnQkFBZ0I7QUFDN0Msa0NBQWtDLGdCQUFnQjtBQUNsRCxxQkFBcUIsZ0JBQWdCO0FBQ3JDLHlCQUF5QixnQkFBZ0I7QUFDekMseUJBQXlCLGdCQUFnQjtBQUN6QyxtQkFBbUIsZ0JBQWdCO0FBQ25DLGdDQUFnQyxnQkFBZ0I7QUFDaEQsc0JBQXNCLGdCQUFnQjtBQUN0QywwQkFBMEIsZ0JBQWdCO0FBQzFDLHlCQUF5QixnQkFBZ0I7QUFDekMscUJBQXFCLGdCQUFnQjtBQUNyQyxvQkFBb0IsZ0JBQWdCO0FBQ3BDLGtCQUFrQixnQkFBZ0I7QUFDbEMsd0JBQXdCLGdCQUFnQjtBQUN4QywwQkFBMEIsZ0JBQWdCO0FBQzFDLG9CQUFvQixnQkFBZ0I7QUFDcEMsNEJBQTRCLGdCQUFnQjtBQUM1QyxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsNENBQTRDLHdDQUF3QztBQUNwRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyIvVXNlcnMveHVlemhpcm9uZy9Eb2N1bWVudHMvR2l0SHViL2h0bWxfc3R5bGVfdHJhbnNmb3JtZXIvbm9kZV9tb2R1bGVzL0BtaXhtYXJrLWlvL2RvbWluby9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBET01FeGNlcHRpb24gPSByZXF1aXJlKCcuL0RPTUV4Y2VwdGlvbicpO1xyXG52YXIgRVJSID0gRE9NRXhjZXB0aW9uO1xyXG52YXIgaXNBcGlXcml0YWJsZSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKS5pc0FwaVdyaXRhYmxlO1xyXG5cclxuZXhwb3J0cy5OQU1FU1BBQ0UgPSB7XHJcbiAgSFRNTDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLFxyXG4gIFhNTDogJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZScsXHJcbiAgWE1MTlM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycsXHJcbiAgTUFUSE1MOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXHJcbiAgU1ZHOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxyXG4gIFhMSU5LOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcclxufTtcclxuXHJcbi8vXHJcbi8vIFNob3J0Y3V0IGZ1bmN0aW9ucyBmb3IgdGhyb3dpbmcgZXJyb3JzIG9mIHZhcmlvdXMgdHlwZXMuXHJcbi8vXHJcbmV4cG9ydHMuSW5kZXhTaXplRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5ERVhfU0laRV9FUlIpOyB9O1xyXG5leHBvcnRzLkhpZXJhcmNoeVJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5ISUVSQVJDSFlfUkVRVUVTVF9FUlIpOyB9O1xyXG5leHBvcnRzLldyb25nRG9jdW1lbnRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5XUk9OR19ET0NVTUVOVF9FUlIpOyB9O1xyXG5leHBvcnRzLkludmFsaWRDaGFyYWN0ZXJFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX0NIQVJBQ1RFUl9FUlIpOyB9O1xyXG5leHBvcnRzLk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUik7IH07XHJcbmV4cG9ydHMuTm90Rm91bmRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OT1RfRk9VTkRfRVJSKTsgfTtcclxuZXhwb3J0cy5Ob3RTdXBwb3J0ZWRFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5OT1RfU1VQUE9SVEVEX0VSUik7IH07XHJcbmV4cG9ydHMuSW52YWxpZFN0YXRlRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuSU5WQUxJRF9TVEFURV9FUlIpOyB9O1xyXG5leHBvcnRzLlN5bnRheEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlNZTlRBWF9FUlIpOyB9O1xyXG5leHBvcnRzLkludmFsaWRNb2RpZmljYXRpb25FcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX01PRElGSUNBVElPTl9FUlIpOyB9O1xyXG5leHBvcnRzLk5hbWVzcGFjZUVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLk5BTUVTUEFDRV9FUlIpOyB9O1xyXG5leHBvcnRzLkludmFsaWRBY2Nlc3NFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5JTlZBTElEX0FDQ0VTU19FUlIpOyB9O1xyXG5leHBvcnRzLlR5cGVNaXNtYXRjaEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlRZUEVfTUlTTUFUQ0hfRVJSKTsgfTtcclxuZXhwb3J0cy5TZWN1cml0eUVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLlNFQ1VSSVRZX0VSUik7IH07XHJcbmV4cG9ydHMuTmV0d29ya0Vycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLk5FVFdPUktfRVJSKTsgfTtcclxuZXhwb3J0cy5BYm9ydEVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLkFCT1JUX0VSUik7IH07XHJcbmV4cG9ydHMuVXJsTWlzbWF0Y2hFcnJvciA9IGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKEVSUi5VUkxfTUlTTUFUQ0hfRVJSKTsgfTtcclxuZXhwb3J0cy5RdW90YUV4Y2VlZGVkRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuUVVPVEFfRVhDRUVERURfRVJSKTsgfTtcclxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuVElNRU9VVF9FUlIpOyB9O1xyXG5leHBvcnRzLkludmFsaWROb2RlVHlwZUVycm9yID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBET01FeGNlcHRpb24oRVJSLklOVkFMSURfTk9ERV9UWVBFX0VSUik7IH07XHJcbmV4cG9ydHMuRGF0YUNsb25lRXJyb3IgPSBmdW5jdGlvbigpIHsgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihFUlIuREFUQV9DTE9ORV9FUlIpOyB9O1xyXG5cclxuZXhwb3J0cy5ueWkgPSBmdW5jdGlvbigpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RZZXRJbXBsZW1lbnRlZFwiKTtcclxufTtcclxuXHJcbmV4cG9ydHMuc2hvdWxkT3ZlcnJpZGUgPSBmdW5jdGlvbigpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoXCJBYnN0cmFjdCBmdW5jdGlvbjsgc2hvdWxkIGJlIG92ZXJyaWRpbmcgaW4gc3ViY2xhc3MuXCIpO1xyXG59O1xyXG5cclxuZXhwb3J0cy5hc3NlcnQgPSBmdW5jdGlvbihleHByLCBtc2cpIHtcclxuICBpZiAoIWV4cHIpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkFzc2VydGlvbiBmYWlsZWQ6IFwiICsgKG1zZyB8fCBcIlwiKSArIFwiXFxuXCIgKyBuZXcgRXJyb3IoKS5zdGFjayk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0cy5leHBvc2UgPSBmdW5jdGlvbihzcmMsIGMpIHtcclxuICBmb3IgKHZhciBuIGluIHNyYykge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGMucHJvdG90eXBlLCBuLCB7IHZhbHVlOiBzcmNbbl0sIHdyaXRhYmxlOiBpc0FwaVdyaXRhYmxlIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbihhLCBiKSB7XHJcbiAgZm9yICh2YXIgbiBpbiBiKSB7XHJcbiAgICBhW25dID0gYltuXTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBDb21wYXJlIHR3byBub2RlcyBiYXNlZCBvbiB0aGVpciBkb2N1bWVudCBvcmRlci4gVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZFxyXG4vLyB0byBiZSBwYXNzZWQgdG8gc29ydCgpLiBBc3N1bWVzIHRoYXQgdGhlIGFycmF5IGJlaW5nIHNvcnRlZCBkb2VzIG5vdFxyXG4vLyBjb250YWluIGR1cGxpY2F0ZXMuICBBbmQgdGhhdCBhbGwgbm9kZXMgYXJlIGNvbm5lY3RlZCBhbmQgY29tcGFyYWJsZS5cclxuLy8gQ2xldmVyIGNvZGUgYnkgcHBrIHZpYSBqZXJlc2lnLlxyXG5leHBvcnRzLmRvY3VtZW50T3JkZXIgPSBmdW5jdGlvbihuLG0pIHtcclxuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cclxuICByZXR1cm4gMyAtIChuLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG0pICYgNik7XHJcbn07XHJcblxyXG5leHBvcnRzLnRvQVNDSUlMb3dlckNhc2UgPSBmdW5jdGlvbihzKSB7XHJcbiAgcmV0dXJuIHMucmVwbGFjZSgvW0EtWl0rL2csIGZ1bmN0aW9uKGMpIHtcclxuICAgIHJldHVybiBjLnRvTG93ZXJDYXNlKCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5leHBvcnRzLnRvQVNDSUlVcHBlckNhc2UgPSBmdW5jdGlvbihzKSB7XHJcbiAgcmV0dXJuIHMucmVwbGFjZSgvW2Etel0rL2csIGZ1bmN0aW9uKGMpIHtcclxuICAgIHJldHVybiBjLnRvVXBwZXJDYXNlKCk7XHJcbiAgfSk7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mixmark-io/domino/lib/xmlnames.js":
/*!*********************************************************!*\
  !*** ./node_modules/@mixmark-io/domino/lib/xmlnames.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n// This grammar is from the XML and XML Namespace specs. It specifies whether\r\n// a string (such as an element or attribute name) is a valid Name or QName.\r\n//\r\n// Name           ::= NameStartChar (NameChar)*\r\n// NameStartChar  ::= \":\" | [A-Z] | \"_\" | [a-z] |\r\n//                    [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] |\r\n//                    [#x370-#x37D] | [#x37F-#x1FFF] |\r\n//                    [#x200C-#x200D] | [#x2070-#x218F] |\r\n//                    [#x2C00-#x2FEF] | [#x3001-#xD7FF] |\r\n//                    [#xF900-#xFDCF] | [#xFDF0-#xFFFD] |\r\n//                    [#x10000-#xEFFFF]\r\n//\r\n// NameChar       ::= NameStartChar | \"-\" | \".\" | [0-9] |\r\n//                    #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n//\r\n// QName          ::= PrefixedName| UnprefixedName\r\n// PrefixedName   ::= Prefix ':' LocalPart\r\n// UnprefixedName ::= LocalPart\r\n// Prefix         ::= NCName\r\n// LocalPart      ::= NCName\r\n// NCName         ::= Name - (Char* ':' Char*)\r\n//                    # An XML Name, minus the \":\"\r\n//\r\n\r\nexports.isValidName = isValidName;\r\nexports.isValidQName = isValidQName;\r\n\r\n// Most names will be ASCII only. Try matching against simple regexps first\r\nvar simplename = /^[_:A-Za-z][-.:\\w]+$/;\r\nvar simpleqname = /^([_A-Za-z][-.\\w]+|[_A-Za-z][-.\\w]+:[_A-Za-z][-.\\w]+)$/;\r\n\r\n// If the regular expressions above fail, try more complex ones that work\r\n// for any identifiers using codepoints from the Unicode BMP\r\nvar ncnamestartchars = \"_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02ff\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\";\r\nvar ncnamechars = \"-._A-Za-z0-9\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02ff\\u0300-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203f\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\";\r\n\r\nvar ncname = \"[\" + ncnamestartchars + \"][\" + ncnamechars + \"]*\";\r\nvar namestartchars = ncnamestartchars + \":\";\r\nvar namechars = ncnamechars + \":\";\r\nvar name = new RegExp(\"^[\" + namestartchars + \"]\" + \"[\" + namechars + \"]*$\");\r\nvar qname = new RegExp(\"^(\" + ncname + \"|\" + ncname + \":\" + ncname + \")$\");\r\n\r\n// XML says that these characters are also legal:\r\n// [#x10000-#xEFFFF].  So if the patterns above fail, and the\r\n// target string includes surrogates, then try the following\r\n// patterns that allow surrogates and then run an extra validation\r\n// step to make sure that the surrogates are in valid pairs and in\r\n// the right range.  Note that since the characters \\uf0000 to \\u1f0000\r\n// are not allowed, it means that the high surrogate can only go up to\r\n// \\uDB7f instead of \\uDBFF.\r\nvar hassurrogates = /[\\uD800-\\uDB7F\\uDC00-\\uDFFF]/;\r\nvar surrogatechars = /[\\uD800-\\uDB7F\\uDC00-\\uDFFF]/g;\r\nvar surrogatepairs = /[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]/g;\r\n\r\n// Modify the variables above to allow surrogates\r\nncnamestartchars += \"\\uD800-\\uDB7F\\uDC00-\\uDFFF\";\r\nncnamechars += \"\\uD800-\\uDB7F\\uDC00-\\uDFFF\";\r\nncname = \"[\" + ncnamestartchars + \"][\" + ncnamechars + \"]*\";\r\nnamestartchars = ncnamestartchars + \":\";\r\nnamechars = ncnamechars + \":\";\r\n\r\n// Build another set of regexps that include surrogates\r\nvar surrogatename = new RegExp(\"^[\" + namestartchars + \"]\" + \"[\" + namechars + \"]*$\");\r\nvar surrogateqname = new RegExp(\"^(\" + ncname + \"|\" + ncname + \":\" + ncname + \")$\");\r\n\r\nfunction isValidName(s) {\r\n  if (simplename.test(s)) return true; // Plain ASCII\r\n  if (name.test(s)) return true; // Unicode BMP\r\n\r\n  // Maybe the tests above failed because s includes surrogate pairs\r\n  // Most likely, though, they failed for some more basic syntax problem\r\n  if (!hassurrogates.test(s)) return false;\r\n\r\n  // Is the string a valid name if we allow surrogates?\r\n  if (!surrogatename.test(s)) return false;\r\n\r\n  // Finally, are the surrogates all correctly paired up?\r\n  var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);\r\n  return pairs !== null && 2*pairs.length === chars.length;\r\n}\r\n\r\nfunction isValidQName(s) {\r\n  if (simpleqname.test(s)) return true; // Plain ASCII\r\n  if (qname.test(s)) return true; // Unicode BMP\r\n\r\n  if (!hassurrogates.test(s)) return false;\r\n  if (!surrogateqname.test(s)) return false;\r\n  var chars = s.match(surrogatechars), pairs = s.match(surrogatepairs);\r\n  return pairs !== null && 2*pairs.length === chars.length;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1peG1hcmstaW8vZG9taW5vL2xpYi94bWxuYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3h1ZXpoaXJvbmcvRG9jdW1lbnRzL0dpdEh1Yi9odG1sX3N0eWxlX3RyYW5zZm9ybWVyL25vZGVfbW9kdWxlcy9AbWl4bWFyay1pby9kb21pbm8vbGliL3htbG5hbWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBUaGlzIGdyYW1tYXIgaXMgZnJvbSB0aGUgWE1MIGFuZCBYTUwgTmFtZXNwYWNlIHNwZWNzLiBJdCBzcGVjaWZpZXMgd2hldGhlclxyXG4vLyBhIHN0cmluZyAoc3VjaCBhcyBhbiBlbGVtZW50IG9yIGF0dHJpYnV0ZSBuYW1lKSBpcyBhIHZhbGlkIE5hbWUgb3IgUU5hbWUuXHJcbi8vXHJcbi8vIE5hbWUgICAgICAgICAgIDo6PSBOYW1lU3RhcnRDaGFyIChOYW1lQ2hhcikqXHJcbi8vIE5hbWVTdGFydENoYXIgIDo6PSBcIjpcIiB8IFtBLVpdIHwgXCJfXCIgfCBbYS16XSB8XHJcbi8vICAgICAgICAgICAgICAgICAgICBbI3hDMC0jeEQ2XSB8IFsjeEQ4LSN4RjZdIHwgWyN4RjgtI3gyRkZdIHxcclxuLy8gICAgICAgICAgICAgICAgICAgIFsjeDM3MC0jeDM3RF0gfCBbI3gzN0YtI3gxRkZGXSB8XHJcbi8vICAgICAgICAgICAgICAgICAgICBbI3gyMDBDLSN4MjAwRF0gfCBbI3gyMDcwLSN4MjE4Rl0gfFxyXG4vLyAgICAgICAgICAgICAgICAgICAgWyN4MkMwMC0jeDJGRUZdIHwgWyN4MzAwMS0jeEQ3RkZdIHxcclxuLy8gICAgICAgICAgICAgICAgICAgIFsjeEY5MDAtI3hGRENGXSB8IFsjeEZERjAtI3hGRkZEXSB8XHJcbi8vICAgICAgICAgICAgICAgICAgICBbI3gxMDAwMC0jeEVGRkZGXVxyXG4vL1xyXG4vLyBOYW1lQ2hhciAgICAgICA6Oj0gTmFtZVN0YXJ0Q2hhciB8IFwiLVwiIHwgXCIuXCIgfCBbMC05XSB8XHJcbi8vICAgICAgICAgICAgICAgICAgICAjeEI3IHwgWyN4MDMwMC0jeDAzNkZdIHwgWyN4MjAzRi0jeDIwNDBdXHJcbi8vXHJcbi8vIFFOYW1lICAgICAgICAgIDo6PSBQcmVmaXhlZE5hbWV8IFVucHJlZml4ZWROYW1lXHJcbi8vIFByZWZpeGVkTmFtZSAgIDo6PSBQcmVmaXggJzonIExvY2FsUGFydFxyXG4vLyBVbnByZWZpeGVkTmFtZSA6Oj0gTG9jYWxQYXJ0XHJcbi8vIFByZWZpeCAgICAgICAgIDo6PSBOQ05hbWVcclxuLy8gTG9jYWxQYXJ0ICAgICAgOjo9IE5DTmFtZVxyXG4vLyBOQ05hbWUgICAgICAgICA6Oj0gTmFtZSAtIChDaGFyKiAnOicgQ2hhciopXHJcbi8vICAgICAgICAgICAgICAgICAgICAjIEFuIFhNTCBOYW1lLCBtaW51cyB0aGUgXCI6XCJcclxuLy9cclxuXHJcbmV4cG9ydHMuaXNWYWxpZE5hbWUgPSBpc1ZhbGlkTmFtZTtcclxuZXhwb3J0cy5pc1ZhbGlkUU5hbWUgPSBpc1ZhbGlkUU5hbWU7XHJcblxyXG4vLyBNb3N0IG5hbWVzIHdpbGwgYmUgQVNDSUkgb25seS4gVHJ5IG1hdGNoaW5nIGFnYWluc3Qgc2ltcGxlIHJlZ2V4cHMgZmlyc3RcclxudmFyIHNpbXBsZW5hbWUgPSAvXltfOkEtWmEtel1bLS46XFx3XSskLztcclxudmFyIHNpbXBsZXFuYW1lID0gL14oW19BLVphLXpdWy0uXFx3XSt8W19BLVphLXpdWy0uXFx3XSs6W19BLVphLXpdWy0uXFx3XSspJC87XHJcblxyXG4vLyBJZiB0aGUgcmVndWxhciBleHByZXNzaW9ucyBhYm92ZSBmYWlsLCB0cnkgbW9yZSBjb21wbGV4IG9uZXMgdGhhdCB3b3JrXHJcbi8vIGZvciBhbnkgaWRlbnRpZmllcnMgdXNpbmcgY29kZXBvaW50cyBmcm9tIHRoZSBVbmljb2RlIEJNUFxyXG52YXIgbmNuYW1lc3RhcnRjaGFycyA9IFwiX0EtWmEtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJmZlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFwiO1xyXG52YXIgbmNuYW1lY2hhcnMgPSBcIi0uX0EtWmEtejAtOVxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyZmZcXHUwMzAwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDXFx1MjAwRFxcdTIwM2ZcXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXCI7XHJcblxyXG52YXIgbmNuYW1lID0gXCJbXCIgKyBuY25hbWVzdGFydGNoYXJzICsgXCJdW1wiICsgbmNuYW1lY2hhcnMgKyBcIl0qXCI7XHJcbnZhciBuYW1lc3RhcnRjaGFycyA9IG5jbmFtZXN0YXJ0Y2hhcnMgKyBcIjpcIjtcclxudmFyIG5hbWVjaGFycyA9IG5jbmFtZWNoYXJzICsgXCI6XCI7XHJcbnZhciBuYW1lID0gbmV3IFJlZ0V4cChcIl5bXCIgKyBuYW1lc3RhcnRjaGFycyArIFwiXVwiICsgXCJbXCIgKyBuYW1lY2hhcnMgKyBcIl0qJFwiKTtcclxudmFyIHFuYW1lID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBuY25hbWUgKyBcInxcIiArIG5jbmFtZSArIFwiOlwiICsgbmNuYW1lICsgXCIpJFwiKTtcclxuXHJcbi8vIFhNTCBzYXlzIHRoYXQgdGhlc2UgY2hhcmFjdGVycyBhcmUgYWxzbyBsZWdhbDpcclxuLy8gWyN4MTAwMDAtI3hFRkZGRl0uICBTbyBpZiB0aGUgcGF0dGVybnMgYWJvdmUgZmFpbCwgYW5kIHRoZVxyXG4vLyB0YXJnZXQgc3RyaW5nIGluY2x1ZGVzIHN1cnJvZ2F0ZXMsIHRoZW4gdHJ5IHRoZSBmb2xsb3dpbmdcclxuLy8gcGF0dGVybnMgdGhhdCBhbGxvdyBzdXJyb2dhdGVzIGFuZCB0aGVuIHJ1biBhbiBleHRyYSB2YWxpZGF0aW9uXHJcbi8vIHN0ZXAgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHN1cnJvZ2F0ZXMgYXJlIGluIHZhbGlkIHBhaXJzIGFuZCBpblxyXG4vLyB0aGUgcmlnaHQgcmFuZ2UuICBOb3RlIHRoYXQgc2luY2UgdGhlIGNoYXJhY3RlcnMgXFx1ZjAwMDAgdG8gXFx1MWYwMDAwXHJcbi8vIGFyZSBub3QgYWxsb3dlZCwgaXQgbWVhbnMgdGhhdCB0aGUgaGlnaCBzdXJyb2dhdGUgY2FuIG9ubHkgZ28gdXAgdG9cclxuLy8gXFx1REI3ZiBpbnN0ZWFkIG9mIFxcdURCRkYuXHJcbnZhciBoYXNzdXJyb2dhdGVzID0gL1tcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZdLztcclxudmFyIHN1cnJvZ2F0ZWNoYXJzID0gL1tcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZdL2c7XHJcbnZhciBzdXJyb2dhdGVwYWlycyA9IC9bXFx1RDgwMC1cXHVEQjdGXVtcXHVEQzAwLVxcdURGRkZdL2c7XHJcblxyXG4vLyBNb2RpZnkgdGhlIHZhcmlhYmxlcyBhYm92ZSB0byBhbGxvdyBzdXJyb2dhdGVzXHJcbm5jbmFtZXN0YXJ0Y2hhcnMgKz0gXCJcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZcIjtcclxubmNuYW1lY2hhcnMgKz0gXCJcXHVEODAwLVxcdURCN0ZcXHVEQzAwLVxcdURGRkZcIjtcclxubmNuYW1lID0gXCJbXCIgKyBuY25hbWVzdGFydGNoYXJzICsgXCJdW1wiICsgbmNuYW1lY2hhcnMgKyBcIl0qXCI7XHJcbm5hbWVzdGFydGNoYXJzID0gbmNuYW1lc3RhcnRjaGFycyArIFwiOlwiO1xyXG5uYW1lY2hhcnMgPSBuY25hbWVjaGFycyArIFwiOlwiO1xyXG5cclxuLy8gQnVpbGQgYW5vdGhlciBzZXQgb2YgcmVnZXhwcyB0aGF0IGluY2x1ZGUgc3Vycm9nYXRlc1xyXG52YXIgc3Vycm9nYXRlbmFtZSA9IG5ldyBSZWdFeHAoXCJeW1wiICsgbmFtZXN0YXJ0Y2hhcnMgKyBcIl1cIiArIFwiW1wiICsgbmFtZWNoYXJzICsgXCJdKiRcIik7XHJcbnZhciBzdXJyb2dhdGVxbmFtZSA9IG5ldyBSZWdFeHAoXCJeKFwiICsgbmNuYW1lICsgXCJ8XCIgKyBuY25hbWUgKyBcIjpcIiArIG5jbmFtZSArIFwiKSRcIik7XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkTmFtZShzKSB7XHJcbiAgaWYgKHNpbXBsZW5hbWUudGVzdChzKSkgcmV0dXJuIHRydWU7IC8vIFBsYWluIEFTQ0lJXHJcbiAgaWYgKG5hbWUudGVzdChzKSkgcmV0dXJuIHRydWU7IC8vIFVuaWNvZGUgQk1QXHJcblxyXG4gIC8vIE1heWJlIHRoZSB0ZXN0cyBhYm92ZSBmYWlsZWQgYmVjYXVzZSBzIGluY2x1ZGVzIHN1cnJvZ2F0ZSBwYWlyc1xyXG4gIC8vIE1vc3QgbGlrZWx5LCB0aG91Z2gsIHRoZXkgZmFpbGVkIGZvciBzb21lIG1vcmUgYmFzaWMgc3ludGF4IHByb2JsZW1cclxuICBpZiAoIWhhc3N1cnJvZ2F0ZXMudGVzdChzKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAvLyBJcyB0aGUgc3RyaW5nIGEgdmFsaWQgbmFtZSBpZiB3ZSBhbGxvdyBzdXJyb2dhdGVzP1xyXG4gIGlmICghc3Vycm9nYXRlbmFtZS50ZXN0KHMpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIC8vIEZpbmFsbHksIGFyZSB0aGUgc3Vycm9nYXRlcyBhbGwgY29ycmVjdGx5IHBhaXJlZCB1cD9cclxuICB2YXIgY2hhcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZWNoYXJzKSwgcGFpcnMgPSBzLm1hdGNoKHN1cnJvZ2F0ZXBhaXJzKTtcclxuICByZXR1cm4gcGFpcnMgIT09IG51bGwgJiYgMipwYWlycy5sZW5ndGggPT09IGNoYXJzLmxlbmd0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNWYWxpZFFOYW1lKHMpIHtcclxuICBpZiAoc2ltcGxlcW5hbWUudGVzdChzKSkgcmV0dXJuIHRydWU7IC8vIFBsYWluIEFTQ0lJXHJcbiAgaWYgKHFuYW1lLnRlc3QocykpIHJldHVybiB0cnVlOyAvLyBVbmljb2RlIEJNUFxyXG5cclxuICBpZiAoIWhhc3N1cnJvZ2F0ZXMudGVzdChzKSkgcmV0dXJuIGZhbHNlO1xyXG4gIGlmICghc3Vycm9nYXRlcW5hbWUudGVzdChzKSkgcmV0dXJuIGZhbHNlO1xyXG4gIHZhciBjaGFycyA9IHMubWF0Y2goc3Vycm9nYXRlY2hhcnMpLCBwYWlycyA9IHMubWF0Y2goc3Vycm9nYXRlcGFpcnMpO1xyXG4gIHJldHVybiBwYWlycyAhPT0gbnVsbCAmJiAyKnBhaXJzLmxlbmd0aCA9PT0gY2hhcnMubGVuZ3RoO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mixmark-io/domino/lib/xmlnames.js\n");

/***/ })

};
;